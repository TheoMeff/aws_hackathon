AWSTemplateFormatVersion: '2010-09-09'
Description: 'Booking System Resources for Nova S2S Workshop'

Parameters:
  LambdaRuntime:
    Type: String
    Default: python3.9
    Description: Runtime for the Lambda function
  
  LambdaTimeout:
    Type: Number
    Default: 30
    Description: Timeout for the Lambda function in seconds
  
  LambdaMemory:
    Type: Number
    Default: 256
    Description: Memory allocation for the Lambda function in MB

Resources:
  # DynamoDB Table
  BookingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: NovSonicWorkshopBookings
      AttributeDefinitions:
        - AttributeName: booking_id
          AttributeType: S
      KeySchema:
        - AttributeName: booking_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # IAM Role for Lambda
  BookingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NovSonicWorkshopBookingLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NovSonicWorkshopDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                  - dynamodb:CreateTable
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NovSonicWorkshopBookings
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource: '*'

  # Lambda Function
  BookingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NovSonicWorkshopBookingFunction
      Runtime: !Ref LambdaRuntime
      Handler: index.lambda_handler
      Role: !GetAtt BookingLambdaRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Code:
        ZipFile: |
          import json
          import logging
          import os
          from http import HTTPStatus
          import boto3
          import logging
          from botocore.exceptions import ClientError
          import random
          import string

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          class BookingDB:
              """Class to handle DynamoDB operations for booking details."""
              
              def __init__(self, table_name=None, region=None):
                  """Initialize the DynamoDB client and table."""
                  self.table_name = table_name or os.getenv("TABLE_NAME", "Bookings")
                  self.region = region or os.getenv("AWS_REGION", "us-east-1")
                  self.dynamodb = boto3.resource('dynamodb', region_name=self.region)
                  self.table = self.dynamodb.Table(self.table_name)
                  logger.info(f"Initialized BookingDB with table_name={self.table_name}")
              
              def _generate_booking_id(self):
                  """Generate a 5-digit alphanumeric booking ID."""
                  return ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))
              
              def get_booking(self, booking_id):
                  """Get booking details by booking ID."""
                  try:
                      response = self.table.get_item(
                          Key={'booking_id': booking_id}
                      )
                      
                      if 'Item' in response:
                          return response['Item']
                      else:
                          return {"message": f"No booking found with ID: {booking_id}"}
                          
                  except ClientError as e:
                      logger.error(f"Error getting booking {booking_id}: {str(e)}")
                      return {"error": str(e)}
              
              def create_booking(self, booking_details):
                  """Create a new booking."""
                  try:
                      booking_details['booking_id'] = self._generate_booking_id()
                      
                      self.table.put_item(Item=booking_details)
                      
                      logger.info(f"Booking created: {booking_details['booking_id']}")
                      return {
                          "message": "Booking created successfully",
                          "booking_id": booking_details['booking_id'],
                          "booking": booking_details
                      }
                          
                  except ClientError as e:
                      logger.error(f"Error creating booking: {str(e)}")
                      return {"error": str(e)}
              
              def update_booking(self, booking_id, update_data):
                  """Update an existing booking."""
                  try:
                      # Verify the booking exists
                      existing = self.get_booking(booking_id)
                      if "error" in existing or "message" in existing:
                          return {"error": f"Booking with ID {booking_id} not found"}
                      
                      # Build the update expression and attribute values
                      update_expression = "SET "
                      expression_attribute_values = {}
                      
                      for key, value in update_data.items():
                          if key != 'booking_id':  # Skip the primary key
                              update_expression += f"{key} = :{key}, "
                              expression_attribute_values[f":{key}"] = value
                      
                      # Remove the trailing comma and space
                      update_expression = update_expression[:-2]
                      
                      # Update the item
                      response = self.table.update_item(
                          Key={'booking_id': booking_id},
                          UpdateExpression=update_expression,
                          ExpressionAttributeValues=expression_attribute_values,
                          ReturnValues="UPDATED_NEW"
                      )
                      
                      logger.info(f"Booking updated: {booking_id}")
                      return {
                          "message": "Booking updated successfully",
                          "booking_id": booking_id,
                          "updated_attributes": response.get('Attributes', {})
                      }
                          
                  except ClientError as e:
                      logger.error(f"Error updating booking {booking_id}: {str(e)}")
                      return {"error": str(e)}
              
              def delete_booking(self, booking_id):
                  """Delete a booking."""
                  try:
                      # Verify the booking exists
                      existing = self.get_booking(booking_id)
                      if "error" in existing or "message" in existing:
                          return {"error": f"Booking with ID {booking_id} not found"}
                      
                      # Delete the item
                      self.table.delete_item(
                          Key={'booking_id': booking_id}
                      )
                      
                      logger.info(f"Booking deleted: {booking_id}")
                      return {
                          "message": f"Booking {booking_id} deleted successfully"
                      }
                          
                  except ClientError as e:
                      logger.error(f"Error deleting booking {booking_id}: {str(e)}")
                      return {"error": str(e)}
              
              def list_bookings(self, limit=10):
                  """List all bookings, with optional limit."""
                  try:
                      response = self.table.scan(Limit=limit)
                      
                      result = {
                          "bookings": response.get('Items', []),
                          "count": len(response.get('Items', [])),
                          "scanned_count": response.get('ScannedCount', 0)
                      }
                      
                      logger.info(f"Listed {result['count']} bookings")
                      return result
                          
                  except ClientError as e:
                      logger.error(f"Error listing bookings: {str(e)}")
                      return {"error": str(e)}
                      
              def find_bookings_by_customer(self, customer_name):
                  """Find bookings by customer name (case-insensitive substring match)."""
                  try:
                      # Convert customer name to lowercase for case-insensitive search
                      search_name = customer_name.lower()
                      
                      # Scan all items in the table
                      response = self.table.scan()
                      all_items = response.get('Items', [])
                      
                      # Filter items manually for more flexible matching
                      matching_bookings = []
                      for item in all_items:
                          if 'customer_name' in item:
                              db_name = item['customer_name'].lower()
                              if search_name in db_name or db_name in search_name:
                                  matching_bookings.append(item)
                      
                      result = {
                          "bookings": matching_bookings,
                          "count": len(matching_bookings),
                          "scanned_count": response.get('ScannedCount', 0)
                      }
                      
                      logger.info(f"Found {result['count']} bookings matching '{customer_name}'")
                      return result
                      
                  except ClientError as e:
                      logger.error(f"Error finding bookings by customer: {str(e)}")
                      return {"error": str(e)}

              def get_latest_booking_by_customer(self, customer_name):
                  """Get the latest booking for a customer by booking_date (if available)."""
                  bookings = self.find_bookings_by_customer(customer_name).get('bookings', [])
                  if not bookings:
                      return None
                  # Sort by booking_date if available, else return the first
                  bookings = sorted(bookings, key=lambda b: b.get('booking_date', ''), reverse=True)
                  return bookings[0]

              def update_bookings_by_customer(self, customer_name, update_data):
                  """
                  Update all bookings for a given customer name.
                  Args:
                      customer_name (str): The customer name to search for.
                      update_data (dict): The data to update in each booking.
                  Returns:
                      dict: Summary of updates performed.
                  """
                  bookings = self.find_bookings_by_customer(customer_name).get('bookings', [])
                  results = []
                  for booking in bookings:
                      booking_id = booking['booking_id']
                      result = self.update_booking(booking_id, update_data)
                      results.append(result)
                  
                  logger.info(f"Updated {len(results)} bookings for customer '{customer_name}'")
                  return {
                      "message": f"Updated {len(results)} bookings for customer '{customer_name}'",
                      "results": results
                  }

              def delete_booking_by_customer(self, customer_name):
                  """Delete the latest booking for a customer."""
                  booking = self.get_latest_booking_by_customer(customer_name)
                  if not booking:
                      return {"error": f"No booking found for customer {customer_name}"}
                  
                  result = self.delete_booking(booking['booking_id'])
                  logger.info(f"Deleted latest booking for customer '{customer_name}'")
                  return result

              def update_booking_by_customer(self, customer_name, update_data):
                  """Update the latest booking for a customer."""
                  booking = self.get_latest_booking_by_customer(customer_name)
                  if not booking:
                      return {"error": f"No booking found for customer {customer_name}"}
                  
                  result = self.update_booking(booking['booking_id'], update_data)
                  logger.info(f"Updated latest booking for customer '{customer_name}'")
                  return result

          # Singleton instance for reuse
          booking_db = None

          def get_booking_db():
              """Get the singleton instance of BookingDB."""
              global booking_db
              if booking_db is None:
                  booking_db = BookingDB()
              return booking_db

          # NOTE: Environment variables are loaded from the .env file in the root of python-server.

          class BookingLambda:
              """
              Handler for booking operations in AWS Lambda.
              Provides an interface between Bedrock Agent API and the booking database.
              """
              
              def __init__(self):
                  """Initialize the BookingLambda with a database connection."""
                  self.db = get_booking_db()
                  
              def handle_request(self, event):
                  """
                  Main entry point for Lambda handler. Processes incoming events from Bedrock.
                  
                  Args:
                      event (dict): The Lambda event containing the Bedrock agent request.
                      
                  Returns:
                      dict: Response formatted for Bedrock agent.
                  """
                  try:
                      logger.info("Received booking request")
                      
                      # Extract action group, function name, and HTTP method
                      action_group = event.get('actionGroup')
                      http_method = event.get('httpMethod')
                      
                      # Extract function name from apiPath (remove leading slash)
                      api_path = event.get('apiPath', '')
                      function = api_path.lstrip('/') if api_path else None
                      
                      # If function is still None, try to get it from the function field
                      if not function:
                          function = event.get('function')
                          
                      # Get parameters from both the top-level parameters array and the requestBody
                      parameters = self._extract_parameters(event)
                      
                      logger.info(f"Processing: {function}, Method: {http_method}")
                      
                      if not function:
                          return self._error_response("No function or apiPath specified in the request")
                      
                      # Map function name to method
                      handler = getattr(self, function, None)
                      if not handler:
                          return self._error_response(f"Unsupported function: {function}")
                      
                      # Call the handler
                      result = handler(parameters)
                      
                      # Format the response for Bedrock agent
                      response = self._format_response(action_group, function, result, http_method)
                      return response
                      
                  except Exception as e:
                      logger.error(f"Error handling request: {str(e)}")
                      return self._error_response(str(e), HTTPStatus.INTERNAL_SERVER_ERROR)

              def _extract_parameters(self, event):
                  """
                  Extract parameters from both the top-level parameters array and the requestBody.
                  
                  Args:
                      event (dict): The Lambda event.
                      
                  Returns:
                      list: Combined parameters.
                  """
                  parameters = event.get('parameters', [])
                  
                  # Extract parameters from requestBody if present
                  if 'requestBody' in event and 'content' in event['requestBody']:
                      content = event['requestBody']['content']
                      if 'application/json' in content and 'properties' in content['application/json']:
                          request_body_params = content['application/json']['properties']
                          # Merge parameters from requestBody with top-level parameters
                          parameters.extend(request_body_params)
                          
                  return parameters

              # BOOKING API OPERATION HANDLERS
              # Each handler must match an OpenAPI operationId exactly
              
              def getBooking(self, parameters):
                  """
                  Get details for a specific booking by ID.
                  
                  Args:
                      parameters (list): List of parameter objects, must include booking_id.
                      
                  Returns:
                      dict: Booking details or error.
                  """
                  booking_id = self._get_param(parameters, 'booking_id')
                  if not booking_id:
                      return {'error': "Missing required parameter: booking_id"}
                      
                  return self.db.get_booking(booking_id)
                  
              def findBookingsByCustomer(self, parameters):
                  """
                  Find bookings by customer name (case-insensitive substring match).
                  
                  Args:
                      parameters (list): List of parameter objects, must include customer_name.
                      
                  Returns:
                      dict: List of matching bookings or error.
                  """
                  customer_name = self._get_param(parameters, 'customer_name')
                  
                  if not customer_name:
                      return {'error': "Missing required parameter: customer_name"}
                      
                  return self.db.find_bookings_by_customer(customer_name)

              def createBooking(self, parameters):
                  """
                  Create a new booking. Only customer_name is required; other fields are optional.
                  """
                  customer_name = self._get_param(parameters, 'customer_name')
                  if not customer_name:
                      return {'error': "Missing required parameter: customer_name"}
                  booking_date = self._get_param(parameters, 'booking_date', '')
                  service_type = self._get_param(parameters, 'service_type', '')
                  status = self._get_param(parameters, 'status', 'pending')
                  notes = self._get_param(parameters, 'notes', '')
                  return self.db.create_booking({
                      'customer_name': customer_name,
                      'booking_date': booking_date,
                      'service_type': service_type,
                      'status': status,
                      'notes': notes
                  })

              def updateBooking(self, parameters):
                  """
                  Update an existing booking by customer name (preferred) or booking_id.
                  If multiple bookings exist for the customer, return them for clarification.
                  """
                  booking_id = self._get_param(parameters, 'booking_id')
                  customer_name = self._get_param(parameters, 'customer_name')
                  updates = {p['name']: p['value'] for p in parameters if p['name'] not in ['booking_id', 'customer_name']}
                  
                  if booking_id:
                      return self.db.update_booking(booking_id, updates)
                  elif customer_name:
                      bookings = self.db.find_bookings_by_customer(customer_name).get('bookings', [])
                      if not bookings:
                          return {'error': f"No bookings found for {customer_name}"}
                      if len(bookings) > 1:
                          return {'error': f"Multiple bookings found for {customer_name}. Please specify more details.", 'bookings': bookings}
                      return self.db.update_booking(bookings[0]['booking_id'], updates)
                  else:
                      return {'error': "Missing required parameter: booking_id or customer_name"}

              def deleteBooking(self, parameters):
                  """
                  Delete a booking by customer name (preferred) or booking_id.
                  If multiple bookings exist for the customer, return them for clarification.
                  """
                  booking_id = self._get_param(parameters, 'booking_id')
                  customer_name = self._get_param(parameters, 'customer_name')
                  if booking_id:
                      return self.db.delete_booking(booking_id)
                  elif customer_name:
                      bookings = self.db.find_bookings_by_customer(customer_name).get('bookings', [])
                      if not bookings:
                          return {'error': f"No bookings found for {customer_name}"}
                      if len(bookings) > 1:
                          return {'error': f"Multiple bookings found for {customer_name}. Please specify more details.", 'bookings': bookings}
                      return self.db.delete_booking(bookings[0]['booking_id'])
                  else:
                      return {'error': "Missing required parameter: booking_id or customer_name"}

              def listBookings(self, parameters):
                  """
                  List all bookings with optional limit.
                  
                  Args:
                      parameters (list): List of parameter objects, may include limit.
                      
                  Returns:
                      dict: List of bookings or error.
                  """
                  limit = int(self._get_param(parameters, 'limit', 10))
                  return self.db.list_bookings(limit)

              # HELPER METHODS
              
              def _get_param(self, parameters, name, default=None):
                  """
                  Get parameter value by name from parameters list.
                  
                  Args:
                      parameters (list): List of parameter objects.
                      name (str): Name of parameter to find.
                      default: Default value if parameter not found.
                      
                  Returns:
                      Value of parameter or default.
                  """
                  return next((p['value'] for p in parameters if p['name'] == name), default)

              def _format_response(self, action_group, function, result, http_method):
                  """
                  Format the response for Bedrock agent.
                  
                  Args:
                      action_group (str): Action group name.
                      function (str): Function name.
                      result (dict/str): Result from handler.
                      http_method (str): HTTP method.
                      
                  Returns:
                      dict: Formatted response.
                  """
                  # Format according to Bedrock agent's expectations
                  if isinstance(result, dict):
                      body = json.dumps(result)
                  else:
                      body = result
                      
                  # Create response in the exact format Bedrock expects
                  return {
                      "messageVersion": "1.0",
                      "response": {
                          "actionGroup": action_group,
                          "apiPath": f"/{function}",
                          "httpMethod": http_method,
                          "httpStatusCode": 200,
                          "responseBody": {
                              "application/json": {
                                  "body": body
                              }
                          }
                      }
                  }

              def _error_response(self, message, code=HTTPStatus.BAD_REQUEST):
                  """
                  Create an error response.
                  
                  Args:
                      message (str): Error message.
                      code (HTTPStatus): HTTP status code.
                      
                  Returns:
                      dict: Error response.
                  """
                  logger.error(f"Error: {message}")
                  
                  return {
                      'statusCode': code,
                      'body': json.dumps({'error': message})
                  }


          # Singleton instance
          booking_lambda = BookingLambda()

          def lambda_handler(event, context):
              """
              Lambda handler function.
              
              Args:
                  event (dict): Lambda event.
                  context (LambdaContext): Lambda context.
                  
              Returns:
                  dict: Response for Bedrock agent.
              """
              try:
                  return booking_lambda.handle_request(event)
              except Exception as e:
                  logger.error(f"Unhandled exception in lambda_handler: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': 'Internal server error',
                          'message': str(e)
                      })
                  }
      Environment:
        Variables:
          TABLE_NAME: NovSonicWorkshopBookings

  # Lambda Permission for Bedrock
  BedrockInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BookingFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceAccount: !Ref AWS::AccountId

  # Bedrock Execution Role
  BedrockExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NovSonicWorkshopBedrockExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: NovSonicWorkshopLambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt BookingFunction.Arn

Outputs:
  BookingLambdaArn:
    Description: ARN of the Booking Lambda function
    Value: !GetAtt BookingFunction.Arn
  DynamoDBTableName:
    Description: Name of the DynamoDB table
    Value: !Ref BookingsTable
  BedrockExecutionRoleArn:
    Description: ARN of the Bedrock Execution Role
    Value: !GetAtt BedrockExecutionRole.Arn