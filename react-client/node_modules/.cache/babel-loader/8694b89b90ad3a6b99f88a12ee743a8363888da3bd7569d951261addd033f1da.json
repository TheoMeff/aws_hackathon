{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useMemo } from 'react';\nimport { parseCountValue } from '../../internal/analytics/utils/parse-count-text';\nimport { useTableComponentsContext } from '../../internal/context/table-component-context';\n/**\n * Custom hook that integrates table counter values with table component context.\n *\n * The extracted count value is automatically synchronized with the table header\n * component through the table context, updating the countText property.\n */\nexport const useTableIntegration = countText => {\n  const tableComponentContext = useTableComponentsContext();\n  const countValue = useMemo(() => parseCountValue(countText), [countText]);\n  useEffect(() => {\n    var _a;\n    if (((_a = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.headerRef) === null || _a === void 0 ? void 0 : _a.current) && countValue !== undefined) {\n      tableComponentContext.headerRef.current.totalCount = countValue;\n      return () => {\n        var _a;\n        (_a = tableComponentContext.headerRef.current) === null || _a === void 0 ? true : delete _a.totalCount;\n      };\n    }\n  }, [tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.headerRef, countValue]);\n};","map":{"version":3,"names":["useEffect","useMemo","parseCountValue","useTableComponentsContext","useTableIntegration","countText","tableComponentContext","countValue","_a","headerRef","current","undefined","totalCount"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/header/analytics/use-table-integration.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useMemo } from 'react';\n\nimport { parseCountValue } from '../../internal/analytics/utils/parse-count-text';\nimport { useTableComponentsContext } from '../../internal/context/table-component-context';\n\n/**\n * Custom hook that integrates table counter values with table component context.\n *\n * The extracted count value is automatically synchronized with the table header\n * component through the table context, updating the countText property.\n */\nexport const useTableIntegration = (countText: string | undefined) => {\n  const tableComponentContext = useTableComponentsContext();\n  const countValue = useMemo(() => parseCountValue(countText), [countText]);\n\n  useEffect(() => {\n    if (tableComponentContext?.headerRef?.current && countValue !== undefined) {\n      tableComponentContext.headerRef.current.totalCount = countValue;\n\n      return () => {\n        delete tableComponentContext.headerRef.current?.totalCount;\n      };\n    }\n  }, [tableComponentContext?.headerRef, countValue]);\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAE1C,SAASC,eAAe,QAAQ,iDAAiD;AACjF,SAASC,yBAAyB,QAAQ,gDAAgD;AAE1F;;;;;;AAMA,OAAO,MAAMC,mBAAmB,GAAIC,SAA6B,IAAI;EACnE,MAAMC,qBAAqB,GAAGH,yBAAyB,EAAE;EACzD,MAAMI,UAAU,GAAGN,OAAO,CAAC,MAAMC,eAAe,CAACG,SAAS,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEzEL,SAAS,CAAC,MAAK;;IACb,IAAI,EAAAQ,EAAA,GAAAF,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEG,SAAS,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,OAAO,KAAIH,UAAU,KAAKI,SAAS,EAAE;MACzEL,qBAAqB,CAACG,SAAS,CAACC,OAAO,CAACE,UAAU,GAAGL,UAAU;MAE/D,OAAO,MAAK;;QACH,CAAAC,EAAA,GAAAF,qBAAqB,CAACG,SAAS,CAACC,OAAO,cAAAF,EAAA,4BAAAA,EAAA,CAAEI,UAAU;MAC5D,CAAC;;EAEL,CAAC,EAAE,CAACN,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEG,SAAS,EAAEF,UAAU,CAAC,CAAC;AACpD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}