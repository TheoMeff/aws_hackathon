{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nimport { SPLIT_PANEL_MIN_WIDTH } from './constants';\n/**\n * Even if the Split Panel is set to be displayed on the side, it will be forced to the bottom\n * if the available space is less than 280px.\n *\n * We also have to account for the fact that after the split panel changes its position\n * from bottom to side or vice versa, there is a chance that the content  a scrollbar appears or disappears from the page,\n * which changes the available space again. This could potentially lead to an infinite loop.\n * To prevent that, we give the split panel some \"resistance\" to change from bottom to side\n * (but not from side to bottom), requiring in this case some extra space on top of the \"nominal\" 280px.\n */\nfunction checkBasedOnPreviousPosition() {\n  let isForced = false; // Remember position for the next render\n  return availableWidthForSplitPanel => {\n    const minWidth = isForced ? SPLIT_PANEL_MIN_WIDTH + browserScrollbarSize().width : SPLIT_PANEL_MIN_WIDTH;\n    isForced = availableWidthForSplitPanel < minWidth;\n    return isForced;\n  };\n}\nconst checkForcedPosition = checkBasedOnPreviousPosition();\nexport function shouldSplitPanelBeForcedToBottom({\n  isMobile,\n  availableWidthForSplitPanel\n}) {\n  if (isMobile) {\n    return true;\n  }\n  return checkForcedPosition(availableWidthForSplitPanel);\n}","map":{"version":3,"names":["browserScrollbarSize","SPLIT_PANEL_MIN_WIDTH","checkBasedOnPreviousPosition","isForced","availableWidthForSplitPanel","minWidth","width","checkForcedPosition","shouldSplitPanelBeForcedToBottom","isMobile"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/app-layout/split-panel/split-panel-forced-position.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { browserScrollbarSize } from '../../internal/utils/browser-scrollbar-size';\nimport { SPLIT_PANEL_MIN_WIDTH } from './constants';\n\n/**\n * Even if the Split Panel is set to be displayed on the side, it will be forced to the bottom\n * if the available space is less than 280px.\n *\n * We also have to account for the fact that after the split panel changes its position\n * from bottom to side or vice versa, there is a chance that the content  a scrollbar appears or disappears from the page,\n * which changes the available space again. This could potentially lead to an infinite loop.\n * To prevent that, we give the split panel some \"resistance\" to change from bottom to side\n * (but not from side to bottom), requiring in this case some extra space on top of the \"nominal\" 280px.\n */\n\nfunction checkBasedOnPreviousPosition() {\n  let isForced = false; // Remember position for the next render\n  return (availableWidthForSplitPanel: number) => {\n    const minWidth = isForced ? SPLIT_PANEL_MIN_WIDTH + browserScrollbarSize().width : SPLIT_PANEL_MIN_WIDTH;\n    isForced = availableWidthForSplitPanel < minWidth;\n    return isForced;\n  };\n}\n\nconst checkForcedPosition = checkBasedOnPreviousPosition();\n\nexport function shouldSplitPanelBeForcedToBottom({\n  isMobile,\n  availableWidthForSplitPanel,\n}: {\n  isMobile: boolean;\n  availableWidthForSplitPanel: number;\n}) {\n  if (isMobile) {\n    return true;\n  }\n\n  return checkForcedPosition(availableWidthForSplitPanel);\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,oBAAoB,QAAQ,6CAA6C;AAClF,SAASC,qBAAqB,QAAQ,aAAa;AAEnD;;;;;;;;;;AAWA,SAASC,4BAA4BA,CAAA;EACnC,IAAIC,QAAQ,GAAG,KAAK,CAAC,CAAC;EACtB,OAAQC,2BAAmC,IAAI;IAC7C,MAAMC,QAAQ,GAAGF,QAAQ,GAAGF,qBAAqB,GAAGD,oBAAoB,EAAE,CAACM,KAAK,GAAGL,qBAAqB;IACxGE,QAAQ,GAAGC,2BAA2B,GAAGC,QAAQ;IACjD,OAAOF,QAAQ;EACjB,CAAC;AACH;AAEA,MAAMI,mBAAmB,GAAGL,4BAA4B,EAAE;AAE1D,OAAM,SAAUM,gCAAgCA,CAAC;EAC/CC,QAAQ;EACRL;AAA2B,CAI5B;EACC,IAAIK,QAAQ,EAAE;IACZ,OAAO,IAAI;;EAGb,OAAOF,mBAAmB,CAACH,2BAA2B,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}