{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { addMonths, addYears, isSameMonth, isSameYear, startOfMonth, startOfYear } from 'date-fns';\nimport { parseDate } from '../../internal/utils/date-time';\nexport function findDateToFocus(selected, baseDate, isDateEnabled) {\n  if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n    return selected;\n  }\n  const today = new Date();\n  if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n    return today;\n  }\n  if (isDateEnabled(baseDate)) {\n    return baseDate;\n  }\n  return null;\n}\nexport function findMonthToFocus(selected, baseDate, isMonthEnabled) {\n  if (selected && isMonthEnabled(selected) && isSameYear(selected, baseDate)) {\n    return selected;\n  }\n  const today = new Date();\n  if (isMonthEnabled(today) && isSameYear(today, baseDate)) {\n    return today;\n  }\n  if (isMonthEnabled(baseDate)) {\n    return baseDate;\n  }\n  return null;\n}\nexport function findMonthToDisplay(value, isSingleGrid) {\n  if (value.start.date) {\n    const startDate = parseDate(value.start.date);\n    if (isSingleGrid) {\n      return startOfMonth(startDate);\n    }\n    return startOfMonth(addMonths(startDate, 1));\n  }\n  if (value.end.date) {\n    return startOfMonth(parseDate(value.end.date));\n  }\n  return startOfMonth(Date.now());\n}\nexport function findYearToDisplay(value, isSingleGrid) {\n  if (value.start.date) {\n    const startDate = parseDate(value.start.date);\n    if (isSingleGrid) {\n      return startOfYear(startDate);\n    }\n    return startOfYear(addYears(startDate, 1));\n  }\n  if (value.end.date) {\n    return startOfYear(parseDate(value.end.date));\n  }\n  return startOfYear(Date.now());\n}","map":{"version":3,"names":["addMonths","addYears","isSameMonth","isSameYear","startOfMonth","startOfYear","parseDate","findDateToFocus","selected","baseDate","isDateEnabled","today","Date","findMonthToFocus","isMonthEnabled","findMonthToDisplay","value","isSingleGrid","start","date","startDate","end","now","findYearToDisplay"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/date-range-picker/calendar/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { addMonths, addYears, isSameMonth, isSameYear, startOfMonth, startOfYear } from 'date-fns';\n\nimport { parseDate } from '../../internal/utils/date-time';\nimport { DateRangePickerProps } from '../interfaces';\n\nexport function findDateToFocus(\n  selected: Date | null,\n  baseDate: Date,\n  isDateEnabled: DateRangePickerProps.IsDateEnabledFunction\n) {\n  if (selected && isDateEnabled(selected) && isSameMonth(selected, baseDate)) {\n    return selected;\n  }\n  const today = new Date();\n  if (isDateEnabled(today) && isSameMonth(today, baseDate)) {\n    return today;\n  }\n  if (isDateEnabled(baseDate)) {\n    return baseDate;\n  }\n  return null;\n}\n\nexport function findMonthToFocus(\n  selected: Date | null,\n  baseDate: Date,\n  isMonthEnabled: DateRangePickerProps.IsDateEnabledFunction\n) {\n  if (selected && isMonthEnabled(selected) && isSameYear(selected, baseDate)) {\n    return selected;\n  }\n\n  const today = new Date();\n  if (isMonthEnabled(today) && isSameYear(today, baseDate)) {\n    return today;\n  }\n  if (isMonthEnabled(baseDate)) {\n    return baseDate;\n  }\n  return null;\n}\n\nexport function findMonthToDisplay(value: DateRangePickerProps.PendingAbsoluteValue, isSingleGrid: boolean) {\n  if (value.start.date) {\n    const startDate = parseDate(value.start.date);\n    if (isSingleGrid) {\n      return startOfMonth(startDate);\n    }\n    return startOfMonth(addMonths(startDate, 1));\n  }\n  if (value.end.date) {\n    return startOfMonth(parseDate(value.end.date));\n  }\n  return startOfMonth(Date.now());\n}\n\nexport function findYearToDisplay(value: DateRangePickerProps.PendingAbsoluteValue, isSingleGrid: boolean) {\n  if (value.start.date) {\n    const startDate = parseDate(value.start.date);\n    if (isSingleGrid) {\n      return startOfYear(startDate);\n    }\n    return startOfYear(addYears(startDate, 1));\n  }\n  if (value.end.date) {\n    return startOfYear(parseDate(value.end.date));\n  }\n  return startOfYear(Date.now());\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,YAAY,EAAEC,WAAW,QAAQ,UAAU;AAElG,SAASC,SAAS,QAAQ,gCAAgC;AAG1D,OAAM,SAAUC,eAAeA,CAC7BC,QAAqB,EACrBC,QAAc,EACdC,aAAyD;EAEzD,IAAIF,QAAQ,IAAIE,aAAa,CAACF,QAAQ,CAAC,IAAIN,WAAW,CAACM,QAAQ,EAAEC,QAAQ,CAAC,EAAE;IAC1E,OAAOD,QAAQ;;EAEjB,MAAMG,KAAK,GAAG,IAAIC,IAAI,EAAE;EACxB,IAAIF,aAAa,CAACC,KAAK,CAAC,IAAIT,WAAW,CAACS,KAAK,EAAEF,QAAQ,CAAC,EAAE;IACxD,OAAOE,KAAK;;EAEd,IAAID,aAAa,CAACD,QAAQ,CAAC,EAAE;IAC3B,OAAOA,QAAQ;;EAEjB,OAAO,IAAI;AACb;AAEA,OAAM,SAAUI,gBAAgBA,CAC9BL,QAAqB,EACrBC,QAAc,EACdK,cAA0D;EAE1D,IAAIN,QAAQ,IAAIM,cAAc,CAACN,QAAQ,CAAC,IAAIL,UAAU,CAACK,QAAQ,EAAEC,QAAQ,CAAC,EAAE;IAC1E,OAAOD,QAAQ;;EAGjB,MAAMG,KAAK,GAAG,IAAIC,IAAI,EAAE;EACxB,IAAIE,cAAc,CAACH,KAAK,CAAC,IAAIR,UAAU,CAACQ,KAAK,EAAEF,QAAQ,CAAC,EAAE;IACxD,OAAOE,KAAK;;EAEd,IAAIG,cAAc,CAACL,QAAQ,CAAC,EAAE;IAC5B,OAAOA,QAAQ;;EAEjB,OAAO,IAAI;AACb;AAEA,OAAM,SAAUM,kBAAkBA,CAACC,KAAgD,EAAEC,YAAqB;EACxG,IAAID,KAAK,CAACE,KAAK,CAACC,IAAI,EAAE;IACpB,MAAMC,SAAS,GAAGd,SAAS,CAACU,KAAK,CAACE,KAAK,CAACC,IAAI,CAAC;IAC7C,IAAIF,YAAY,EAAE;MAChB,OAAOb,YAAY,CAACgB,SAAS,CAAC;;IAEhC,OAAOhB,YAAY,CAACJ,SAAS,CAACoB,SAAS,EAAE,CAAC,CAAC,CAAC;;EAE9C,IAAIJ,KAAK,CAACK,GAAG,CAACF,IAAI,EAAE;IAClB,OAAOf,YAAY,CAACE,SAAS,CAACU,KAAK,CAACK,GAAG,CAACF,IAAI,CAAC,CAAC;;EAEhD,OAAOf,YAAY,CAACQ,IAAI,CAACU,GAAG,EAAE,CAAC;AACjC;AAEA,OAAM,SAAUC,iBAAiBA,CAACP,KAAgD,EAAEC,YAAqB;EACvG,IAAID,KAAK,CAACE,KAAK,CAACC,IAAI,EAAE;IACpB,MAAMC,SAAS,GAAGd,SAAS,CAACU,KAAK,CAACE,KAAK,CAACC,IAAI,CAAC;IAC7C,IAAIF,YAAY,EAAE;MAChB,OAAOZ,WAAW,CAACe,SAAS,CAAC;;IAE/B,OAAOf,WAAW,CAACJ,QAAQ,CAACmB,SAAS,EAAE,CAAC,CAAC,CAAC;;EAE5C,IAAIJ,KAAK,CAACK,GAAG,CAACF,IAAI,EAAE;IAClB,OAAOd,WAAW,CAACC,SAAS,CAACU,KAAK,CAACK,GAAG,CAACF,IAAI,CAAC,CAAC;;EAE/C,OAAOd,WAAW,CAACO,IAAI,CAACU,GAAG,EAAE,CAAC;AAChC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}