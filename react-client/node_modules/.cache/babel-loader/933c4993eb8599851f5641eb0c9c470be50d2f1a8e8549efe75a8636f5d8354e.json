{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { getIsRtl, useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\nimport AxisLabel from '../internal/components/cartesian-chart/axis-label';\nimport BlockEndLabels, { useBLockEndLabels } from '../internal/components/cartesian-chart/block-end-labels';\nimport { CartesianChartContainer } from '../internal/components/cartesian-chart/chart-container';\nimport EmphasizedBaseline from '../internal/components/cartesian-chart/emphasized-baseline';\nimport HighlightedPoint from '../internal/components/cartesian-chart/highlighted-point';\nimport InlineStartLabels from '../internal/components/cartesian-chart/inline-start-labels';\nimport LabelsMeasure from '../internal/components/cartesian-chart/labels-measure';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { createXTicks, createYTicks, getXTickCount, getYTickCount } from '../internal/components/cartesian-chart/ticks';\nimport VerticalGridLines from '../internal/components/cartesian-chart/vertical-grid-lines';\nimport VerticalMarker from '../internal/components/cartesian-chart/vertical-marker';\nimport ChartPlot from '../internal/components/chart-plot';\nimport { useHeightMeasure } from '../internal/hooks/container-queries/use-height-measure';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport BarGroups from './bar-groups';\nimport MixedChartPopover from './chart-popover';\nimport DataSeries from './data-series';\nimport { computeDomainX, computeDomainY } from './domain';\nimport formatHighlighted from './format-highlighted';\nimport { useMouseHover } from './hooks/use-mouse-hover';\nimport { useNavigation } from './hooks/use-navigation';\nimport { usePopover } from './hooks/use-popover';\nimport makeScaledBarGroups from './make-scaled-bar-groups';\nimport makeScaledSeries from './make-scaled-series';\nimport { isXThreshold } from './utils';\nconst INLINE_START_LABELS_MARGIN = 16;\nconst BLOCK_END_LABELS_OFFSET = 12;\nconst fallbackContainerWidth = 500;\nexport default function ChartContainer(_a) {\n  var _b, _c;\n  var {\n      fitHeight,\n      hasFilters,\n      height: explicitPlotHeight,\n      series,\n      visibleSeries,\n      highlightedSeries,\n      onHighlightChange,\n      highlightedPoint,\n      setHighlightedPoint,\n      highlightedGroupIndex,\n      setHighlightedGroupIndex,\n      detailPopoverFooter,\n      detailPopoverSize = 'medium',\n      stackedBars = false,\n      horizontalBars = false,\n      xScaleType,\n      yScaleType,\n      xTickFormatter,\n      yTickFormatter,\n      emphasizeBaselineAxis,\n      xTitle,\n      yTitle,\n      ariaLabel,\n      ariaLabelledby,\n      ariaDescription,\n      i18nStrings = {},\n      detailPopoverSeriesContent\n    } = _a,\n    props = __rest(_a, [\"fitHeight\", \"hasFilters\", \"height\", \"series\", \"visibleSeries\", \"highlightedSeries\", \"onHighlightChange\", \"highlightedPoint\", \"setHighlightedPoint\", \"highlightedGroupIndex\", \"setHighlightedGroupIndex\", \"detailPopoverFooter\", \"detailPopoverSize\", \"stackedBars\", \"horizontalBars\", \"xScaleType\", \"yScaleType\", \"xTickFormatter\", \"yTickFormatter\", \"emphasizeBaselineAxis\", \"xTitle\", \"yTitle\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescription\", \"i18nStrings\", \"detailPopoverSeriesContent\"]);\n  const plotRef = useRef(null);\n  const verticalMarkerRef = useRef(null);\n  const [inlineStartLabelsWidth, setInlineStartLabelsWidth] = useState(0);\n  const [verticalMarkerX, setVerticalMarkerX] = useState(null);\n  const [detailsPopoverText, setDetailsPopoverText] = useState('');\n  const [containerWidth, containerMeasureRef] = useContainerWidth(fallbackContainerWidth);\n  const maxInlineStartLabelsWidth = Math.round(containerWidth / 2);\n  const plotWidth = containerWidth ?\n  // Calculate the minimum between inlineStartLabelsWidth and maxInlineStartLabelsWidth for extra safety because inlineStarteLabelsWidth could be out of date\n  Math.max(0, containerWidth - Math.min(inlineStartLabelsWidth, maxInlineStartLabelsWidth) - INLINE_START_LABELS_MARGIN) : fallbackContainerWidth;\n  const containerRefObject = useRef(null);\n  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);\n  const popoverRef = useRef(null);\n  const isRtl = getIsRtl(containerRefObject.current);\n  const xDomain = props.xDomain || computeDomainX(series, xScaleType);\n  const yDomain = props.yDomain || computeDomainY(series, yScaleType, stackedBars);\n  const linesOnly = series.every(({\n    series\n  }) => series.type === 'line' || series.type === 'threshold');\n  function getXAxisProps(size, range) {\n    const tickCount = getXTickCount(size);\n    const scale = new ChartScale(xScaleType, xDomain, range, linesOnly);\n    const ticks = createXTicks(scale, tickCount);\n    return {\n      axis: 'x',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: xTickFormatter,\n      title: xTitle,\n      ariaRoleDescription: i18nStrings.xAxisAriaRoleDescription\n    };\n  }\n  function getYAxisProps(size, range) {\n    const tickCount = getYTickCount(size);\n    const scale = new NumericChartScale(yScaleType, yDomain, range, props.yDomain ? null : tickCount);\n    const ticks = createYTicks(scale, tickCount);\n    return {\n      axis: 'y',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: yTickFormatter,\n      title: yTitle,\n      ariaRoleDescription: i18nStrings.yAxisAriaRoleDescription\n    };\n  }\n  const bottomAxisProps = !horizontalBars ? getXAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0]) : getYAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0]);\n  const blockEndLabelsProps = useBLockEndLabels(Object.assign({}, bottomAxisProps));\n  const plotMeasureRef = useRef(null);\n  const measuredHeight = useHeightMeasure(() => plotMeasureRef.current, !fitHeight);\n  const plotHeight = fitHeight ? measuredHeight !== null && measuredHeight !== void 0 ? measuredHeight : 0 : explicitPlotHeight;\n  const leftAxisProps = !horizontalBars ? getYAxisProps(plotHeight, [plotHeight, 0]) : getXAxisProps(plotHeight, [0, plotHeight]);\n  const xAxisProps = bottomAxisProps.axis === 'x' ? bottomAxisProps : leftAxisProps.axis === 'x' ? leftAxisProps : null;\n  const yAxisProps = bottomAxisProps.axis === 'y' ? bottomAxisProps : leftAxisProps.axis === 'y' ? leftAxisProps : null;\n  if (!xAxisProps || !yAxisProps) {\n    throw new Error('Invariant violation: invalid axis props.');\n  }\n  /**\n   * Interactions\n   */\n  const highlightedPointRef = useRef(null);\n  const highlightedGroupRef = useRef(null);\n  // Some chart components are rendered against \"x\" or \"y\" axes,\n  // When \"horizontalBars\" is enabled, the axes are inverted.\n  const x = !horizontalBars ? 'x' : 'y';\n  const y = !horizontalBars ? 'y' : 'x';\n  const scaledSeries = makeScaledSeries(visibleSeries, xAxisProps.scale, yAxisProps.scale);\n  const barGroups = makeScaledBarGroups(visibleSeries, xAxisProps.scale, plotWidth, plotHeight, y);\n  const {\n    isPopoverOpen,\n    isPopoverPinned,\n    showPopover,\n    pinPopover,\n    dismissPopover\n  } = usePopover();\n  // Allows to add a delay between popover is dismissed and handlers are enabled to prevent immediate popover reopening.\n  const [isHandlersDisabled, setHandlersDisabled] = useState(false);\n  useEffect(() => {\n    if (isPopoverPinned) {\n      setHandlersDisabled(true);\n    } else {\n      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isPopoverPinned]);\n  const highlightSeries = useCallback(series => {\n    if (series !== highlightedSeries) {\n      onHighlightChange(series);\n    }\n  }, [highlightedSeries, onHighlightChange]);\n  const highlightPoint = useCallback(point => {\n    var _a, _b;\n    setHighlightedGroupIndex(null);\n    setHighlightedPoint(point);\n    if (point) {\n      highlightSeries(point.series);\n      setVerticalMarkerX({\n        scaledX: point.x,\n        label: (_b = (_a = point.datum) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : null\n      });\n    }\n  }, [setHighlightedGroupIndex, setHighlightedPoint, highlightSeries]);\n  const clearAllHighlights = useCallback(() => {\n    setHighlightedPoint(null);\n    highlightSeries(null);\n    setHighlightedGroupIndex(null);\n  }, [highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);\n  // Highlight all points at a given X in a line chart\n  const highlightX = useCallback(marker => {\n    if (marker) {\n      clearAllHighlights();\n    }\n    setVerticalMarkerX(marker);\n  }, [clearAllHighlights]);\n  // Highlight all points and bars at a given X index in a mixed line and bar chart\n  const highlightGroup = useCallback(groupIndex => {\n    highlightSeries(null);\n    setHighlightedPoint(null);\n    setHighlightedGroupIndex(groupIndex);\n  }, [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]);\n  const clearHighlightedSeries = useCallback(() => {\n    clearAllHighlights();\n    dismissPopover();\n  }, [dismissPopover, clearAllHighlights]);\n  const _d = useNavigation({\n      series,\n      visibleSeries,\n      scaledSeries,\n      barGroups,\n      xScale: xAxisProps.scale,\n      yScale: yAxisProps.scale,\n      highlightedPoint,\n      highlightedGroupIndex,\n      highlightedSeries,\n      isHandlersDisabled,\n      pinPopover,\n      highlightSeries,\n      highlightGroup,\n      highlightPoint,\n      highlightX,\n      clearHighlightedSeries,\n      verticalMarkerX,\n      isRtl: !!isRtl,\n      horizontalBars\n    }),\n    {\n      isGroupNavigation\n    } = _d,\n    handlers = __rest(_d, [\"isGroupNavigation\"]);\n  const {\n    onSVGMouseMove,\n    onSVGMouseOut,\n    onPopoverLeave\n  } = useMouseHover({\n    scaledSeries,\n    barGroups,\n    plotRef,\n    popoverRef,\n    highlightPoint,\n    highlightGroup,\n    clearHighlightedSeries,\n    isGroupNavigation,\n    isHandlersDisabled,\n    highlightX\n  });\n  // There are multiple ways to indicate what X is selected.\n  // TODO: make a uniform verticalMarkerX state to fit all use-cases.\n  const highlightedX = useMemo(() => {\n    var _a, _b, _c;\n    if (highlightedGroupIndex !== null) {\n      return (_a = barGroups[highlightedGroupIndex]) === null || _a === void 0 ? void 0 : _a.x;\n    }\n    if (verticalMarkerX !== null) {\n      return verticalMarkerX.label;\n    }\n    return (_c = (_b = highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.datum) === null || _b === void 0 ? void 0 : _b.x) !== null && _c !== void 0 ? _c : null;\n  }, [highlightedPoint, verticalMarkerX, highlightedGroupIndex, barGroups]);\n  useEffect(() => {\n    const onKeyDown = event => {\n      if (event.key === 'Escape') {\n        dismissPopover();\n      }\n    };\n    document.addEventListener('keydown', onKeyDown);\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [dismissPopover]);\n  useLayoutEffect(() => {\n    if (highlightedX !== null || highlightedPoint !== null) {\n      showPopover();\n    }\n  }, [highlightedX, highlightedPoint, showPopover]);\n  const onPopoverDismiss = outsideClick => {\n    dismissPopover();\n    if (!outsideClick) {\n      // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n      setTimeout(() => {\n        var _a, _b;\n        const isSomeElementHighlighted = !!(highlightedPoint || highlightedGroupIndex !== null || verticalMarkerX);\n        if (isSomeElementHighlighted) {\n          (_a = plotRef.current) === null || _a === void 0 ? void 0 : _a.focusApplication();\n        } else {\n          (_b = plotRef.current) === null || _b === void 0 ? void 0 : _b.focusPlot();\n        }\n      }, 0);\n    } else {\n      clearAllHighlights();\n      setVerticalMarkerX(null);\n    }\n  };\n  const onSVGClick = e => {\n    if (isPopoverOpen) {\n      if (isPopoverPinned) {\n        dismissPopover();\n      } else {\n        pinPopover();\n        e.preventDefault();\n      }\n    } else {\n      showPopover();\n    }\n  };\n  const onApplicationFocus = (event, trigger) => {\n    if (trigger === 'keyboard') {\n      handlers.onFocus();\n    } else {\n      // noop: clicks are handled separately\n    }\n  };\n  const onApplicationBlur = event => {\n    const blurTarget = event.relatedTarget || event.target;\n    if (blurTarget === null || !(blurTarget instanceof Element) || !nodeBelongs(containerRefObject.current, blurTarget)) {\n      clearHighlightedSeries();\n      setVerticalMarkerX(null);\n      if (isPopoverOpen && !isPopoverPinned) {\n        dismissPopover();\n      }\n    }\n  };\n  const onSVGKeyDown = handlers.onKeyDown;\n  const xOffset = xAxisProps.scale.isCategorical() ? Math.max(0, xAxisProps.scale.d3Scale.bandwidth() - 1) / 2 : 0;\n  let verticalLineX = null;\n  if (verticalMarkerX !== null) {\n    verticalLineX = verticalMarkerX.scaledX;\n  } else if (isGroupNavigation && highlightedGroupIndex !== null) {\n    const x = (_c = xAxisProps.scale.d3Scale((_b = barGroups[highlightedGroupIndex]) === null || _b === void 0 ? void 0 : _b.x)) !== null && _c !== void 0 ? _c : null;\n    if (x !== null) {\n      verticalLineX = xOffset + x;\n    }\n  }\n  const point = useMemo(() => highlightedPoint ? {\n    key: `${highlightedPoint.x}-${highlightedPoint.y}`,\n    x: highlightedPoint.x,\n    y: highlightedPoint.y,\n    color: highlightedPoint.color\n  } : null, [highlightedPoint]);\n  const verticalMarkers = useMemo(() => verticalLineX !== null ? scaledSeries.filter(({\n    x,\n    y\n  }) => (x === verticalLineX || isNaN(x)) && !isNaN(y)).map(({\n    x,\n    y,\n    color\n  }, index) => ({\n    key: `${index}-${x}-${y}`,\n    x: !horizontalBars ? verticalLineX || 0 : y,\n    y: !horizontalBars ? y : verticalLineX || 0,\n    color: color\n  })) : [], [scaledSeries, verticalLineX, horizontalBars]);\n  const highlightedElementRef = isGroupNavigation ? highlightedGroupRef : highlightedPoint ? highlightedPointRef : verticalMarkerRef;\n  const highlightDetails = useMemo(() => {\n    if (highlightedX === null) {\n      return null;\n    }\n    // When series point is highlighted show the corresponding series and matching x-thresholds.\n    if (highlightedPoint) {\n      const seriesToShow = visibleSeries.filter(series => series.series === (highlightedPoint === null || highlightedPoint === void 0 ? void 0 : highlightedPoint.series) || isXThreshold(series.series));\n      return formatHighlighted({\n        position: highlightedX,\n        series: seriesToShow,\n        xTickFormatter,\n        detailPopoverSeriesContent\n      });\n    }\n    // Otherwise - show all visible series details.\n    return formatHighlighted({\n      position: highlightedX,\n      series: visibleSeries,\n      xTickFormatter,\n      detailPopoverSeriesContent\n    });\n  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter, detailPopoverSeriesContent]);\n  const detailPopoverFooterContent = useMemo(() => detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX) : null, [detailPopoverFooter, highlightedX]);\n  const activeAriaLabel = highlightDetails && detailsPopoverText ? `${highlightDetails.position}, ${detailsPopoverText}` : '';\n  // Live region is used when nothing is focused e.g. when hovering.\n  const activeLiveRegion = activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : '';\n  const isLineXKeyboardFocused = !highlightedPoint && verticalMarkerX;\n  const isRefresh = useVisualRefresh();\n  return React.createElement(CartesianChartContainer, {\n    ref: containerRef,\n    minHeight: explicitPlotHeight + blockEndLabelsProps.height,\n    fitHeight: !!fitHeight,\n    hasFilters: hasFilters,\n    leftAxisLabel: React.createElement(AxisLabel, {\n      axis: y,\n      position: \"left\",\n      title: leftAxisProps.title\n    }),\n    leftAxisLabelMeasure: React.createElement(LabelsMeasure, {\n      ticks: leftAxisProps.ticks,\n      scale: leftAxisProps.scale,\n      tickFormatter: leftAxisProps.tickFormatter,\n      autoWidth: setInlineStartLabelsWidth,\n      maxLabelsWidth: maxInlineStartLabelsWidth\n    }),\n    bottomAxisLabel: React.createElement(AxisLabel, {\n      axis: x,\n      position: \"bottom\",\n      title: bottomAxisProps.title\n    }),\n    chartPlot: React.createElement(ChartPlot, {\n      ref: plotRef,\n      width: \"100%\",\n      height: fitHeight ? `calc(100% - ${blockEndLabelsProps.height}px)` : plotHeight,\n      offsetBottom: blockEndLabelsProps.height,\n      isClickable: isPopoverOpen && !isPopoverPinned,\n      ariaLabel: ariaLabel,\n      ariaLabelledby: ariaLabelledby,\n      ariaDescription: ariaDescription,\n      ariaRoleDescription: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.chartAriaRoleDescription,\n      ariaLiveRegion: activeLiveRegion,\n      activeElementRef: highlightedElementRef,\n      activeElementKey: activeAriaLabel,\n      activeElementFocusOffset: isGroupNavigation ? 0 : isLineXKeyboardFocused ? {\n        x: 8,\n        y: 0\n      } : 3,\n      onMouseMove: onSVGMouseMove,\n      onMouseOut: onSVGMouseOut,\n      onClick: onSVGClick,\n      onApplicationFocus: onApplicationFocus,\n      onApplicationBlur: onApplicationBlur,\n      onKeyDown: onSVGKeyDown\n    }, React.createElement(\"line\", {\n      ref: plotMeasureRef,\n      x1: \"0\",\n      x2: \"0\",\n      y1: \"0\",\n      y2: \"100%\",\n      stroke: \"transparent\",\n      strokeWidth: 1,\n      style: {\n        pointerEvents: 'none'\n      }\n    }), React.createElement(InlineStartLabels, {\n      axis: y,\n      ticks: leftAxisProps.ticks,\n      scale: leftAxisProps.scale,\n      tickFormatter: leftAxisProps.tickFormatter,\n      title: leftAxisProps.title,\n      ariaRoleDescription: leftAxisProps.ariaRoleDescription,\n      maxLabelsWidth: maxInlineStartLabelsWidth,\n      plotWidth: plotWidth,\n      plotHeight: plotHeight\n    }), horizontalBars && React.createElement(VerticalGridLines, {\n      scale: yAxisProps.scale,\n      ticks: yAxisProps.ticks,\n      height: plotHeight\n    }), emphasizeBaselineAxis && linesOnly && React.createElement(EmphasizedBaseline, {\n      axis: x,\n      scale: yAxisProps.scale,\n      width: plotWidth,\n      height: plotHeight\n    }), React.createElement(DataSeries, {\n      axis: x,\n      plotWidth: plotWidth,\n      plotHeight: plotHeight,\n      highlightedSeries: highlightedSeries !== null && highlightedSeries !== void 0 ? highlightedSeries : null,\n      highlightedGroupIndex: highlightedGroupIndex,\n      stackedBars: stackedBars,\n      isGroupNavigation: isGroupNavigation,\n      visibleSeries: visibleSeries,\n      xScale: xAxisProps.scale,\n      yScale: yAxisProps.scale,\n      isRtl: !!isRtl\n    }), emphasizeBaselineAxis && !linesOnly && React.createElement(EmphasizedBaseline, {\n      axis: x,\n      scale: yAxisProps.scale,\n      width: plotWidth,\n      height: plotHeight\n    }), React.createElement(VerticalMarker, {\n      key: verticalLineX || '',\n      height: plotHeight,\n      showPoints: highlightedPoint === null,\n      showLine: !isGroupNavigation,\n      points: verticalMarkers,\n      ref: verticalMarkerRef\n    }), highlightedPoint && React.createElement(HighlightedPoint, {\n      ref: highlightedPointRef,\n      point: point,\n      role: \"button\",\n      ariaLabel: activeAriaLabel,\n      ariaHasPopup: true,\n      ariaExpanded: isPopoverPinned\n    }), isGroupNavigation && xAxisProps.scale.isCategorical() && React.createElement(BarGroups, {\n      ariaLabel: activeAriaLabel,\n      isRefresh: isRefresh,\n      isPopoverPinned: isPopoverPinned,\n      barGroups: barGroups,\n      highlightedGroupIndex: highlightedGroupIndex,\n      highlightedGroupRef: highlightedGroupRef\n    }), React.createElement(BlockEndLabels, Object.assign({}, blockEndLabelsProps, {\n      axis: x,\n      scale: bottomAxisProps.scale,\n      title: bottomAxisProps.title,\n      ariaRoleDescription: bottomAxisProps.ariaRoleDescription,\n      height: plotHeight,\n      width: plotWidth,\n      offsetLeft: inlineStartLabelsWidth + BLOCK_END_LABELS_OFFSET,\n      offsetRight: BLOCK_END_LABELS_OFFSET,\n      isRTL: isRtl\n    }))),\n    popover: React.createElement(MixedChartPopover, {\n      ref: popoverRef,\n      containerRef: containerRefObject,\n      trackRef: highlightedElementRef,\n      isOpen: isPopoverOpen,\n      isPinned: isPopoverPinned,\n      highlightDetails: highlightDetails,\n      onDismiss: onPopoverDismiss,\n      size: detailPopoverSize,\n      footer: detailPopoverFooterContent,\n      dismissAriaLabel: i18nStrings.detailPopoverDismissAriaLabel,\n      onMouseLeave: onPopoverLeave,\n      onBlur: onApplicationBlur,\n      setPopoverText: setDetailsPopoverText\n    })\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useLayoutEffect","useMemo","useRef","useState","getIsRtl","useMergeRefs","AxisLabel","BlockEndLabels","useBLockEndLabels","CartesianChartContainer","EmphasizedBaseline","HighlightedPoint","InlineStartLabels","LabelsMeasure","ChartScale","NumericChartScale","createXTicks","createYTicks","getXTickCount","getYTickCount","VerticalGridLines","VerticalMarker","ChartPlot","useHeightMeasure","useVisualRefresh","nodeBelongs","useContainerWidth","BarGroups","MixedChartPopover","DataSeries","computeDomainX","computeDomainY","formatHighlighted","useMouseHover","useNavigation","usePopover","makeScaledBarGroups","makeScaledSeries","isXThreshold","INLINE_START_LABELS_MARGIN","BLOCK_END_LABELS_OFFSET","fallbackContainerWidth","ChartContainer","_a","fitHeight","hasFilters","height","explicitPlotHeight","series","visibleSeries","highlightedSeries","onHighlightChange","highlightedPoint","setHighlightedPoint","highlightedGroupIndex","setHighlightedGroupIndex","detailPopoverFooter","detailPopoverSize","stackedBars","horizontalBars","xScaleType","yScaleType","xTickFormatter","yTickFormatter","emphasizeBaselineAxis","xTitle","yTitle","ariaLabel","ariaLabelledby","ariaDescription","i18nStrings","detailPopoverSeriesContent","props","__rest","plotRef","verticalMarkerRef","inlineStartLabelsWidth","setInlineStartLabelsWidth","verticalMarkerX","setVerticalMarkerX","detailsPopoverText","setDetailsPopoverText","containerWidth","containerMeasureRef","maxInlineStartLabelsWidth","Math","round","plotWidth","max","min","containerRefObject","containerRef","popoverRef","isRtl","current","xDomain","yDomain","linesOnly","every","type","getXAxisProps","size","range","tickCount","scale","ticks","axis","tickFormatter","title","ariaRoleDescription","xAxisAriaRoleDescription","getYAxisProps","yAxisAriaRoleDescription","bottomAxisProps","blockEndLabelsProps","Object","assign","plotMeasureRef","measuredHeight","plotHeight","leftAxisProps","xAxisProps","yAxisProps","Error","highlightedPointRef","highlightedGroupRef","x","y","scaledSeries","barGroups","isPopoverOpen","isPopoverPinned","showPopover","pinPopover","dismissPopover","isHandlersDisabled","setHandlersDisabled","timeoutId","setTimeout","clearTimeout","highlightSeries","highlightPoint","point","scaledX","label","_b","datum","clearAllHighlights","highlightX","marker","highlightGroup","groupIndex","clearHighlightedSeries","_d","xScale","yScale","isGroupNavigation","handlers","onSVGMouseMove","onSVGMouseOut","onPopoverLeave","highlightedX","_c","onKeyDown","event","key","document","addEventListener","removeEventListener","onPopoverDismiss","outsideClick","isSomeElementHighlighted","focusApplication","focusPlot","onSVGClick","e","preventDefault","onApplicationFocus","trigger","onFocus","onApplicationBlur","blurTarget","relatedTarget","target","Element","onSVGKeyDown","xOffset","isCategorical","d3Scale","bandwidth","verticalLineX","color","verticalMarkers","filter","isNaN","map","index","highlightedElementRef","highlightDetails","seriesToShow","position","detailPopoverFooterContent","activeAriaLabel","activeLiveRegion","isLineXKeyboardFocused","isRefresh","createElement","ref","minHeight","leftAxisLabel","leftAxisLabelMeasure","autoWidth","maxLabelsWidth","bottomAxisLabel","chartPlot","width","offsetBottom","isClickable","chartAriaRoleDescription","ariaLiveRegion","activeElementRef","activeElementKey","activeElementFocusOffset","onMouseMove","onMouseOut","onClick","x1","x2","y1","y2","stroke","strokeWidth","style","pointerEvents","showPoints","showLine","points","role","ariaHasPopup","ariaExpanded","offsetLeft","offsetRight","isRTL","popover","trackRef","isOpen","isPinned","onDismiss","footer","dismissAriaLabel","detailPopoverDismissAriaLabel","onMouseLeave","onBlur","setPopoverText"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/mixed-line-bar-chart/chart-container.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { getIsRtl, useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\n\nimport AxisLabel from '../internal/components/cartesian-chart/axis-label';\nimport BlockEndLabels, { useBLockEndLabels } from '../internal/components/cartesian-chart/block-end-labels';\nimport { CartesianChartContainer } from '../internal/components/cartesian-chart/chart-container';\nimport EmphasizedBaseline from '../internal/components/cartesian-chart/emphasized-baseline';\nimport HighlightedPoint from '../internal/components/cartesian-chart/highlighted-point';\nimport InlineStartLabels from '../internal/components/cartesian-chart/inline-start-labels';\nimport { CartesianChartProps } from '../internal/components/cartesian-chart/interfaces';\nimport LabelsMeasure from '../internal/components/cartesian-chart/labels-measure';\nimport { ChartScale, NumericChartScale } from '../internal/components/cartesian-chart/scales';\nimport { createXTicks, createYTicks, getXTickCount, getYTickCount } from '../internal/components/cartesian-chart/ticks';\nimport VerticalGridLines from '../internal/components/cartesian-chart/vertical-grid-lines';\nimport VerticalMarker from '../internal/components/cartesian-chart/vertical-marker';\nimport ChartPlot, { ChartPlotRef } from '../internal/components/chart-plot';\nimport { useHeightMeasure } from '../internal/hooks/container-queries/use-height-measure';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { nodeBelongs } from '../internal/utils/node-belongs';\nimport useContainerWidth from '../internal/utils/use-container-width';\nimport BarGroups from './bar-groups';\nimport MixedChartPopover from './chart-popover';\nimport DataSeries from './data-series';\nimport { computeDomainX, computeDomainY } from './domain';\nimport formatHighlighted from './format-highlighted';\nimport { useMouseHover } from './hooks/use-mouse-hover';\nimport { useNavigation } from './hooks/use-navigation';\nimport { usePopover } from './hooks/use-popover';\nimport { ChartDataTypes, InternalChartSeries, MixedLineBarChartProps, ScaleType, VerticalMarkerX } from './interfaces';\nimport makeScaledBarGroups, { ScaledBarGroup } from './make-scaled-bar-groups';\nimport makeScaledSeries, { ScaledPoint } from './make-scaled-series';\nimport { isXThreshold } from './utils';\n\nconst INLINE_START_LABELS_MARGIN = 16;\nconst BLOCK_END_LABELS_OFFSET = 12;\n\ntype TickFormatter = undefined | ((value: ChartDataTypes) => string);\n\nexport interface ChartContainerProps<T extends ChartDataTypes> {\n  series: ReadonlyArray<InternalChartSeries<T>>;\n  visibleSeries: ReadonlyArray<InternalChartSeries<T>>;\n\n  fitHeight?: boolean;\n  hasFilters: boolean;\n  height: number;\n  detailPopoverSize: MixedLineBarChartProps<T>['detailPopoverSize'];\n  detailPopoverFooter: MixedLineBarChartProps<T>['detailPopoverFooter'];\n\n  xScaleType: ScaleType;\n  yScaleType: 'linear' | 'log';\n\n  xDomain: MixedLineBarChartProps<T>['xDomain'];\n  yDomain: MixedLineBarChartProps<T>['yDomain'];\n\n  xTickFormatter?: CartesianChartProps.TickFormatter<T>;\n  yTickFormatter?: CartesianChartProps.TickFormatter<number>;\n\n  xTitle?: string;\n  yTitle?: string;\n\n  stackedBars?: boolean;\n  emphasizeBaselineAxis: boolean;\n  horizontalBars?: boolean;\n\n  highlightedSeries?: MixedLineBarChartProps<T>['highlightedSeries'];\n  onHighlightChange: (series: InternalChartSeries<T>['series'] | null) => void;\n  highlightedPoint: ScaledPoint<T> | null;\n  setHighlightedPoint: (point: ScaledPoint<T> | null) => void;\n  highlightedGroupIndex: number | null;\n  setHighlightedGroupIndex: (groupIndex: number | null) => void;\n\n  ariaLabel: MixedLineBarChartProps<T>['ariaLabel'];\n  ariaLabelledby: MixedLineBarChartProps<T>['ariaLabelledby'];\n  ariaDescription: MixedLineBarChartProps<T>['ariaDescription'];\n  i18nStrings: MixedLineBarChartProps<T>['i18nStrings'];\n\n  detailPopoverSeriesContent?: MixedLineBarChartProps.DetailPopoverSeriesContent<T>;\n}\n\ninterface BaseAxisProps {\n  tickCount: number;\n  tickFormatter: TickFormatter;\n  title?: string;\n  ariaRoleDescription?: string;\n}\n\ninterface XAxisProps extends BaseAxisProps {\n  axis: 'x';\n  scale: ChartScale;\n  ticks: ChartDataTypes[];\n}\n\ninterface YAxisProps extends BaseAxisProps {\n  axis: 'y';\n  scale: NumericChartScale;\n  ticks: number[];\n}\n\nconst fallbackContainerWidth = 500;\n\nexport default function ChartContainer<T extends ChartDataTypes>({\n  fitHeight,\n  hasFilters,\n  height: explicitPlotHeight,\n  series,\n  visibleSeries,\n  highlightedSeries,\n  onHighlightChange,\n  highlightedPoint,\n  setHighlightedPoint,\n  highlightedGroupIndex,\n  setHighlightedGroupIndex,\n  detailPopoverFooter,\n  detailPopoverSize = 'medium',\n  stackedBars = false,\n  horizontalBars = false,\n  xScaleType,\n  yScaleType,\n  xTickFormatter,\n  yTickFormatter,\n  emphasizeBaselineAxis,\n  xTitle,\n  yTitle,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescription,\n  i18nStrings = {},\n  detailPopoverSeriesContent,\n  ...props\n}: ChartContainerProps<T>) {\n  const plotRef = useRef<ChartPlotRef>(null);\n  const verticalMarkerRef = useRef<SVGLineElement>(null);\n\n  const [inlineStartLabelsWidth, setInlineStartLabelsWidth] = useState(0);\n  const [verticalMarkerX, setVerticalMarkerX] = useState<VerticalMarkerX<T> | null>(null);\n  const [detailsPopoverText, setDetailsPopoverText] = useState('');\n  const [containerWidth, containerMeasureRef] = useContainerWidth(fallbackContainerWidth);\n  const maxInlineStartLabelsWidth = Math.round(containerWidth / 2);\n  const plotWidth = containerWidth\n    ? // Calculate the minimum between inlineStartLabelsWidth and maxInlineStartLabelsWidth for extra safety because inlineStarteLabelsWidth could be out of date\n      Math.max(\n        0,\n        containerWidth - Math.min(inlineStartLabelsWidth, maxInlineStartLabelsWidth) - INLINE_START_LABELS_MARGIN\n      )\n    : fallbackContainerWidth;\n  const containerRefObject = useRef(null);\n  const containerRef = useMergeRefs(containerMeasureRef, containerRefObject);\n  const popoverRef = useRef<HTMLElement | null>(null);\n\n  const isRtl = getIsRtl(containerRefObject.current);\n\n  const xDomain = (props.xDomain || computeDomainX(series, xScaleType)) as\n    | readonly number[]\n    | readonly string[]\n    | readonly Date[];\n  const yDomain = (props.yDomain || computeDomainY(series, yScaleType, stackedBars)) as readonly number[];\n\n  const linesOnly = series.every(({ series }) => series.type === 'line' || series.type === 'threshold');\n\n  function getXAxisProps(size: number, range: [from: number, until: number]): XAxisProps {\n    const tickCount = getXTickCount(size);\n    const scale = new ChartScale(xScaleType, xDomain, range, linesOnly);\n    const ticks = createXTicks(scale, tickCount);\n    return {\n      axis: 'x',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: xTickFormatter as TickFormatter,\n      title: xTitle,\n      ariaRoleDescription: i18nStrings.xAxisAriaRoleDescription,\n    };\n  }\n\n  function getYAxisProps(size: number, range: [from: number, until: number]): YAxisProps {\n    const tickCount = getYTickCount(size);\n    const scale = new NumericChartScale(yScaleType, yDomain, range, props.yDomain ? null : tickCount);\n    const ticks = createYTicks(scale, tickCount);\n    return {\n      axis: 'y',\n      tickCount,\n      scale,\n      ticks,\n      tickFormatter: yTickFormatter as TickFormatter,\n      title: yTitle,\n      ariaRoleDescription: i18nStrings.yAxisAriaRoleDescription,\n    };\n  }\n\n  const bottomAxisProps = !horizontalBars\n    ? getXAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0])\n    : getYAxisProps(plotWidth, !isRtl ? [0, plotWidth] : [plotWidth, 0]);\n  const blockEndLabelsProps = useBLockEndLabels({ ...bottomAxisProps });\n\n  const plotMeasureRef = useRef<SVGLineElement>(null);\n  const measuredHeight = useHeightMeasure(() => plotMeasureRef.current, !fitHeight);\n  const plotHeight = fitHeight ? measuredHeight ?? 0 : explicitPlotHeight;\n\n  const leftAxisProps = !horizontalBars\n    ? getYAxisProps(plotHeight, [plotHeight, 0])\n    : getXAxisProps(plotHeight, [0, plotHeight]);\n\n  const xAxisProps = bottomAxisProps.axis === 'x' ? bottomAxisProps : leftAxisProps.axis === 'x' ? leftAxisProps : null;\n  const yAxisProps = bottomAxisProps.axis === 'y' ? bottomAxisProps : leftAxisProps.axis === 'y' ? leftAxisProps : null;\n  if (!xAxisProps || !yAxisProps) {\n    throw new Error('Invariant violation: invalid axis props.');\n  }\n\n  /**\n   * Interactions\n   */\n  const highlightedPointRef = useRef<SVGGElement>(null);\n  const highlightedGroupRef = useRef<SVGRectElement>(null);\n\n  // Some chart components are rendered against \"x\" or \"y\" axes,\n  // When \"horizontalBars\" is enabled, the axes are inverted.\n  const x = !horizontalBars ? 'x' : 'y';\n  const y = !horizontalBars ? 'y' : 'x';\n\n  const scaledSeries = makeScaledSeries(visibleSeries, xAxisProps.scale, yAxisProps.scale);\n  const barGroups: ScaledBarGroup<T>[] = makeScaledBarGroups(visibleSeries, xAxisProps.scale, plotWidth, plotHeight, y);\n\n  const { isPopoverOpen, isPopoverPinned, showPopover, pinPopover, dismissPopover } = usePopover();\n\n  // Allows to add a delay between popover is dismissed and handlers are enabled to prevent immediate popover reopening.\n  const [isHandlersDisabled, setHandlersDisabled] = useState(false);\n  useEffect(() => {\n    if (isPopoverPinned) {\n      setHandlersDisabled(true);\n    } else {\n      const timeoutId = setTimeout(() => setHandlersDisabled(false), 25);\n      return () => clearTimeout(timeoutId);\n    }\n  }, [isPopoverPinned]);\n\n  const highlightSeries = useCallback(\n    (series: MixedLineBarChartProps.ChartSeries<T> | null) => {\n      if (series !== highlightedSeries) {\n        onHighlightChange(series);\n      }\n    },\n    [highlightedSeries, onHighlightChange]\n  );\n\n  const highlightPoint = useCallback(\n    (point: ScaledPoint<T> | null) => {\n      setHighlightedGroupIndex(null);\n      setHighlightedPoint(point);\n      if (point) {\n        highlightSeries(point.series);\n        setVerticalMarkerX({\n          scaledX: point.x,\n          label: point.datum?.x ?? null,\n        });\n      }\n    },\n    [setHighlightedGroupIndex, setHighlightedPoint, highlightSeries]\n  );\n\n  const clearAllHighlights = useCallback(() => {\n    setHighlightedPoint(null);\n    highlightSeries(null);\n    setHighlightedGroupIndex(null);\n  }, [highlightSeries, setHighlightedGroupIndex, setHighlightedPoint]);\n\n  // Highlight all points at a given X in a line chart\n  const highlightX = useCallback(\n    (marker: VerticalMarkerX<T> | null) => {\n      if (marker) {\n        clearAllHighlights();\n      }\n      setVerticalMarkerX(marker);\n    },\n    [clearAllHighlights]\n  );\n\n  // Highlight all points and bars at a given X index in a mixed line and bar chart\n  const highlightGroup = useCallback(\n    (groupIndex: number) => {\n      highlightSeries(null);\n      setHighlightedPoint(null);\n      setHighlightedGroupIndex(groupIndex);\n    },\n    [highlightSeries, setHighlightedPoint, setHighlightedGroupIndex]\n  );\n\n  const clearHighlightedSeries = useCallback(() => {\n    clearAllHighlights();\n    dismissPopover();\n  }, [dismissPopover, clearAllHighlights]);\n\n  const { isGroupNavigation, ...handlers } = useNavigation({\n    series,\n    visibleSeries,\n    scaledSeries,\n    barGroups,\n    xScale: xAxisProps.scale,\n    yScale: yAxisProps.scale,\n    highlightedPoint,\n    highlightedGroupIndex,\n    highlightedSeries,\n    isHandlersDisabled,\n    pinPopover,\n    highlightSeries,\n    highlightGroup,\n    highlightPoint,\n    highlightX,\n    clearHighlightedSeries,\n    verticalMarkerX,\n    isRtl: !!isRtl,\n    horizontalBars,\n  });\n\n  const { onSVGMouseMove, onSVGMouseOut, onPopoverLeave } = useMouseHover<T>({\n    scaledSeries,\n    barGroups,\n    plotRef,\n    popoverRef,\n    highlightPoint,\n    highlightGroup,\n    clearHighlightedSeries,\n    isGroupNavigation,\n    isHandlersDisabled,\n    highlightX,\n  });\n\n  // There are multiple ways to indicate what X is selected.\n  // TODO: make a uniform verticalMarkerX state to fit all use-cases.\n  const highlightedX = useMemo(() => {\n    if (highlightedGroupIndex !== null) {\n      return barGroups[highlightedGroupIndex]?.x;\n    }\n    if (verticalMarkerX !== null) {\n      return verticalMarkerX.label;\n    }\n    return highlightedPoint?.datum?.x ?? null;\n  }, [highlightedPoint, verticalMarkerX, highlightedGroupIndex, barGroups]);\n\n  useEffect(() => {\n    const onKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        dismissPopover();\n      }\n    };\n    document.addEventListener('keydown', onKeyDown);\n    return () => document.removeEventListener('keydown', onKeyDown);\n  }, [dismissPopover]);\n\n  useLayoutEffect(() => {\n    if (highlightedX !== null || highlightedPoint !== null) {\n      showPopover();\n    }\n  }, [highlightedX, highlightedPoint, showPopover]);\n\n  const onPopoverDismiss = (outsideClick?: boolean) => {\n    dismissPopover();\n\n    if (!outsideClick) {\n      // The delay is needed to bypass focus events caused by click or keypress needed to unpin the popover.\n      setTimeout(() => {\n        const isSomeElementHighlighted = !!(highlightedPoint || highlightedGroupIndex !== null || verticalMarkerX);\n        if (isSomeElementHighlighted) {\n          plotRef.current?.focusApplication();\n        } else {\n          plotRef.current?.focusPlot();\n        }\n      }, 0);\n    } else {\n      clearAllHighlights();\n      setVerticalMarkerX(null);\n    }\n  };\n\n  const onSVGClick = (e: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\n    if (isPopoverOpen) {\n      if (isPopoverPinned) {\n        dismissPopover();\n      } else {\n        pinPopover();\n        e.preventDefault();\n      }\n    } else {\n      showPopover();\n    }\n  };\n\n  const onApplicationFocus = (event: React.FocusEvent, trigger: 'mouse' | 'keyboard') => {\n    if (trigger === 'keyboard') {\n      handlers.onFocus();\n    } else {\n      // noop: clicks are handled separately\n    }\n  };\n\n  const onApplicationBlur = (event: React.FocusEvent<Element>) => {\n    const blurTarget = event.relatedTarget || event.target;\n    if (\n      blurTarget === null ||\n      !(blurTarget instanceof Element) ||\n      !nodeBelongs(containerRefObject.current, blurTarget)\n    ) {\n      clearHighlightedSeries();\n      setVerticalMarkerX(null);\n\n      if (isPopoverOpen && !isPopoverPinned) {\n        dismissPopover();\n      }\n    }\n  };\n\n  const onSVGKeyDown = handlers.onKeyDown;\n\n  const xOffset = xAxisProps.scale.isCategorical() ? Math.max(0, xAxisProps.scale.d3Scale.bandwidth() - 1) / 2 : 0;\n\n  let verticalLineX: number | null = null;\n  if (verticalMarkerX !== null) {\n    verticalLineX = verticalMarkerX.scaledX;\n  } else if (isGroupNavigation && highlightedGroupIndex !== null) {\n    const x = xAxisProps.scale.d3Scale(barGroups[highlightedGroupIndex]?.x as any) ?? null;\n    if (x !== null) {\n      verticalLineX = xOffset + x;\n    }\n  }\n\n  const point = useMemo(\n    () =>\n      highlightedPoint\n        ? {\n            key: `${highlightedPoint.x}-${highlightedPoint.y}`,\n            x: highlightedPoint.x,\n            y: highlightedPoint.y,\n            color: highlightedPoint.color,\n          }\n        : null,\n    [highlightedPoint]\n  );\n\n  const verticalMarkers = useMemo(\n    () =>\n      verticalLineX !== null\n        ? scaledSeries\n            .filter(({ x, y }) => (x === verticalLineX || isNaN(x)) && !isNaN(y))\n            .map(({ x, y, color }, index) => ({\n              key: `${index}-${x}-${y}`,\n              x: !horizontalBars ? verticalLineX || 0 : y,\n              y: !horizontalBars ? y : verticalLineX || 0,\n              color: color,\n            }))\n        : [],\n    [scaledSeries, verticalLineX, horizontalBars]\n  );\n\n  const highlightedElementRef = isGroupNavigation\n    ? highlightedGroupRef\n    : highlightedPoint\n      ? highlightedPointRef\n      : verticalMarkerRef;\n\n  const highlightDetails = useMemo(() => {\n    if (highlightedX === null) {\n      return null;\n    }\n\n    // When series point is highlighted show the corresponding series and matching x-thresholds.\n    if (highlightedPoint) {\n      const seriesToShow = visibleSeries.filter(\n        series => series.series === highlightedPoint?.series || isXThreshold(series.series)\n      );\n      return formatHighlighted({\n        position: highlightedX,\n        series: seriesToShow,\n        xTickFormatter,\n        detailPopoverSeriesContent,\n      });\n    }\n\n    // Otherwise - show all visible series details.\n    return formatHighlighted({\n      position: highlightedX,\n      series: visibleSeries,\n      xTickFormatter,\n      detailPopoverSeriesContent,\n    });\n  }, [highlightedX, highlightedPoint, visibleSeries, xTickFormatter, detailPopoverSeriesContent]);\n\n  const detailPopoverFooterContent = useMemo(\n    () => (detailPopoverFooter && highlightedX ? detailPopoverFooter(highlightedX) : null),\n    [detailPopoverFooter, highlightedX]\n  );\n\n  const activeAriaLabel =\n    highlightDetails && detailsPopoverText ? `${highlightDetails.position}, ${detailsPopoverText}` : '';\n\n  // Live region is used when nothing is focused e.g. when hovering.\n  const activeLiveRegion =\n    activeAriaLabel && !highlightedPoint && highlightedGroupIndex === null ? activeAriaLabel : '';\n\n  const isLineXKeyboardFocused = !highlightedPoint && verticalMarkerX;\n\n  const isRefresh = useVisualRefresh();\n\n  return (\n    <CartesianChartContainer\n      ref={containerRef}\n      minHeight={explicitPlotHeight + blockEndLabelsProps.height}\n      fitHeight={!!fitHeight}\n      hasFilters={hasFilters}\n      leftAxisLabel={<AxisLabel axis={y} position=\"left\" title={leftAxisProps.title} />}\n      leftAxisLabelMeasure={\n        <LabelsMeasure\n          ticks={leftAxisProps.ticks}\n          scale={leftAxisProps.scale}\n          tickFormatter={leftAxisProps.tickFormatter as TickFormatter}\n          autoWidth={setInlineStartLabelsWidth}\n          maxLabelsWidth={maxInlineStartLabelsWidth}\n        />\n      }\n      bottomAxisLabel={<AxisLabel axis={x} position=\"bottom\" title={bottomAxisProps.title} />}\n      chartPlot={\n        <ChartPlot\n          ref={plotRef}\n          width=\"100%\"\n          height={fitHeight ? `calc(100% - ${blockEndLabelsProps.height}px)` : plotHeight}\n          offsetBottom={blockEndLabelsProps.height}\n          isClickable={isPopoverOpen && !isPopoverPinned}\n          ariaLabel={ariaLabel}\n          ariaLabelledby={ariaLabelledby}\n          ariaDescription={ariaDescription}\n          ariaRoleDescription={i18nStrings?.chartAriaRoleDescription}\n          ariaLiveRegion={activeLiveRegion}\n          activeElementRef={highlightedElementRef}\n          activeElementKey={activeAriaLabel}\n          activeElementFocusOffset={isGroupNavigation ? 0 : isLineXKeyboardFocused ? { x: 8, y: 0 } : 3}\n          onMouseMove={onSVGMouseMove}\n          onMouseOut={onSVGMouseOut}\n          onClick={onSVGClick}\n          onApplicationFocus={onApplicationFocus}\n          onApplicationBlur={onApplicationBlur}\n          onKeyDown={onSVGKeyDown}\n        >\n          <line\n            ref={plotMeasureRef}\n            x1=\"0\"\n            x2=\"0\"\n            y1=\"0\"\n            y2=\"100%\"\n            stroke=\"transparent\"\n            strokeWidth={1}\n            style={{ pointerEvents: 'none' }}\n          />\n\n          <InlineStartLabels\n            axis={y}\n            ticks={leftAxisProps.ticks}\n            scale={leftAxisProps.scale}\n            tickFormatter={leftAxisProps.tickFormatter as TickFormatter}\n            title={leftAxisProps.title}\n            ariaRoleDescription={leftAxisProps.ariaRoleDescription}\n            maxLabelsWidth={maxInlineStartLabelsWidth}\n            plotWidth={plotWidth}\n            plotHeight={plotHeight}\n          />\n\n          {horizontalBars && (\n            <VerticalGridLines scale={yAxisProps.scale} ticks={yAxisProps.ticks} height={plotHeight} />\n          )}\n\n          {emphasizeBaselineAxis && linesOnly && (\n            <EmphasizedBaseline axis={x} scale={yAxisProps.scale} width={plotWidth} height={plotHeight} />\n          )}\n\n          <DataSeries\n            axis={x}\n            plotWidth={plotWidth}\n            plotHeight={plotHeight}\n            highlightedSeries={highlightedSeries ?? null}\n            highlightedGroupIndex={highlightedGroupIndex}\n            stackedBars={stackedBars}\n            isGroupNavigation={isGroupNavigation}\n            visibleSeries={visibleSeries}\n            xScale={xAxisProps.scale}\n            yScale={yAxisProps.scale}\n            isRtl={!!isRtl}\n          />\n\n          {emphasizeBaselineAxis && !linesOnly && (\n            <EmphasizedBaseline axis={x} scale={yAxisProps.scale} width={plotWidth} height={plotHeight} />\n          )}\n\n          <VerticalMarker\n            key={verticalLineX || ''}\n            height={plotHeight}\n            showPoints={highlightedPoint === null}\n            showLine={!isGroupNavigation}\n            points={verticalMarkers}\n            ref={verticalMarkerRef}\n          />\n\n          {highlightedPoint && (\n            <HighlightedPoint\n              ref={highlightedPointRef}\n              point={point}\n              role=\"button\"\n              ariaLabel={activeAriaLabel}\n              ariaHasPopup={true}\n              ariaExpanded={isPopoverPinned}\n            />\n          )}\n\n          {isGroupNavigation && xAxisProps.scale.isCategorical() && (\n            <BarGroups\n              ariaLabel={activeAriaLabel}\n              isRefresh={isRefresh}\n              isPopoverPinned={isPopoverPinned}\n              barGroups={barGroups}\n              highlightedGroupIndex={highlightedGroupIndex}\n              highlightedGroupRef={highlightedGroupRef}\n            />\n          )}\n\n          <BlockEndLabels\n            {...blockEndLabelsProps}\n            axis={x}\n            scale={bottomAxisProps.scale}\n            title={bottomAxisProps.title}\n            ariaRoleDescription={bottomAxisProps.ariaRoleDescription}\n            height={plotHeight}\n            width={plotWidth}\n            offsetLeft={inlineStartLabelsWidth + BLOCK_END_LABELS_OFFSET}\n            offsetRight={BLOCK_END_LABELS_OFFSET}\n            isRTL={isRtl}\n          />\n        </ChartPlot>\n      }\n      popover={\n        <MixedChartPopover\n          ref={popoverRef}\n          containerRef={containerRefObject}\n          trackRef={highlightedElementRef}\n          isOpen={isPopoverOpen}\n          isPinned={isPopoverPinned}\n          highlightDetails={highlightDetails}\n          onDismiss={onPopoverDismiss}\n          size={detailPopoverSize}\n          footer={detailPopoverFooterContent}\n          dismissAriaLabel={i18nStrings.detailPopoverDismissAriaLabel}\n          onMouseLeave={onPopoverLeave}\n          onBlur={onApplicationBlur}\n          setPopoverText={setDetailsPopoverText}\n        />\n      }\n    />\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}