{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext } from 'react';\nimport { getGlobalFlag } from '@cloudscape-design/component-toolkit/internal';\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\nimport { AppLayoutToolbarPublicContext } from '../visual-refresh-toolbar/contexts';\n//   useAppLayoutFlagEnabled is set to true only in consoles. It controls if AppLayout theme is toolbar\nexport const useAppLayoutFlagEnabled = () => {\n  const isRefresh = useVisualRefresh();\n  return isRefresh && (getGlobalFlag('appLayoutWidget') || getGlobalFlag('appLayoutToolbar'));\n};\n// AppLayoutToolbar component will have 2 modes:\n//   - for those who use AppLayout component with toolbar. they expect to have all existing features, including deduplication\n//   - for non-console usage. in this case we don't need \"hidden\" features to be enabled, now it's only deduplication\n// the hooks I want to name will exist only internally to control this behavior\nexport const useAppLayoutToolbarDesignEnabled = () => {\n  var _a;\n  const isToolbarPrivate = useAppLayoutFlagEnabled();\n  const isToolbarPublic = (_a = useContext(AppLayoutToolbarPublicContext)) !== null && _a !== void 0 ? _a : false;\n  return isToolbarPublic || isToolbarPrivate;\n};","map":{"version":3,"names":["useContext","getGlobalFlag","useVisualRefresh","AppLayoutToolbarPublicContext","useAppLayoutFlagEnabled","isRefresh","useAppLayoutToolbarDesignEnabled","isToolbarPrivate","isToolbarPublic","_a"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/app-layout/utils/feature-flags.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useContext } from 'react';\n\nimport { getGlobalFlag } from '@cloudscape-design/component-toolkit/internal';\n\nimport { useVisualRefresh } from '../../internal/hooks/use-visual-mode';\nimport { AppLayoutToolbarPublicContext } from '../visual-refresh-toolbar/contexts';\n\n//   useAppLayoutFlagEnabled is set to true only in consoles. It controls if AppLayout theme is toolbar\nexport const useAppLayoutFlagEnabled = () => {\n  const isRefresh = useVisualRefresh();\n  return isRefresh && (getGlobalFlag('appLayoutWidget') || getGlobalFlag('appLayoutToolbar'));\n};\n\n// AppLayoutToolbar component will have 2 modes:\n//   - for those who use AppLayout component with toolbar. they expect to have all existing features, including deduplication\n//   - for non-console usage. in this case we don't need \"hidden\" features to be enabled, now it's only deduplication\n// the hooks I want to name will exist only internally to control this behavior\nexport const useAppLayoutToolbarDesignEnabled = () => {\n  const isToolbarPrivate = useAppLayoutFlagEnabled();\n  const isToolbarPublic = useContext(AppLayoutToolbarPublicContext) ?? false;\n\n  return isToolbarPublic || isToolbarPrivate;\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,UAAU,QAAQ,OAAO;AAElC,SAASC,aAAa,QAAQ,+CAA+C;AAE7E,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,SAASC,6BAA6B,QAAQ,oCAAoC;AAElF;AACA,OAAO,MAAMC,uBAAuB,GAAGA,CAAA,KAAK;EAC1C,MAAMC,SAAS,GAAGH,gBAAgB,EAAE;EACpC,OAAOG,SAAS,KAAKJ,aAAa,CAAC,iBAAiB,CAAC,IAAIA,aAAa,CAAC,kBAAkB,CAAC,CAAC;AAC7F,CAAC;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMK,gCAAgC,GAAGA,CAAA,KAAK;;EACnD,MAAMC,gBAAgB,GAAGH,uBAAuB,EAAE;EAClD,MAAMI,eAAe,GAAG,CAAAC,EAAA,GAAAT,UAAU,CAACG,6BAA6B,CAAC,cAAAM,EAAA,cAAAA,EAAA,GAAI,KAAK;EAE1E,OAAOD,eAAe,IAAID,gBAAgB;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}