{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { getIsRtl } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport InternalButton from '../../button/internal';\nimport styles from './styles.css.js';\nfunction createActionButton(testUtilClasses, action, buttonText, onButtonClick) {\n  if (!action && buttonText) {\n    action = React.createElement(\"span\", Object.assign({}, getAnalyticsMetadataAttribute({\n      action: 'buttonClick'\n    })), React.createElement(InternalButton, {\n      className: testUtilClasses.actionButton,\n      onClick: onButtonClick,\n      formAction: \"none\"\n    }, buttonText));\n  }\n  return action ? React.createElement(\"div\", {\n    className: testUtilClasses.actionSlot\n  }, action) : null;\n}\nexport const ActionsWrapper = ({\n  className,\n  testUtilClasses,\n  action,\n  discoveredActions,\n  buttonText,\n  wrappedClass,\n  containerWidth,\n  onButtonClick\n}) => {\n  const [wrapped, setWrapped] = useState(false);\n  const ref = React.useRef(null);\n  useLayoutEffect(() => {\n    if (!ref.current || !containerWidth || !wrappedClass) {\n      return;\n    }\n    function check() {\n      const isRtl = getIsRtl(ref.current);\n      const {\n        offsetWidth,\n        offsetLeft\n      } = ref.current;\n      const start = isRtl ? containerWidth - offsetWidth - offsetLeft : offsetLeft;\n      // if the action slot is towards the left (right in RTL) of its container\n      setWrapped(start < 100);\n    }\n    // Discovered actions are rendered by their plugin, so don't cause a\n    // re-render of our React tree. So we observe for changes.\n    const observer = new MutationObserver(check);\n    observer.observe(ref.current, {\n      attributes: false,\n      childList: true,\n      subtree: true\n    });\n    check();\n    return () => observer.disconnect();\n  });\n  const actionButton = createActionButton(testUtilClasses, action, buttonText, onButtonClick);\n  if (!actionButton && discoveredActions.length === 0) {\n    return null;\n  }\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: clsx(styles.root, className, wrapped && wrappedClass)\n  }, actionButton, discoveredActions);\n};","map":{"version":3,"names":["React","useLayoutEffect","useState","clsx","getIsRtl","getAnalyticsMetadataAttribute","InternalButton","styles","createActionButton","testUtilClasses","action","buttonText","onButtonClick","createElement","Object","assign","className","actionButton","onClick","formAction","actionSlot","ActionsWrapper","discoveredActions","wrappedClass","containerWidth","wrapped","setWrapped","ref","useRef","current","check","isRtl","offsetWidth","offsetLeft","start","observer","MutationObserver","observe","attributes","childList","subtree","disconnect","length","root"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/alert/actions-wrapper/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { getIsRtl } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport InternalButton, { InternalButtonProps } from '../../button/internal';\nimport { GeneratedAnalyticsMetadataAlertButtonClick } from '../analytics-metadata/interfaces';\n\nimport styles from './styles.css.js';\n\nfunction createActionButton(\n  testUtilClasses: ActionsWrapperProps['testUtilClasses'],\n  action: React.ReactNode,\n  buttonText: React.ReactNode,\n  onButtonClick: InternalButtonProps['onClick']\n) {\n  if (!action && buttonText) {\n    action = (\n      <span\n        {...getAnalyticsMetadataAttribute({\n          action: 'buttonClick',\n        } as Partial<GeneratedAnalyticsMetadataAlertButtonClick>)}\n      >\n        <InternalButton className={testUtilClasses.actionButton} onClick={onButtonClick} formAction=\"none\">\n          {buttonText}\n        </InternalButton>\n      </span>\n    );\n  }\n  return action ? <div className={testUtilClasses.actionSlot}>{action}</div> : null;\n}\n\ninterface ActionsWrapperProps {\n  className: string;\n  testUtilClasses: { actionSlot: string; actionButton: string };\n  action: React.ReactNode;\n  discoveredActions: Array<React.ReactNode>;\n  buttonText: React.ReactNode;\n  wrappedClass?: string;\n  containerWidth?: number;\n  onButtonClick: InternalButtonProps['onClick'];\n}\n\nexport const ActionsWrapper = ({\n  className,\n  testUtilClasses,\n  action,\n  discoveredActions,\n  buttonText,\n  wrappedClass,\n  containerWidth,\n  onButtonClick,\n}: ActionsWrapperProps) => {\n  const [wrapped, setWrapped] = useState(false);\n  const ref = React.useRef<HTMLDivElement>(null);\n  useLayoutEffect(() => {\n    if (!ref.current || !containerWidth || !wrappedClass) {\n      return;\n    }\n    function check() {\n      const isRtl = getIsRtl(ref.current);\n      const { offsetWidth, offsetLeft } = ref.current!;\n      const start = isRtl ? containerWidth! - offsetWidth - offsetLeft : offsetLeft;\n      // if the action slot is towards the left (right in RTL) of its container\n      setWrapped(start < 100);\n    }\n\n    // Discovered actions are rendered by their plugin, so don't cause a\n    // re-render of our React tree. So we observe for changes.\n    const observer = new MutationObserver(check);\n    observer.observe(ref.current, { attributes: false, childList: true, subtree: true });\n    check();\n    return () => observer.disconnect();\n  });\n  const actionButton = createActionButton(testUtilClasses, action, buttonText, onButtonClick);\n  if (!actionButton && discoveredActions.length === 0) {\n    return null;\n  }\n\n  return (\n    <div ref={ref} className={clsx(styles.root, className, wrapped && wrappedClass)}>\n      {actionButton}\n      {discoveredActions}\n    </div>\n  );\n};\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,eAAe,EAAEC,QAAQ,QAAQ,OAAO;AACxD,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,QAAQ,QAAQ,+CAA+C;AACxE,SAASC,6BAA6B,QAAQ,kEAAkE;AAEhH,OAAOC,cAAuC,MAAM,uBAAuB;AAG3E,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,SAASC,kBAAkBA,CACzBC,eAAuD,EACvDC,MAAuB,EACvBC,UAA2B,EAC3BC,aAA6C;EAE7C,IAAI,CAACF,MAAM,IAAIC,UAAU,EAAE;IACzBD,MAAM,GACJV,KAAA,CAAAa,aAAA,SAAAC,MAAA,CAAAC,MAAA,KACMV,6BAA6B,CAAC;MAChCK,MAAM,EAAE;KAC8C,CAAC,GAEzDV,KAAA,CAAAa,aAAA,CAACP,cAAc;MAACU,SAAS,EAAEP,eAAe,CAACQ,YAAY;MAAEC,OAAO,EAAEN,aAAa;MAAEO,UAAU,EAAC;IAAM,GAC/FR,UAAU,CACI,CAEpB;;EAEH,OAAOD,MAAM,GAAGV,KAAA,CAAAa,aAAA;IAAKG,SAAS,EAAEP,eAAe,CAACW;EAAU,GAAGV,MAAM,CAAO,GAAG,IAAI;AACnF;AAaA,OAAO,MAAMW,cAAc,GAAGA,CAAC;EAC7BL,SAAS;EACTP,eAAe;EACfC,MAAM;EACNY,iBAAiB;EACjBX,UAAU;EACVY,YAAY;EACZC,cAAc;EACdZ;AAAa,CACO,KAAI;EACxB,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMyB,GAAG,GAAG3B,KAAK,CAAC4B,MAAM,CAAiB,IAAI,CAAC;EAC9C3B,eAAe,CAAC,MAAK;IACnB,IAAI,CAAC0B,GAAG,CAACE,OAAO,IAAI,CAACL,cAAc,IAAI,CAACD,YAAY,EAAE;MACpD;;IAEF,SAASO,KAAKA,CAAA;MACZ,MAAMC,KAAK,GAAG3B,QAAQ,CAACuB,GAAG,CAACE,OAAO,CAAC;MACnC,MAAM;QAAEG,WAAW;QAAEC;MAAU,CAAE,GAAGN,GAAG,CAACE,OAAQ;MAChD,MAAMK,KAAK,GAAGH,KAAK,GAAGP,cAAe,GAAGQ,WAAW,GAAGC,UAAU,GAAGA,UAAU;MAC7E;MACAP,UAAU,CAACQ,KAAK,GAAG,GAAG,CAAC;IACzB;IAEA;IACA;IACA,MAAMC,QAAQ,GAAG,IAAIC,gBAAgB,CAACN,KAAK,CAAC;IAC5CK,QAAQ,CAACE,OAAO,CAACV,GAAG,CAACE,OAAO,EAAE;MAAES,UAAU,EAAE,KAAK;MAAEC,SAAS,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAI,CAAE,CAAC;IACpFV,KAAK,EAAE;IACP,OAAO,MAAMK,QAAQ,CAACM,UAAU,EAAE;EACpC,CAAC,CAAC;EACF,MAAMxB,YAAY,GAAGT,kBAAkB,CAACC,eAAe,EAAEC,MAAM,EAAEC,UAAU,EAAEC,aAAa,CAAC;EAC3F,IAAI,CAACK,YAAY,IAAIK,iBAAiB,CAACoB,MAAM,KAAK,CAAC,EAAE;IACnD,OAAO,IAAI;;EAGb,OACE1C,KAAA,CAAAa,aAAA;IAAKc,GAAG,EAAEA,GAAG;IAAEX,SAAS,EAAEb,IAAI,CAACI,MAAM,CAACoC,IAAI,EAAE3B,SAAS,EAAES,OAAO,IAAIF,YAAY;EAAC,GAC5EN,YAAY,EACZK,iBAAiB,CACd;AAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}