{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport clsx from 'clsx';\nimport { InternalButton } from '../../../button/internal';\nimport PanelResizeHandle from '../../../internal/components/panel-resize-handle';\nimport customCssProps from '../../../internal/generated/custom-css-properties';\nimport { usePrevious } from '../../../internal/hooks/use-previous';\nimport { getLimitedValue } from '../../../split-panel/utils/size-utils';\nimport { getDrawerStyles } from '../compute-layout';\nimport { useResize } from './use-resize';\nimport sharedStyles from '../../resize/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nfunction AppLayoutGlobalDrawerImplementation({\n  appLayoutInternals,\n  show,\n  activeGlobalDrawer\n}) {\n  var _a, _b, _c, _d, _e, _f;\n  const {\n    ariaLabels,\n    globalDrawersFocusControl,\n    isMobile,\n    placement,\n    onActiveGlobalDrawersChange,\n    onActiveDrawerResize,\n    minGlobalDrawersSizes,\n    maxGlobalDrawersSizes,\n    activeGlobalDrawersSizes,\n    activeGlobalDrawers,\n    verticalOffsets,\n    drawersOpenQueue,\n    expandedDrawerId,\n    setExpandedDrawerId\n  } = appLayoutInternals;\n  const drawerRef = useRef(null);\n  const activeDrawerId = (_a = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.id) !== null && _a !== void 0 ? _a : '';\n  const computedAriaLabels = {\n    closeButton: activeGlobalDrawer ? (_b = activeGlobalDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.closeButton : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.toolsClose,\n    content: activeGlobalDrawer ? (_c = activeGlobalDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.tools\n  };\n  const {\n    drawerTopOffset,\n    drawerHeight\n  } = getDrawerStyles(verticalOffsets, isMobile, placement);\n  const activeDrawerSize = (_d = activeDrawerId ? activeGlobalDrawersSizes[activeDrawerId] : 0) !== null && _d !== void 0 ? _d : 0;\n  const minDrawerSize = (_e = activeDrawerId ? minGlobalDrawersSizes[activeDrawerId] : 0) !== null && _e !== void 0 ? _e : 0;\n  const maxDrawerSize = (_f = activeDrawerId ? maxGlobalDrawersSizes[activeDrawerId] : 0) !== null && _f !== void 0 ? _f : 0;\n  const refs = globalDrawersFocusControl.refs[activeDrawerId];\n  const resizeProps = useResize({\n    currentWidth: activeDrawerSize,\n    minWidth: minDrawerSize,\n    maxWidth: maxDrawerSize,\n    panelRef: drawerRef,\n    handleRef: refs === null || refs === void 0 ? void 0 : refs.slider,\n    onResize: size => onActiveDrawerResize({\n      id: activeDrawerId,\n      size\n    })\n  });\n  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);\n  const lastOpenedDrawerId = drawersOpenQueue.length ? drawersOpenQueue[0] : null;\n  const hasTriggerButton = !!(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.trigger);\n  const isExpanded = (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.isExpandable) && expandedDrawerId === activeDrawerId;\n  const wasExpanded = usePrevious(isExpanded);\n  const animationDisabled = (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.defaultActive) && !drawersOpenQueue.includes(activeGlobalDrawer.id) || wasExpanded && !isExpanded;\n  return React.createElement(Transition, {\n    nodeRef: drawerRef,\n    in: show || isExpanded,\n    appear: show || isExpanded,\n    timeout: 0\n  }, state => {\n    var _a, _b, _c;\n    return React.createElement(\"aside\", {\n      id: activeDrawerId,\n      \"aria-hidden\": !show,\n      \"aria-label\": computedAriaLabels.content,\n      className: clsx(styles.drawer, styles['drawer-global'], styles[state], !animationDisabled && sharedStyles['with-motion-horizontal'], !animationDisabled && isExpanded && styles['with-expanded-motion'], {\n        [styles['drawer-hidden']]: !show,\n        [styles['last-opened']]: lastOpenedDrawerId === activeDrawerId || isExpanded,\n        [testutilStyles['active-drawer']]: show,\n        [styles['drawer-expanded']]: isExpanded,\n        [styles['has-next-siblings']]: activeGlobalDrawers.findIndex(drawer => drawer.id === activeDrawerId) + 1 < activeGlobalDrawers.length\n      }),\n      ref: drawerRef,\n      onBlur: e => {\n        // Drawers with trigger buttons follow this restore focus logic:\n        // If a previously focused element exists, restore focus on it; otherwise, focus on the associated trigger button.\n        // This function resets the previously focused element.\n        // If the drawer has no trigger button and loses focus on the previously focused element, it defaults to document.body,\n        // which ideally should never happen.\n        if (!hasTriggerButton) {\n          return;\n        }\n        if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n          globalDrawersFocusControl.loseFocus();\n        }\n      },\n      style: Object.assign({\n        blockSize: drawerHeight,\n        insetBlockStart: drawerTopOffset\n      }, !isMobile && {\n        [customCssProps.drawerSize]: `${['entering', 'entered'].includes(state) ? isExpanded ? '100%' : size + 'px' : 0}`\n      }),\n      \"data-testid\": `awsui-app-layout-drawer-${activeDrawerId}`\n    }, React.createElement(\"div\", {\n      className: clsx(styles['global-drawer-wrapper'])\n    }, !isMobile && React.createElement(\"div\", {\n      className: styles['drawer-gap']\n    }), !isMobile && (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.resizable) && !isExpanded && React.createElement(\"div\", {\n      className: styles['drawer-slider']\n    }, React.createElement(PanelResizeHandle, {\n      ref: refs === null || refs === void 0 ? void 0 : refs.slider,\n      position: \"side\",\n      className: testutilStyles['drawers-slider'],\n      ariaLabel: (_a = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _a === void 0 ? void 0 : _a.resizeHandle,\n      tooltipText: (_b = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _b === void 0 ? void 0 : _b.resizeHandleTooltipText,\n      ariaValuenow: resizeProps.relativeSize,\n      onKeyDown: resizeProps.onKeyDown,\n      onDirectionClick: resizeProps.onDirectionClick,\n      onPointerDown: resizeProps.onPointerDown\n    })), React.createElement(\"div\", {\n      className: clsx(styles['drawer-content-container'], sharedStyles['with-motion-horizontal']),\n      \"data-testid\": `awsui-app-layout-drawer-content-${activeDrawerId}`\n    }, React.createElement(\"div\", {\n      className: styles['drawer-actions']\n    }, !isMobile && (activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.isExpandable) && React.createElement(\"div\", {\n      className: styles['drawer-expanded-mode-button']\n    }, React.createElement(InternalButton, {\n      ariaLabel: (_c = activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.ariaLabels) === null || _c === void 0 ? void 0 : _c.expandedModeButton,\n      className: testutilStyles['active-drawer-expanded-mode-button'],\n      formAction: \"none\",\n      ariaExpanded: isExpanded,\n      iconName: isExpanded ? 'shrink' : 'expand',\n      onClick: () => setExpandedDrawerId(isExpanded ? null : activeDrawerId),\n      variant: \"icon\",\n      analyticsAction: isExpanded ? 'expand' : 'collapse'\n    })), React.createElement(\"div\", {\n      className: clsx(styles['drawer-close-button'])\n    }, React.createElement(InternalButton, {\n      ariaLabel: computedAriaLabels.closeButton,\n      className: clsx({\n        [testutilStyles['active-drawer-close-button']]: activeDrawerId\n      }),\n      formAction: \"none\",\n      iconName: isMobile ? 'close' : 'angle-right',\n      onClick: () => onActiveGlobalDrawersChange(activeDrawerId, {\n        initiatedByUserAction: true\n      }),\n      ref: refs === null || refs === void 0 ? void 0 : refs.close,\n      variant: \"icon\",\n      analyticsAction: \"close\"\n    }))), React.createElement(\"div\", {\n      className: styles['drawer-content'],\n      style: {\n        blockSize: drawerHeight\n      }\n    }, activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.content))));\n  });\n}\nexport default AppLayoutGlobalDrawerImplementation;","map":{"version":3,"names":["React","useRef","Transition","clsx","InternalButton","PanelResizeHandle","customCssProps","usePrevious","getLimitedValue","getDrawerStyles","useResize","sharedStyles","testutilStyles","styles","AppLayoutGlobalDrawerImplementation","appLayoutInternals","show","activeGlobalDrawer","ariaLabels","globalDrawersFocusControl","isMobile","placement","onActiveGlobalDrawersChange","onActiveDrawerResize","minGlobalDrawersSizes","maxGlobalDrawersSizes","activeGlobalDrawersSizes","activeGlobalDrawers","verticalOffsets","drawersOpenQueue","expandedDrawerId","setExpandedDrawerId","drawerRef","activeDrawerId","_a","id","computedAriaLabels","closeButton","_b","toolsClose","content","_c","drawerName","tools","drawerTopOffset","drawerHeight","activeDrawerSize","_d","minDrawerSize","_e","maxDrawerSize","_f","refs","resizeProps","currentWidth","minWidth","maxWidth","panelRef","handleRef","slider","onResize","size","lastOpenedDrawerId","length","hasTriggerButton","trigger","isExpanded","isExpandable","wasExpanded","animationDisabled","defaultActive","includes","createElement","nodeRef","in","appear","timeout","state","className","drawer","findIndex","ref","onBlur","e","relatedTarget","currentTarget","contains","loseFocus","style","Object","assign","blockSize","insetBlockStart","drawerSize","resizable","position","ariaLabel","resizeHandle","tooltipText","resizeHandleTooltipText","ariaValuenow","relativeSize","onKeyDown","onDirectionClick","onPointerDown","expandedModeButton","formAction","ariaExpanded","iconName","onClick","variant","analyticsAction","initiatedByUserAction","close"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/app-layout/visual-refresh-toolbar/drawer/global-drawer.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport { Transition } from 'react-transition-group';\nimport clsx from 'clsx';\n\nimport { InternalButton } from '../../../button/internal';\nimport PanelResizeHandle from '../../../internal/components/panel-resize-handle';\nimport customCssProps from '../../../internal/generated/custom-css-properties';\nimport { usePrevious } from '../../../internal/hooks/use-previous';\nimport { getLimitedValue } from '../../../split-panel/utils/size-utils';\nimport { getDrawerStyles } from '../compute-layout';\nimport { AppLayoutInternals, InternalDrawer } from '../interfaces';\nimport { useResize } from './use-resize';\n\nimport sharedStyles from '../../resize/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface AppLayoutGlobalDrawerImplementationProps {\n  appLayoutInternals: AppLayoutInternals;\n  show: boolean;\n  activeGlobalDrawer: InternalDrawer | undefined;\n}\n\nfunction AppLayoutGlobalDrawerImplementation({\n  appLayoutInternals,\n  show,\n  activeGlobalDrawer,\n}: AppLayoutGlobalDrawerImplementationProps) {\n  const {\n    ariaLabels,\n    globalDrawersFocusControl,\n    isMobile,\n    placement,\n    onActiveGlobalDrawersChange,\n    onActiveDrawerResize,\n    minGlobalDrawersSizes,\n    maxGlobalDrawersSizes,\n    activeGlobalDrawersSizes,\n    activeGlobalDrawers,\n    verticalOffsets,\n    drawersOpenQueue,\n    expandedDrawerId,\n    setExpandedDrawerId,\n  } = appLayoutInternals;\n  const drawerRef = useRef<HTMLDivElement>(null);\n  const activeDrawerId = activeGlobalDrawer?.id ?? '';\n\n  const computedAriaLabels = {\n    closeButton: activeGlobalDrawer ? activeGlobalDrawer.ariaLabels?.closeButton : ariaLabels?.toolsClose,\n    content: activeGlobalDrawer ? activeGlobalDrawer.ariaLabels?.drawerName : ariaLabels?.tools,\n  };\n\n  const { drawerTopOffset, drawerHeight } = getDrawerStyles(verticalOffsets, isMobile, placement);\n  const activeDrawerSize = (activeDrawerId ? activeGlobalDrawersSizes[activeDrawerId] : 0) ?? 0;\n  const minDrawerSize = (activeDrawerId ? minGlobalDrawersSizes[activeDrawerId] : 0) ?? 0;\n  const maxDrawerSize = (activeDrawerId ? maxGlobalDrawersSizes[activeDrawerId] : 0) ?? 0;\n  const refs = globalDrawersFocusControl.refs[activeDrawerId];\n  const resizeProps = useResize({\n    currentWidth: activeDrawerSize,\n    minWidth: minDrawerSize,\n    maxWidth: maxDrawerSize,\n    panelRef: drawerRef,\n    handleRef: refs?.slider,\n    onResize: size => onActiveDrawerResize({ id: activeDrawerId!, size }),\n  });\n  const size = getLimitedValue(minDrawerSize, activeDrawerSize, maxDrawerSize);\n  const lastOpenedDrawerId = drawersOpenQueue.length ? drawersOpenQueue[0] : null;\n  const hasTriggerButton = !!activeGlobalDrawer?.trigger;\n  const isExpanded = activeGlobalDrawer?.isExpandable && expandedDrawerId === activeDrawerId;\n  const wasExpanded = usePrevious(isExpanded);\n  const animationDisabled =\n    (activeGlobalDrawer?.defaultActive && !drawersOpenQueue.includes(activeGlobalDrawer.id)) ||\n    (wasExpanded && !isExpanded);\n\n  return (\n    <Transition nodeRef={drawerRef} in={show || isExpanded} appear={show || isExpanded} timeout={0}>\n      {state => {\n        return (\n          <aside\n            id={activeDrawerId}\n            aria-hidden={!show}\n            aria-label={computedAriaLabels.content}\n            className={clsx(\n              styles.drawer,\n              styles['drawer-global'],\n              styles[state],\n              !animationDisabled && sharedStyles['with-motion-horizontal'],\n              !animationDisabled && isExpanded && styles['with-expanded-motion'],\n              {\n                [styles['drawer-hidden']]: !show,\n                [styles['last-opened']]: lastOpenedDrawerId === activeDrawerId || isExpanded,\n                [testutilStyles['active-drawer']]: show,\n                [styles['drawer-expanded']]: isExpanded,\n                [styles['has-next-siblings']]:\n                  activeGlobalDrawers.findIndex(drawer => drawer.id === activeDrawerId) + 1 <\n                  activeGlobalDrawers.length,\n              }\n            )}\n            ref={drawerRef}\n            onBlur={e => {\n              // Drawers with trigger buttons follow this restore focus logic:\n              // If a previously focused element exists, restore focus on it; otherwise, focus on the associated trigger button.\n              // This function resets the previously focused element.\n              // If the drawer has no trigger button and loses focus on the previously focused element, it defaults to document.body,\n              // which ideally should never happen.\n              if (!hasTriggerButton) {\n                return;\n              }\n\n              if (!e.relatedTarget || !e.currentTarget.contains(e.relatedTarget)) {\n                globalDrawersFocusControl.loseFocus();\n              }\n            }}\n            style={{\n              blockSize: drawerHeight,\n              insetBlockStart: drawerTopOffset,\n              ...(!isMobile && {\n                [customCssProps.drawerSize]: `${['entering', 'entered'].includes(state) ? (isExpanded ? '100%' : size + 'px') : 0}`,\n              }),\n            }}\n            data-testid={`awsui-app-layout-drawer-${activeDrawerId}`}\n          >\n            <div className={clsx(styles['global-drawer-wrapper'])}>\n              {!isMobile && <div className={styles['drawer-gap']}></div>}\n              {!isMobile && activeGlobalDrawer?.resizable && !isExpanded && (\n                <div className={styles['drawer-slider']}>\n                  <PanelResizeHandle\n                    ref={refs?.slider}\n                    position=\"side\"\n                    className={testutilStyles['drawers-slider']}\n                    ariaLabel={activeGlobalDrawer?.ariaLabels?.resizeHandle}\n                    tooltipText={activeGlobalDrawer?.ariaLabels?.resizeHandleTooltipText}\n                    ariaValuenow={resizeProps.relativeSize}\n                    onKeyDown={resizeProps.onKeyDown}\n                    onDirectionClick={resizeProps.onDirectionClick}\n                    onPointerDown={resizeProps.onPointerDown}\n                  />\n                </div>\n              )}\n\n              <div\n                className={clsx(styles['drawer-content-container'], sharedStyles['with-motion-horizontal'])}\n                data-testid={`awsui-app-layout-drawer-content-${activeDrawerId}`}\n              >\n                <div className={styles['drawer-actions']}>\n                  {!isMobile && activeGlobalDrawer?.isExpandable && (\n                    <div className={styles['drawer-expanded-mode-button']}>\n                      <InternalButton\n                        ariaLabel={activeGlobalDrawer?.ariaLabels?.expandedModeButton}\n                        className={testutilStyles['active-drawer-expanded-mode-button']}\n                        formAction=\"none\"\n                        ariaExpanded={isExpanded}\n                        iconName={isExpanded ? 'shrink' : 'expand'}\n                        onClick={() => setExpandedDrawerId(isExpanded ? null : activeDrawerId)}\n                        variant=\"icon\"\n                        analyticsAction={isExpanded ? 'expand' : 'collapse'}\n                      />\n                    </div>\n                  )}\n                  <div className={clsx(styles['drawer-close-button'])}>\n                    <InternalButton\n                      ariaLabel={computedAriaLabels.closeButton}\n                      className={clsx({\n                        [testutilStyles['active-drawer-close-button']]: activeDrawerId,\n                      })}\n                      formAction=\"none\"\n                      iconName={isMobile ? 'close' : 'angle-right'}\n                      onClick={() => onActiveGlobalDrawersChange(activeDrawerId, { initiatedByUserAction: true })}\n                      ref={refs?.close}\n                      variant=\"icon\"\n                      analyticsAction=\"close\"\n                    />\n                  </div>\n                </div>\n                <div className={styles['drawer-content']} style={{ blockSize: drawerHeight }}>\n                  {activeGlobalDrawer?.content}\n                </div>\n              </div>\n            </div>\n          </aside>\n        );\n      }}\n    </Transition>\n  );\n}\n\nexport default AppLayoutGlobalDrawerImplementation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}