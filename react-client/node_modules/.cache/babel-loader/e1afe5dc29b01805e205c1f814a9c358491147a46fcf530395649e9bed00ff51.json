{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef } from 'react';\nimport DragHandle from '../../internal/components/drag-handle';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalToggle from '../../toggle/internal';\nimport styles from '../styles.css.js';\nconst componentPrefix = 'content-display-option';\nexport const getClassName = suffix => styles[[componentPrefix, suffix].filter(Boolean).join('-')];\nconst ContentDisplayOption = forwardRef(({\n  dragHandleProps,\n  onToggle,\n  option\n}, ref) => {\n  const idPrefix = useUniqueId(componentPrefix);\n  const controlId = `${idPrefix}-control-${option.id}`;\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: getClassName('content')\n  }, React.createElement(\"div\", {\n    className: styles['drag-handle-wrapper']\n  }, React.createElement(DragHandle, Object.assign({}, dragHandleProps))), React.createElement(\"label\", {\n    className: getClassName('label'),\n    htmlFor: controlId\n  }, option.label), React.createElement(\"div\", {\n    className: getClassName('toggle')\n  }, React.createElement(InternalToggle, {\n    checked: !!option.visible,\n    onChange: () => onToggle && onToggle(option),\n    disabled: option.alwaysVisible === true,\n    controlId: controlId\n  })));\n});\nexport default ContentDisplayOption;","map":{"version":3,"names":["React","forwardRef","DragHandle","useUniqueId","InternalToggle","styles","componentPrefix","getClassName","suffix","filter","Boolean","join","ContentDisplayOption","dragHandleProps","onToggle","option","ref","idPrefix","controlId","id","createElement","className","Object","assign","htmlFor","label","checked","visible","onChange","disabled","alwaysVisible"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/collection-preferences/content-display/content-display-option.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { ForwardedRef, forwardRef } from 'react';\n\nimport DragHandle, { DragHandleProps } from '../../internal/components/drag-handle';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport InternalToggle from '../../toggle/internal';\nimport { OptionWithVisibility } from './utils';\n\nimport styles from '../styles.css.js';\n\nconst componentPrefix = 'content-display-option';\nexport const getClassName = (suffix?: string) => styles[[componentPrefix, suffix].filter(Boolean).join('-')];\n\ninterface ContentDisplayOptionProps {\n  dragHandleProps: DragHandleProps;\n  onToggle?: (option: OptionWithVisibility) => void;\n  option: OptionWithVisibility;\n}\n\nconst ContentDisplayOption = forwardRef(\n  ({ dragHandleProps, onToggle, option }: ContentDisplayOptionProps, ref: ForwardedRef<HTMLDivElement>) => {\n    const idPrefix = useUniqueId(componentPrefix);\n    const controlId = `${idPrefix}-control-${option.id}`;\n    return (\n      <div ref={ref} className={getClassName('content')}>\n        <div className={styles['drag-handle-wrapper']}>\n          <DragHandle {...dragHandleProps} />\n        </div>\n\n        <label className={getClassName('label')} htmlFor={controlId}>\n          {option.label}\n        </label>\n        <div className={getClassName('toggle')}>\n          <InternalToggle\n            checked={!!option.visible}\n            onChange={() => onToggle && onToggle(option)}\n            disabled={option.alwaysVisible === true}\n            controlId={controlId}\n          />\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ContentDisplayOption;\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAkBC,UAAU,QAAQ,OAAO;AAEvD,OAAOC,UAA+B,MAAM,uCAAuC;AACnF,SAASC,WAAW,QAAQ,oCAAoC;AAChE,OAAOC,cAAc,MAAM,uBAAuB;AAGlD,OAAOC,MAAM,MAAM,kBAAkB;AAErC,MAAMC,eAAe,GAAG,wBAAwB;AAChD,OAAO,MAAMC,YAAY,GAAIC,MAAe,IAAKH,MAAM,CAAC,CAACC,eAAe,EAAEE,MAAM,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;AAQ5G,MAAMC,oBAAoB,GAAGX,UAAU,CACrC,CAAC;EAAEY,eAAe;EAAEC,QAAQ;EAAEC;AAAM,CAA6B,EAAEC,GAAiC,KAAI;EACtG,MAAMC,QAAQ,GAAGd,WAAW,CAACG,eAAe,CAAC;EAC7C,MAAMY,SAAS,GAAG,GAAGD,QAAQ,YAAYF,MAAM,CAACI,EAAE,EAAE;EACpD,OACEnB,KAAA,CAAAoB,aAAA;IAAKJ,GAAG,EAAEA,GAAG;IAAEK,SAAS,EAAEd,YAAY,CAAC,SAAS;EAAC,GAC/CP,KAAA,CAAAoB,aAAA;IAAKC,SAAS,EAAEhB,MAAM,CAAC,qBAAqB;EAAC,GAC3CL,KAAA,CAAAoB,aAAA,CAAClB,UAAU,EAAAoB,MAAA,CAAAC,MAAA,KAAKV,eAAe,EAAI,CAC/B,EAENb,KAAA,CAAAoB,aAAA;IAAOC,SAAS,EAAEd,YAAY,CAAC,OAAO,CAAC;IAAEiB,OAAO,EAAEN;EAAS,GACxDH,MAAM,CAACU,KAAK,CACP,EACRzB,KAAA,CAAAoB,aAAA;IAAKC,SAAS,EAAEd,YAAY,CAAC,QAAQ;EAAC,GACpCP,KAAA,CAAAoB,aAAA,CAAChB,cAAc;IACbsB,OAAO,EAAE,CAAC,CAACX,MAAM,CAACY,OAAO;IACzBC,QAAQ,EAAEA,CAAA,KAAMd,QAAQ,IAAIA,QAAQ,CAACC,MAAM,CAAC;IAC5Cc,QAAQ,EAAEd,MAAM,CAACe,aAAa,KAAK,IAAI;IACvCZ,SAAS,EAAEA;EAAS,EACpB,CACE,CACF;AAEV,CAAC,CACF;AAED,eAAeN,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}