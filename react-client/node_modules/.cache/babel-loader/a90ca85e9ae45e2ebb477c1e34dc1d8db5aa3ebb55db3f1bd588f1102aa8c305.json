{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\nimport { processItems, processSelectedItems, itemsAreEqual } from './operations/index.js';\nimport { createSyncProps } from './utils.js';\nimport { useCollectionState } from './use-collection-state.js';\nexport function useCollection(allItems, options) {\n  const collectionRef = useRef(null);\n  const [state, actions] = useCollectionState(options, collectionRef);\n  const {\n    items,\n    allPageItems,\n    pagesCount,\n    filteredItemsCount,\n    actualPageIndex,\n    itemsTree\n  } = processItems(allItems, state, options);\n  const expandedItemsSet = new Set();\n  if (options.expandableRows) {\n    for (const item of state.expandedItems) {\n      expandedItemsSet.add(options.expandableRows.getId(item));\n    }\n  }\n  let visibleItems = items;\n  if (options.expandableRows) {\n    const flatItems = new Array();\n    const getId = options.expandableRows.getId;\n    const traverse = items => {\n      for (const item of items) {\n        flatItems.push(item);\n        if (expandedItemsSet.has(getId(item))) {\n          traverse(itemsTree.getChildren(item));\n        }\n      }\n    };\n    traverse(items);\n    visibleItems = flatItems;\n  }\n  // Removing selected items that are no longer present in items unless keepSelection=true.\n  if (options.selection && !options.selection.keepSelection) {\n    const newSelectedItems = processSelectedItems(visibleItems, state.selectedItems, options.selection.trackBy);\n    if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {\n      // This is a recommended pattern for how to handle the state, dependent on the incoming props\n      // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n      actions.setSelectedItems(newSelectedItems);\n    }\n  }\n  // Removing expanded items that are no longer present in items.\n  if (options.expandableRows) {\n    const newExpandedItems = visibleItems.filter(item => expandedItemsSet.has(options.expandableRows.getId(item)));\n    if (!itemsAreEqual(newExpandedItems, state.expandedItems, options.expandableRows.getId)) {\n      actions.setExpandedItems(newExpandedItems);\n    }\n  }\n  return Object.assign({\n    items,\n    allPageItems,\n    filteredItemsCount,\n    actions\n  }, createSyncProps(options, state, actions, collectionRef, {\n    actualPageIndex,\n    pagesCount,\n    allItems,\n    allPageItems,\n    itemsTree\n  }));\n}","map":{"version":3,"names":["useRef","processItems","processSelectedItems","itemsAreEqual","createSyncProps","useCollectionState","useCollection","allItems","options","collectionRef","state","actions","items","allPageItems","pagesCount","filteredItemsCount","actualPageIndex","itemsTree","expandedItemsSet","Set","expandableRows","item","expandedItems","add","getId","visibleItems","flatItems","Array","traverse","push","has","getChildren","selection","keepSelection","newSelectedItems","selectedItems","trackBy","setSelectedItems","newExpandedItems","filter","setExpandedItems","Object","assign"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/@cloudscape-design/collection-hooks/mjs/use-collection.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\nimport { processItems, processSelectedItems, itemsAreEqual } from './operations/index.js';\nimport { createSyncProps } from './utils.js';\nimport { useCollectionState } from './use-collection-state.js';\nexport function useCollection(allItems, options) {\n    const collectionRef = useRef(null);\n    const [state, actions] = useCollectionState(options, collectionRef);\n    const { items, allPageItems, pagesCount, filteredItemsCount, actualPageIndex, itemsTree } = processItems(allItems, state, options);\n    const expandedItemsSet = new Set();\n    if (options.expandableRows) {\n        for (const item of state.expandedItems) {\n            expandedItemsSet.add(options.expandableRows.getId(item));\n        }\n    }\n    let visibleItems = items;\n    if (options.expandableRows) {\n        const flatItems = new Array();\n        const getId = options.expandableRows.getId;\n        const traverse = (items) => {\n            for (const item of items) {\n                flatItems.push(item);\n                if (expandedItemsSet.has(getId(item))) {\n                    traverse(itemsTree.getChildren(item));\n                }\n            }\n        };\n        traverse(items);\n        visibleItems = flatItems;\n    }\n    // Removing selected items that are no longer present in items unless keepSelection=true.\n    if (options.selection && !options.selection.keepSelection) {\n        const newSelectedItems = processSelectedItems(visibleItems, state.selectedItems, options.selection.trackBy);\n        if (!itemsAreEqual(newSelectedItems, state.selectedItems, options.selection.trackBy)) {\n            // This is a recommended pattern for how to handle the state, dependent on the incoming props\n            // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n            actions.setSelectedItems(newSelectedItems);\n        }\n    }\n    // Removing expanded items that are no longer present in items.\n    if (options.expandableRows) {\n        const newExpandedItems = visibleItems.filter(item => expandedItemsSet.has(options.expandableRows.getId(item)));\n        if (!itemsAreEqual(newExpandedItems, state.expandedItems, options.expandableRows.getId)) {\n            actions.setExpandedItems(newExpandedItems);\n        }\n    }\n    return Object.assign({ items,\n        allPageItems,\n        filteredItemsCount,\n        actions }, createSyncProps(options, state, actions, collectionRef, {\n        actualPageIndex,\n        pagesCount,\n        allItems,\n        allPageItems,\n        itemsTree,\n    }));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}