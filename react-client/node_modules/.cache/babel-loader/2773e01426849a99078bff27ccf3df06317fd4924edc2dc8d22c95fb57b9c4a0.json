{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { addMonths, addYears, endOfDay, isAfter, isBefore, isSameMonth, isSameYear, startOfDay, startOfMonth, startOfYear } from 'date-fns';\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport { getBaseDay } from '../../calendar/utils/navigation-day';\nimport { getBaseMonth } from '../../calendar/utils/navigation-month';\nimport { useInternalI18n } from '../../i18n/context.js';\nimport { useMobile } from '../../internal/hooks/use-mobile/index.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { formatDate, formatDateTime, parseDate, splitDateTime } from '../../internal/utils/date-time';\nimport { normalizeLocale, normalizeStartOfWeek } from '../../internal/utils/locale';\nimport InternalLiveRegion from '../../live-region/internal';\nimport SpaceBetween from '../../space-between/internal';\nimport { Grids } from './grids';\nimport CalendarHeader from './header';\nimport RangeInputs from './range-inputs.js';\nimport { findDateToFocus, findMonthToDisplay, findMonthToFocus, findYearToDisplay } from './utils';\nimport styles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\nexport default function DateRangePickerCalendar({\n  value,\n  setValue,\n  locale = '',\n  startOfWeek,\n  isDateEnabled = () => true,\n  dateDisabledReason = () => '',\n  i18nStrings,\n  dateOnly = false,\n  timeInputFormat = 'hh:mm:ss',\n  customAbsoluteRangeControl,\n  granularity = 'day'\n}) {\n  var _a, _b;\n  const isSingleGrid = useMobile();\n  const isMonthPicker = granularity === 'month';\n  const hideTime = isMonthPicker || dateOnly;\n  const normalizedLocale = normalizeLocale('DateRangePicker', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const i18n = useInternalI18n('date-range-picker');\n  const [announcement, setAnnouncement] = useState('');\n  const findPageToDisplay = isMonthPicker ? findYearToDisplay : findMonthToDisplay;\n  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;\n  const addPage = isMonthPicker ? addYears : addMonths;\n  const startOfPage = isMonthPicker ? startOfYear : startOfMonth;\n  const findItemToFocus = isMonthPicker ? findMonthToFocus : findDateToFocus;\n  const [currentPage, setCurrentPage] = useState(() => findPageToDisplay(value, isSingleGrid));\n  const [focusedDate, setFocusedDate] = useState(() => {\n    if (value.start.date) {\n      const startDate = parseDate(value.start.date);\n      if (isSamePage(startDate, currentPage)) {\n        return startDate;\n      }\n      if (!isSingleGrid && isSamePage(startDate, addPage(currentPage, -1))) {\n        return startDate;\n      }\n    }\n    return findItemToFocus(parseDate(value.start.date), currentPage, isDateEnabled);\n  });\n  const updateCurrentPage = startDate => {\n    if (isMonthPicker && startDate.length >= 4 || startDate.length >= 8) {\n      const newCurrentPage = startOfPage(parseDate(startDate));\n      setCurrentPage(isSingleGrid ? newCurrentPage : addPage(newCurrentPage, 1));\n    }\n  };\n  // recommended to include the start/end time announced with the selection\n  // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n  const announceStart = startDate => {\n    return `${i18n('i18nStrings.startDateLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startDateLabel)}, ${getDateLabel(normalizedLocale, startDate)}${hideTime ? '' : `, ${i18n('i18nStrings.startTimeLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.startTimeLabel)}, ${renderTimeLabel(normalizedLocale, startDate, timeInputFormat)}`}. `;\n  };\n  const announceEnd = endDate => {\n    return `${i18n('i18nStrings.endDateLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endDateLabel)}, ${getDateLabel(normalizedLocale, endDate)}${hideTime ? '' : `, ${i18n('i18nStrings.endTimeLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.endTimeLabel)}, ${renderTimeLabel(normalizedLocale, endDate, timeInputFormat)}`}. `;\n  };\n  const renderSelectedAbsoluteRangeAriaLive = i18n('i18nStrings.renderSelectedAbsoluteRangeAriaLive', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.renderSelectedAbsoluteRangeAriaLive, format => (startDate, endDate) => format({\n    startDate,\n    endDate\n  }));\n  const announceRange = (startDate, endDate) => {\n    if (!renderSelectedAbsoluteRangeAriaLive) {\n      return `${getDateLabel(normalizedLocale, startDate)} â€“ ${getDateLabel(normalizedLocale, endDate)}`;\n    }\n    return renderSelectedAbsoluteRangeAriaLive(getDateLabel(normalizedLocale, startDate), getDateLabel(normalizedLocale, endDate));\n  };\n  const onSelectDateHandler = selectedDate => {\n    const {\n      start,\n      end\n    } = value;\n    let newStart = undefined;\n    let newEnd = undefined;\n    let announcement = '';\n    // If both fields are empty, we set the start date\n    if (!start.date && !end.date) {\n      newStart = startOfDay(selectedDate);\n      announcement = announceStart(newStart);\n    }\n    // If both fields are set, we start new\n    else if (start.date && end.date) {\n      newStart = startOfDay(selectedDate);\n      newEnd = null;\n      announcement = announceStart(newStart);\n    }\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    else if (start.date && !end.date) {\n      const parsedStartDate = parseDate(start.date);\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(selectedDate);\n        newEnd = endOfDay(parsedStartDate);\n        announcement = announceStart(newStart) + announceRange(newStart, newEnd);\n      } else {\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);\n      }\n    }\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    else if (!start.date && end.date) {\n      const existingEndDate = parseDate(end.date);\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(existingEndDate);\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(newStart, newEnd);\n      } else {\n        newStart = startOfDay(selectedDate);\n        announcement = announceStart(newStart) + announceRange(newStart, existingEndDate);\n      }\n    }\n    const formatValue = (date, previous, includeTime) => {\n      if (date === null) {\n        // explicitly reset to empty\n        return {\n          date: '',\n          time: ''\n        };\n      } else if (date === undefined) {\n        // keep old value\n        return previous;\n      }\n      if (!includeTime) {\n        return {\n          date: formatDate(date),\n          time: ''\n        };\n      }\n      return splitDateTime(formatDateTime(date));\n    };\n    setValue({\n      start: formatValue(newStart, value.start, !hideTime),\n      end: formatValue(newEnd, value.end, !hideTime)\n    });\n    setAnnouncement(announcement);\n  };\n  const onHeaderChangePageHandler = amount => {\n    const addPageFn = isMonthPicker ? addYears : addMonths;\n    const getBaseFn = isMonthPicker ? getBaseMonth : getBaseDay;\n    const newBasePage = addPageFn(currentPage, amount);\n    setCurrentPage(newBasePage);\n    const newBaseDate = getBaseFn(newBasePage, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n  const onChangeStartDate = value => {\n    setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      start: Object.assign(Object.assign({}, oldValue.start), {\n        date: value\n      })\n    }));\n    updateCurrentPage(value);\n  };\n  const interceptedSetValue = newValue => {\n    setValue(oldValue => {\n      const updated = typeof newValue === 'function' ? newValue(oldValue) : newValue;\n      updateCurrentPage(updated.start.date);\n      return updated;\n    });\n  };\n  const headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: clsx(styles['calendar-container'], {\n      [styles['one-grid']]: isSingleGrid\n    })\n  }, React.createElement(SpaceBetween, {\n    size: \"s\"\n  }, React.createElement(\"div\", {\n    className: clsx(styles.calendar, {\n      [styles['one-grid']]: isSingleGrid\n    })\n  }, React.createElement(CalendarHeader, {\n    granularity: granularity,\n    baseDate: currentPage,\n    locale: normalizedLocale,\n    onChangePage: onHeaderChangePageHandler,\n    previousPageLabel: isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousYearAriaLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.previousMonthAriaLabel,\n    nextPageLabel: isMonthPicker ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextYearAriaLabel : i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.nextMonthAriaLabel,\n    isSingleGrid: isSingleGrid,\n    headingIdPrefix: headingIdPrefix\n  }), React.createElement(Grids, {\n    granularity: granularity,\n    isSingleGrid: isSingleGrid,\n    locale: normalizedLocale,\n    baseDate: currentPage,\n    focusedDate: focusedDate,\n    onFocusedDateChange: setFocusedDate,\n    isDateEnabled: isDateEnabled,\n    dateDisabledReason: dateDisabledReason,\n    onSelectDate: onSelectDateHandler,\n    onPageChange: setCurrentPage,\n    startOfWeek: normalizedStartOfWeek,\n    todayAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.todayAriaLabel,\n    currentMonthAriaLabel: i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.currentMonthAriaLabel,\n    selectedStartDate: ((_a = value === null || value === void 0 ? void 0 : value.start) === null || _a === void 0 ? void 0 : _a.date) ? parseDate(value.start.date, !isMonthPicker) : null,\n    selectedEndDate: ((_b = value === null || value === void 0 ? void 0 : value.end) === null || _b === void 0 ? void 0 : _b.date) ? parseDate(value.end.date, !isMonthPicker) : null,\n    headingIdPrefix: headingIdPrefix\n  })), React.createElement(RangeInputs, {\n    startDate: value.start.date,\n    onChangeStartDate: onChangeStartDate,\n    startTime: value.start.time,\n    onChangeStartTime: value => setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      start: Object.assign(Object.assign({}, oldValue.start), {\n        time: value\n      })\n    })),\n    endDate: value.end.date,\n    onChangeEndDate: value => setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      end: Object.assign(Object.assign({}, oldValue.end), {\n        date: value\n      })\n    })),\n    endTime: value.end.time,\n    onChangeEndTime: value => setValue(oldValue => Object.assign(Object.assign({}, oldValue), {\n      end: Object.assign(Object.assign({}, oldValue.end), {\n        time: value\n      })\n    })),\n    i18nStrings: i18nStrings,\n    dateOnly: dateOnly,\n    timeInputFormat: timeInputFormat,\n    granularity: granularity\n  }), customAbsoluteRangeControl && React.createElement(\"div\", null, customAbsoluteRangeControl(value, interceptedSetValue)))), React.createElement(InternalLiveRegion, {\n    className: testutilStyles['calendar-aria-live'],\n    hidden: true,\n    tagName: \"span\"\n  }, announcement));\n}","map":{"version":3,"names":["React","useState","clsx","addMonths","addYears","endOfDay","isAfter","isBefore","isSameMonth","isSameYear","startOfDay","startOfMonth","startOfYear","getDateLabel","renderTimeLabel","getBaseDay","getBaseMonth","useInternalI18n","useMobile","useUniqueId","formatDate","formatDateTime","parseDate","splitDateTime","normalizeLocale","normalizeStartOfWeek","InternalLiveRegion","SpaceBetween","Grids","CalendarHeader","RangeInputs","findDateToFocus","findMonthToDisplay","findMonthToFocus","findYearToDisplay","styles","testutilStyles","DateRangePickerCalendar","value","setValue","locale","startOfWeek","isDateEnabled","dateDisabledReason","i18nStrings","dateOnly","timeInputFormat","customAbsoluteRangeControl","granularity","isSingleGrid","isMonthPicker","hideTime","normalizedLocale","normalizedStartOfWeek","i18n","announcement","setAnnouncement","findPageToDisplay","isSamePage","addPage","startOfPage","findItemToFocus","currentPage","setCurrentPage","focusedDate","setFocusedDate","start","date","startDate","updateCurrentPage","length","newCurrentPage","announceStart","startDateLabel","startTimeLabel","announceEnd","endDate","endDateLabel","endTimeLabel","renderSelectedAbsoluteRangeAriaLive","format","announceRange","onSelectDateHandler","selectedDate","end","newStart","undefined","newEnd","parsedStartDate","existingEndDate","formatValue","previous","includeTime","time","onHeaderChangePageHandler","amount","addPageFn","getBaseFn","newBasePage","newBaseDate","onChangeStartDate","oldValue","Object","assign","interceptedSetValue","newValue","updated","headingIdPrefix","createElement","Fragment","className","size","calendar","baseDate","onChangePage","previousPageLabel","previousYearAriaLabel","previousMonthAriaLabel","nextPageLabel","nextYearAriaLabel","nextMonthAriaLabel","onFocusedDateChange","onSelectDate","onPageChange","todayAriaLabel","currentMonthAriaLabel","selectedStartDate","_a","selectedEndDate","_b","startTime","onChangeStartTime","onChangeEndDate","endTime","onChangeEndTime","hidden","tagName"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/date-range-picker/calendar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport {\n  addMonths,\n  addYears,\n  endOfDay,\n  isAfter,\n  isBefore,\n  isSameMonth,\n  isSameYear,\n  startOfDay,\n  startOfMonth,\n  startOfYear,\n} from 'date-fns';\n\nimport { CalendarProps } from '../../calendar/interfaces';\nimport { getDateLabel, renderTimeLabel } from '../../calendar/utils/intl';\nimport { getBaseDay } from '../../calendar/utils/navigation-day';\nimport { getBaseMonth } from '../../calendar/utils/navigation-month';\nimport { useInternalI18n } from '../../i18n/context.js';\nimport { BaseComponentProps } from '../../internal/base-component';\nimport { useMobile } from '../../internal/hooks/use-mobile/index.js';\nimport { useUniqueId } from '../../internal/hooks/use-unique-id';\nimport { formatDate, formatDateTime, parseDate, splitDateTime } from '../../internal/utils/date-time';\nimport { normalizeLocale, normalizeStartOfWeek } from '../../internal/utils/locale';\nimport InternalLiveRegion from '../../live-region/internal';\nimport SpaceBetween from '../../space-between/internal';\nimport { TimeInputProps } from '../../time-input/interfaces';\nimport { DateRangePickerProps, RangeCalendarI18nStrings } from '../interfaces';\nimport { Grids } from './grids';\nimport CalendarHeader from './header';\nimport RangeInputs from './range-inputs.js';\nimport { findDateToFocus, findMonthToDisplay, findMonthToFocus, findYearToDisplay } from './utils';\n\nimport styles from '../styles.css.js';\nimport testutilStyles from '../test-classes/styles.css.js';\n\nexport interface DateRangePickerCalendarProps extends BaseComponentProps, Pick<CalendarProps, 'granularity'> {\n  value: DateRangePickerProps.PendingAbsoluteValue;\n  setValue: React.Dispatch<React.SetStateAction<DateRangePickerProps.PendingAbsoluteValue>>;\n  locale?: string;\n  startOfWeek?: number;\n  isDateEnabled?: (date: Date) => boolean;\n  dateDisabledReason?: (date: Date) => string;\n  i18nStrings?: RangeCalendarI18nStrings;\n  dateOnly?: boolean;\n  timeInputFormat?: TimeInputProps.Format;\n  customAbsoluteRangeControl: DateRangePickerProps.AbsoluteRangeControl | undefined;\n}\n\nexport default function DateRangePickerCalendar({\n  value,\n  setValue,\n  locale = '',\n  startOfWeek,\n  isDateEnabled = () => true,\n  dateDisabledReason = () => '',\n  i18nStrings,\n  dateOnly = false,\n  timeInputFormat = 'hh:mm:ss',\n  customAbsoluteRangeControl,\n  granularity = 'day',\n}: DateRangePickerCalendarProps) {\n  const isSingleGrid = useMobile();\n  const isMonthPicker = granularity === 'month';\n  const hideTime = isMonthPicker || dateOnly;\n  const normalizedLocale = normalizeLocale('DateRangePicker', locale);\n  const normalizedStartOfWeek = normalizeStartOfWeek(startOfWeek, normalizedLocale);\n  const i18n = useInternalI18n('date-range-picker');\n\n  const [announcement, setAnnouncement] = useState('');\n  const findPageToDisplay = isMonthPicker ? findYearToDisplay : findMonthToDisplay;\n  const isSamePage = isMonthPicker ? isSameYear : isSameMonth;\n  const addPage = isMonthPicker ? addYears : addMonths;\n  const startOfPage = isMonthPicker ? startOfYear : startOfMonth;\n  const findItemToFocus = isMonthPicker ? findMonthToFocus : findDateToFocus;\n  const [currentPage, setCurrentPage] = useState(() => findPageToDisplay(value, isSingleGrid));\n  const [focusedDate, setFocusedDate] = useState<Date | null>(() => {\n    if (value.start.date) {\n      const startDate = parseDate(value.start.date);\n      if (isSamePage(startDate, currentPage)) {\n        return startDate;\n      }\n      if (!isSingleGrid && isSamePage(startDate, addPage(currentPage, -1))) {\n        return startDate;\n      }\n    }\n    return findItemToFocus(parseDate(value.start.date), currentPage, isDateEnabled);\n  });\n\n  const updateCurrentPage = (startDate: string) => {\n    if ((isMonthPicker && startDate.length >= 4) || startDate.length >= 8) {\n      const newCurrentPage = startOfPage(parseDate(startDate));\n      setCurrentPage(isSingleGrid ? newCurrentPage : addPage(newCurrentPage, 1));\n    }\n  };\n\n  // recommended to include the start/end time announced with the selection\n  // because the user is not aware of the fact that a start/end time is also set as soon as they select a date\n  const announceStart = (startDate: Date) => {\n    return `${i18n('i18nStrings.startDateLabel', i18nStrings?.startDateLabel)}, ${getDateLabel(normalizedLocale, startDate)}${\n      hideTime\n        ? ''\n        : `, ${i18n('i18nStrings.startTimeLabel', i18nStrings?.startTimeLabel)}, ${renderTimeLabel(\n            normalizedLocale,\n            startDate,\n            timeInputFormat\n          )}`\n    }. `;\n  };\n\n  const announceEnd = (endDate: Date) => {\n    return `${i18n('i18nStrings.endDateLabel', i18nStrings?.endDateLabel)}, ${getDateLabel(normalizedLocale, endDate)}${\n      hideTime\n        ? ''\n        : `, ${i18n('i18nStrings.endTimeLabel', i18nStrings?.endTimeLabel)}, ${renderTimeLabel(\n            normalizedLocale,\n            endDate,\n            timeInputFormat\n          )}`\n    }. `;\n  };\n\n  const renderSelectedAbsoluteRangeAriaLive = i18n(\n    'i18nStrings.renderSelectedAbsoluteRangeAriaLive',\n    i18nStrings?.renderSelectedAbsoluteRangeAriaLive,\n    format => (startDate, endDate) => format({ startDate, endDate })\n  );\n\n  const announceRange = (startDate: Date, endDate: Date) => {\n    if (!renderSelectedAbsoluteRangeAriaLive) {\n      return `${getDateLabel(normalizedLocale, startDate)} â€“ ${getDateLabel(normalizedLocale, endDate)}`;\n    }\n    return renderSelectedAbsoluteRangeAriaLive(\n      getDateLabel(normalizedLocale, startDate),\n      getDateLabel(normalizedLocale, endDate)\n    );\n  };\n\n  const onSelectDateHandler = (selectedDate: Date) => {\n    const { start, end } = value;\n    let newStart: Date | undefined = undefined;\n    let newEnd: Date | null | undefined = undefined;\n    let announcement = '';\n\n    // If both fields are empty, we set the start date\n    if (!start.date && !end.date) {\n      newStart = startOfDay(selectedDate);\n      announcement = announceStart(newStart);\n    }\n    // If both fields are set, we start new\n    else if (start.date && end.date) {\n      newStart = startOfDay(selectedDate);\n      newEnd = null;\n      announcement = announceStart(newStart);\n    }\n    // If only the END date is empty, we fill it (and swap dates if needed)\n    else if (start.date && !end.date) {\n      const parsedStartDate = parseDate(start.date);\n\n      if (isBefore(selectedDate, parsedStartDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(selectedDate);\n        newEnd = endOfDay(parsedStartDate);\n        announcement = announceStart(newStart) + announceRange(newStart, newEnd);\n      } else {\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(parsedStartDate, newEnd);\n      }\n    }\n    // If only the START date is empty, we fill it (and swap dates if needed)\n    else if (!start.date && end.date) {\n      const existingEndDate = parseDate(end.date);\n\n      if (isAfter(selectedDate, existingEndDate)) {\n        // The user has selected the range backwards, so we swap start and end\n        newStart = startOfDay(existingEndDate);\n        newEnd = endOfDay(selectedDate);\n        announcement = announceEnd(newEnd) + announceRange(newStart, newEnd);\n      } else {\n        newStart = startOfDay(selectedDate);\n        announcement = announceStart(newStart) + announceRange(newStart, existingEndDate);\n      }\n    }\n\n    const formatValue = (\n      date: Date | null | undefined,\n      previous: DateRangePickerProps.DateTimeStrings,\n      includeTime: boolean\n    ): DateRangePickerProps.DateTimeStrings => {\n      if (date === null) {\n        // explicitly reset to empty\n        return { date: '', time: '' };\n      } else if (date === undefined) {\n        // keep old value\n        return previous;\n      }\n      if (!includeTime) {\n        return {\n          date: formatDate(date),\n          time: '',\n        };\n      }\n      return splitDateTime(formatDateTime(date));\n    };\n\n    setValue({\n      start: formatValue(newStart, value.start, !hideTime),\n      end: formatValue(newEnd, value.end, !hideTime),\n    });\n    setAnnouncement(announcement);\n  };\n\n  const onHeaderChangePageHandler = (amount: number) => {\n    const addPageFn = isMonthPicker ? addYears : addMonths;\n    const getBaseFn = isMonthPicker ? getBaseMonth : getBaseDay;\n    const newBasePage = addPageFn(currentPage, amount);\n    setCurrentPage(newBasePage);\n    const newBaseDate = getBaseFn(newBasePage, isDateEnabled);\n    setFocusedDate(newBaseDate);\n  };\n\n  const onChangeStartDate = (value: string) => {\n    setValue((oldValue: DateRangePickerProps.PendingAbsoluteValue) => ({\n      ...oldValue,\n      start: { ...oldValue.start, date: value },\n    }));\n    updateCurrentPage(value);\n  };\n\n  const interceptedSetValue: DateRangePickerCalendarProps['setValue'] = newValue => {\n    setValue(oldValue => {\n      const updated = typeof newValue === 'function' ? newValue(oldValue) : newValue;\n      updateCurrentPage(updated.start.date);\n      return updated;\n    });\n  };\n\n  const headingIdPrefix = useUniqueId('date-range-picker-calendar-heading');\n\n  return (\n    <>\n      <div\n        className={clsx(styles['calendar-container'], {\n          [styles['one-grid']]: isSingleGrid,\n        })}\n      >\n        <SpaceBetween size=\"s\">\n          <div\n            className={clsx(styles.calendar, {\n              [styles['one-grid']]: isSingleGrid,\n            })}\n          >\n            <CalendarHeader\n              granularity={granularity}\n              baseDate={currentPage}\n              locale={normalizedLocale}\n              onChangePage={onHeaderChangePageHandler}\n              previousPageLabel={\n                isMonthPicker ? i18nStrings?.previousYearAriaLabel : i18nStrings?.previousMonthAriaLabel\n              }\n              nextPageLabel={isMonthPicker ? i18nStrings?.nextYearAriaLabel : i18nStrings?.nextMonthAriaLabel}\n              isSingleGrid={isSingleGrid}\n              headingIdPrefix={headingIdPrefix}\n            />\n\n            <Grids\n              granularity={granularity}\n              isSingleGrid={isSingleGrid}\n              locale={normalizedLocale}\n              baseDate={currentPage}\n              focusedDate={focusedDate}\n              onFocusedDateChange={setFocusedDate}\n              isDateEnabled={isDateEnabled}\n              dateDisabledReason={dateDisabledReason}\n              onSelectDate={onSelectDateHandler}\n              onPageChange={setCurrentPage}\n              startOfWeek={normalizedStartOfWeek}\n              todayAriaLabel={i18nStrings?.todayAriaLabel}\n              currentMonthAriaLabel={i18nStrings?.currentMonthAriaLabel}\n              selectedStartDate={value?.start?.date ? parseDate(value.start.date, !isMonthPicker) : null}\n              selectedEndDate={value?.end?.date ? parseDate(value.end.date, !isMonthPicker) : null}\n              headingIdPrefix={headingIdPrefix}\n            />\n          </div>\n\n          <RangeInputs\n            startDate={value.start.date}\n            onChangeStartDate={onChangeStartDate}\n            startTime={value.start.time}\n            onChangeStartTime={value =>\n              setValue(oldValue => ({ ...oldValue, start: { ...oldValue.start, time: value } }))\n            }\n            endDate={value.end.date}\n            onChangeEndDate={value => setValue(oldValue => ({ ...oldValue, end: { ...oldValue.end, date: value } }))}\n            endTime={value.end.time}\n            onChangeEndTime={value => setValue(oldValue => ({ ...oldValue, end: { ...oldValue.end, time: value } }))}\n            i18nStrings={i18nStrings}\n            dateOnly={dateOnly}\n            timeInputFormat={timeInputFormat}\n            granularity={granularity}\n          />\n          {customAbsoluteRangeControl && <div>{customAbsoluteRangeControl(value, interceptedSetValue)}</div>}\n        </SpaceBetween>\n      </div>\n      {/* Can't use message here because the contents are checked in tests */}\n      <InternalLiveRegion className={testutilStyles['calendar-aria-live']} hidden={true} tagName=\"span\">\n        {announcement}\n      </InternalLiveRegion>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}