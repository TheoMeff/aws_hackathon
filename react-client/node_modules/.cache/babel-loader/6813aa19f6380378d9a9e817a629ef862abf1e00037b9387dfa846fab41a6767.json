{"ast":null,"code":"export function setDayIndex(date, dayIndex) {\n  const diff = dayIndex - date.getDay();\n  date.setDate(date.getDate() + diff);\n}\nexport function renderDayName(locale, dayIndex, mode) {\n  const tempDate = new Date();\n  setDayIndex(tempDate, dayIndex);\n  return tempDate.toLocaleDateString(locale, {\n    weekday: mode\n  });\n}\nexport function renderMonthAndYear(locale, baseDate) {\n  const result = baseDate.toLocaleDateString(locale, {\n    year: 'numeric',\n    month: 'long'\n  });\n  return result;\n}\nexport function renderYear(locale, date) {\n  return date.toLocaleDateString(locale, {\n    year: 'numeric'\n  });\n}\nconst dayLabelCache = new Map();\nexport function getDateLabel(locale, date, mode = 'full') {\n  const cacheKey = locale + date.getTime() + mode;\n  const cachedValue = dayLabelCache.get(cacheKey);\n  if (cachedValue) {\n    return cachedValue;\n  }\n  const value = date.toLocaleDateString(locale, {\n    weekday: mode === 'full' ? 'long' : undefined,\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric'\n  });\n  dayLabelCache.set(cacheKey, value);\n  return value;\n}\nexport function renderTimeLabel(locale, date, format) {\n  let options = {};\n  if (format === 'hh') {\n    options = {\n      hour: '2-digit'\n    };\n  }\n  if (format === 'hh:mm') {\n    options = {\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n  }\n  const value = date.toLocaleTimeString(locale, options);\n  return value;\n}\nexport function renderDateAnnouncement({\n  date,\n  isCurrent,\n  locale,\n  granularity = 'day',\n  currentLabel\n}) {\n  const formattedDate = granularity === 'month' ? renderMonthAndYear(locale, date) : getDateLabel(locale, date, 'short');\n  if (isCurrent && currentLabel) {\n    return `${formattedDate}. ${currentLabel}`;\n  }\n  return formattedDate;\n}","map":{"version":3,"names":["setDayIndex","date","dayIndex","diff","getDay","setDate","getDate","renderDayName","locale","mode","tempDate","Date","toLocaleDateString","weekday","renderMonthAndYear","baseDate","result","year","month","renderYear","dayLabelCache","Map","getDateLabel","cacheKey","getTime","cachedValue","get","value","undefined","day","set","renderTimeLabel","format","options","hour","minute","toLocaleTimeString","renderDateAnnouncement","isCurrent","granularity","currentLabel","formattedDate"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/date-range-picker/calendar/grids/intl.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { DateRangePickerProps } from '../../interfaces';\n\nexport function setDayIndex(date: Date, dayIndex: number): void {\n  const diff = dayIndex - date.getDay();\n  date.setDate(date.getDate() + diff);\n}\n\nexport function renderDayName(locale: string, dayIndex: number, mode: 'short' | 'long'): string {\n  const tempDate = new Date();\n  setDayIndex(tempDate, dayIndex);\n  return tempDate.toLocaleDateString(locale, { weekday: mode });\n}\n\nexport function renderMonthAndYear(locale: string, baseDate: Date): string {\n  const result = baseDate.toLocaleDateString(locale, {\n    year: 'numeric',\n    month: 'long',\n  });\n\n  return result;\n}\n\nexport function renderYear(locale: string, date: Date): string {\n  return date.toLocaleDateString(locale, {\n    year: 'numeric',\n  });\n}\n\nconst dayLabelCache = new Map<string, string>();\nexport function getDateLabel(locale: string, date: Date, mode: 'full' | 'short' = 'full'): string {\n  const cacheKey = locale + date.getTime() + mode;\n  const cachedValue = dayLabelCache.get(cacheKey);\n  if (cachedValue) {\n    return cachedValue;\n  }\n  const value = date.toLocaleDateString(locale, {\n    weekday: mode === 'full' ? 'long' : undefined,\n    month: 'long',\n    day: 'numeric',\n    year: 'numeric',\n  });\n  dayLabelCache.set(cacheKey, value);\n  return value;\n}\n\nexport function renderTimeLabel(locale: string, date: Date, format?: DateRangePickerProps['timeInputFormat']): string {\n  let options: Intl.DateTimeFormatOptions = {};\n  if (format === 'hh') {\n    options = { hour: '2-digit' };\n  }\n  if (format === 'hh:mm') {\n    options = { hour: '2-digit', minute: '2-digit' };\n  }\n  const value = date.toLocaleTimeString(locale, options);\n  return value;\n}\n\ninterface RenderDateAnnouncementProps {\n  date: Date;\n  isCurrent: boolean;\n  locale: string;\n  granularity?: DateRangePickerProps['granularity'];\n  currentLabel?: string;\n}\n\nexport function renderDateAnnouncement({\n  date,\n  isCurrent,\n  locale,\n  granularity = 'day',\n  currentLabel,\n}: RenderDateAnnouncementProps): string {\n  const formattedDate =\n    granularity === 'month' ? renderMonthAndYear(locale, date) : getDateLabel(locale, date, 'short');\n\n  if (isCurrent && currentLabel) {\n    return `${formattedDate}. ${currentLabel}`;\n  }\n\n  return formattedDate;\n}\n"],"mappings":"AAIA,OAAM,SAAUA,WAAWA,CAACC,IAAU,EAAEC,QAAgB;EACtD,MAAMC,IAAI,GAAGD,QAAQ,GAAGD,IAAI,CAACG,MAAM,EAAE;EACrCH,IAAI,CAACI,OAAO,CAACJ,IAAI,CAACK,OAAO,EAAE,GAAGH,IAAI,CAAC;AACrC;AAEA,OAAM,SAAUI,aAAaA,CAACC,MAAc,EAAEN,QAAgB,EAAEO,IAAsB;EACpF,MAAMC,QAAQ,GAAG,IAAIC,IAAI,EAAE;EAC3BX,WAAW,CAACU,QAAQ,EAAER,QAAQ,CAAC;EAC/B,OAAOQ,QAAQ,CAACE,kBAAkB,CAACJ,MAAM,EAAE;IAAEK,OAAO,EAAEJ;EAAI,CAAE,CAAC;AAC/D;AAEA,OAAM,SAAUK,kBAAkBA,CAACN,MAAc,EAAEO,QAAc;EAC/D,MAAMC,MAAM,GAAGD,QAAQ,CAACH,kBAAkB,CAACJ,MAAM,EAAE;IACjDS,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE;GACR,CAAC;EAEF,OAAOF,MAAM;AACf;AAEA,OAAM,SAAUG,UAAUA,CAACX,MAAc,EAAEP,IAAU;EACnD,OAAOA,IAAI,CAACW,kBAAkB,CAACJ,MAAM,EAAE;IACrCS,IAAI,EAAE;GACP,CAAC;AACJ;AAEA,MAAMG,aAAa,GAAG,IAAIC,GAAG,EAAkB;AAC/C,OAAM,SAAUC,YAAYA,CAACd,MAAc,EAAEP,IAAU,EAAEQ,IAAA,GAAyB,MAAM;EACtF,MAAMc,QAAQ,GAAGf,MAAM,GAAGP,IAAI,CAACuB,OAAO,EAAE,GAAGf,IAAI;EAC/C,MAAMgB,WAAW,GAAGL,aAAa,CAACM,GAAG,CAACH,QAAQ,CAAC;EAC/C,IAAIE,WAAW,EAAE;IACf,OAAOA,WAAW;;EAEpB,MAAME,KAAK,GAAG1B,IAAI,CAACW,kBAAkB,CAACJ,MAAM,EAAE;IAC5CK,OAAO,EAAEJ,IAAI,KAAK,MAAM,GAAG,MAAM,GAAGmB,SAAS;IAC7CV,KAAK,EAAE,MAAM;IACbW,GAAG,EAAE,SAAS;IACdZ,IAAI,EAAE;GACP,CAAC;EACFG,aAAa,CAACU,GAAG,CAACP,QAAQ,EAAEI,KAAK,CAAC;EAClC,OAAOA,KAAK;AACd;AAEA,OAAM,SAAUI,eAAeA,CAACvB,MAAc,EAAEP,IAAU,EAAE+B,MAAgD;EAC1G,IAAIC,OAAO,GAA+B,EAAE;EAC5C,IAAID,MAAM,KAAK,IAAI,EAAE;IACnBC,OAAO,GAAG;MAAEC,IAAI,EAAE;IAAS,CAAE;;EAE/B,IAAIF,MAAM,KAAK,OAAO,EAAE;IACtBC,OAAO,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,MAAM,EAAE;IAAS,CAAE;;EAElD,MAAMR,KAAK,GAAG1B,IAAI,CAACmC,kBAAkB,CAAC5B,MAAM,EAAEyB,OAAO,CAAC;EACtD,OAAON,KAAK;AACd;AAUA,OAAM,SAAUU,sBAAsBA,CAAC;EACrCpC,IAAI;EACJqC,SAAS;EACT9B,MAAM;EACN+B,WAAW,GAAG,KAAK;EACnBC;AAAY,CACgB;EAC5B,MAAMC,aAAa,GACjBF,WAAW,KAAK,OAAO,GAAGzB,kBAAkB,CAACN,MAAM,EAAEP,IAAI,CAAC,GAAGqB,YAAY,CAACd,MAAM,EAAEP,IAAI,EAAE,OAAO,CAAC;EAElG,IAAIqC,SAAS,IAAIE,YAAY,EAAE;IAC7B,OAAO,GAAGC,aAAa,KAAKD,YAAY,EAAE;;EAG5C,OAAOC,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}