{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useAppLayoutToolbarDesignEnabled } from '../app-layout/utils/feature-flags';\nimport InternalButton from '../button/internal';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport sharedStyles from '../app-layout/resize/styles.css.js';\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\nexport function SplitPanelContentSide({\n  style,\n  baseProps,\n  splitPanelRef,\n  toggleRef,\n  header,\n  children,\n  resizeHandle,\n  isOpen,\n  cappedSize,\n  openButtonAriaLabel,\n  panelHeaderId,\n  onToggle,\n  closeBehavior\n}) {\n  const {\n    topOffset,\n    bottomOffset,\n    animationDisabled\n  } = useSplitPanelContext();\n  const isRefresh = useVisualRefresh();\n  const isToolbar = useAppLayoutToolbarDesignEnabled();\n  const disableAnimation = animationDisabled || closeBehavior === 'hide' && !isOpen;\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.drawer, styles['position-side'], testUtilStyles.root, {\n      [sharedStyles['with-motion-horizontal']]: !disableAnimation,\n      [testUtilStyles['open-position-side']]: isOpen,\n      [styles['drawer-closed']]: !isOpen,\n      [styles['with-toolbar']]: isToolbar,\n      [styles.refresh]: isRefresh\n    }),\n    style: Object.assign({\n      width: isOpen ? cappedSize : isRefresh ? '0px' : undefined,\n      maxWidth: isRefresh ? '100%' : undefined\n    }, style),\n    ref: splitPanelRef\n  }), React.createElement(\"div\", {\n    className: styles['drawer-content-side'],\n    style: {\n      top: topOffset,\n      bottom: bottomOffset\n    },\n    onClick: () => !isOpen && onToggle(),\n    \"aria-labelledby\": panelHeaderId,\n    role: \"region\"\n  }, isOpen ? React.createElement(\"div\", {\n    className: clsx(styles['slider-wrapper-side'], isToolbar && styles['with-toolbar'])\n  }, resizeHandle) : closeBehavior === 'hide' ? null : React.createElement(InternalButton, {\n    className: clsx(testUtilStyles['open-button'], styles['open-button-side']),\n    iconName: \"angle-left\",\n    variant: \"icon\",\n    formAction: \"none\",\n    ariaLabel: openButtonAriaLabel,\n    ariaExpanded: isOpen,\n    //toggleRef should only be assigned when there is no other trigger-buttons\n    ref: isRefresh || isToolbar ? null : toggleRef\n  }), React.createElement(\"div\", {\n    className: clsx(styles['content-side'], isToolbar && styles['with-toolbar']),\n    \"aria-hidden\": !isOpen,\n    style: {\n      width: isToolbar ? cappedSize : '0px'\n    }\n  }, React.createElement(\"div\", {\n    className: styles['pane-header-wrapper-side']\n  }, header), React.createElement(\"div\", {\n    className: styles['pane-content-wrapper-side']\n  }, children))));\n}","map":{"version":3,"names":["React","clsx","useAppLayoutToolbarDesignEnabled","InternalButton","useSplitPanelContext","useVisualRefresh","sharedStyles","styles","testUtilStyles","SplitPanelContentSide","style","baseProps","splitPanelRef","toggleRef","header","children","resizeHandle","isOpen","cappedSize","openButtonAriaLabel","panelHeaderId","onToggle","closeBehavior","topOffset","bottomOffset","animationDisabled","isRefresh","isToolbar","disableAnimation","createElement","Object","assign","className","drawer","root","refresh","width","undefined","maxWidth","ref","top","bottom","onClick","role","iconName","variant","formAction","ariaLabel","ariaExpanded"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/split-panel/side.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { useAppLayoutToolbarDesignEnabled } from '../app-layout/utils/feature-flags';\nimport { ButtonProps } from '../button/interfaces';\nimport InternalButton from '../button/internal';\nimport { useSplitPanelContext } from '../internal/context/split-panel-context';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { SplitPanelContentProps, SplitPanelProps } from './interfaces';\n\nimport sharedStyles from '../app-layout/resize/styles.css.js';\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\n\ninterface SplitPanelContentSideProps extends SplitPanelContentProps {\n  closeBehavior: SplitPanelProps['closeBehavior'];\n  openButtonAriaLabel?: string;\n  toggleRef: React.RefObject<ButtonProps.Ref>;\n}\n\nexport function SplitPanelContentSide({\n  style,\n  baseProps,\n  splitPanelRef,\n  toggleRef,\n  header,\n  children,\n  resizeHandle,\n  isOpen,\n  cappedSize,\n  openButtonAriaLabel,\n  panelHeaderId,\n  onToggle,\n  closeBehavior,\n}: SplitPanelContentSideProps) {\n  const { topOffset, bottomOffset, animationDisabled } = useSplitPanelContext();\n  const isRefresh = useVisualRefresh();\n  const isToolbar = useAppLayoutToolbarDesignEnabled();\n  const disableAnimation = animationDisabled || (closeBehavior === 'hide' && !isOpen);\n  return (\n    <div\n      {...baseProps}\n      className={clsx(baseProps.className, styles.drawer, styles['position-side'], testUtilStyles.root, {\n        [sharedStyles['with-motion-horizontal']]: !disableAnimation,\n        [testUtilStyles['open-position-side']]: isOpen,\n        [styles['drawer-closed']]: !isOpen,\n        [styles['with-toolbar']]: isToolbar,\n        [styles.refresh]: isRefresh,\n      })}\n      style={{\n        width: isOpen ? cappedSize : isRefresh ? '0px' : undefined,\n        maxWidth: isRefresh ? '100%' : undefined,\n        ...style,\n      }}\n      ref={splitPanelRef}\n    >\n      <div\n        className={styles['drawer-content-side']}\n        style={{\n          top: topOffset,\n          bottom: bottomOffset,\n        }}\n        onClick={() => !isOpen && onToggle()}\n        aria-labelledby={panelHeaderId}\n        role=\"region\"\n      >\n        {isOpen ? (\n          <div className={clsx(styles['slider-wrapper-side'], isToolbar && styles['with-toolbar'])}>{resizeHandle}</div>\n        ) : closeBehavior === 'hide' ? null : (\n          <InternalButton\n            className={clsx(testUtilStyles['open-button'], styles['open-button-side'])}\n            iconName=\"angle-left\"\n            variant=\"icon\"\n            formAction=\"none\"\n            ariaLabel={openButtonAriaLabel}\n            ariaExpanded={isOpen}\n            //toggleRef should only be assigned when there is no other trigger-buttons\n            ref={isRefresh || isToolbar ? null : toggleRef}\n          />\n        )}\n        <div\n          className={clsx(styles['content-side'], isToolbar && styles['with-toolbar'])}\n          aria-hidden={!isOpen}\n          style={{ width: isToolbar ? cappedSize : '0px' }} // to prevent text wrapping upon entering\n        >\n          <div className={styles['pane-header-wrapper-side']}>{header}</div>\n          <div className={styles['pane-content-wrapper-side']}>{children}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}