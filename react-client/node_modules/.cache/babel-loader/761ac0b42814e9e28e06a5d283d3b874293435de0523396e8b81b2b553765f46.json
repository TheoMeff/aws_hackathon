{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nimport { createWidgetizedComponent } from '../../../internal/widgets';\nimport { BreadcrumbsSlot } from '../skeleton/breadcrumbs';\nimport { ToolbarSkeleton } from '../skeleton/slot-skeletons';\nimport { ToolbarSlot } from '../skeleton/slot-wrappers';\nimport { DrawerTriggers } from './drawer-triggers';\nimport TriggerButton from './trigger-button';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nexport function AppLayoutToolbarImplementation({\n  appLayoutInternals,\n  // the value could be undefined if this component is loaded as a widget by a different app layout version\n  // not testable in a single-version setup\n  toolbarProps = {}\n}) {\n  var _a, _b, _c;\n  const {\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    verticalOffsets,\n    isMobile,\n    toolbarState,\n    setToolbarState,\n    setToolbarHeight\n  } = appLayoutInternals;\n  const {\n    ariaLabels,\n    activeDrawerId,\n    drawers,\n    drawersFocusRef,\n    onActiveDrawerChange,\n    globalDrawersFocusControl,\n    globalDrawers,\n    activeGlobalDrawersIds,\n    onActiveGlobalDrawersChange,\n    hasNavigation,\n    navigationOpen,\n    navigationFocusRef,\n    onNavigationToggle,\n    hasSplitPanel,\n    splitPanelFocusRef,\n    splitPanelToggleProps,\n    onSplitPanelToggle,\n    expandedDrawerId,\n    setExpandedDrawerId\n  } = toolbarProps;\n  // TODO: expose configuration property\n  const pinnedToolbar = true;\n  const drawerExpandedMode = !!expandedDrawerId;\n  const ref = useRef(null);\n  useResizeObserver(ref, entry => setToolbarHeight(entry.borderBoxHeight));\n  useEffect(() => {\n    return () => {\n      setToolbarHeight(0);\n    };\n    // unmount effect only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    let lastScrollY = window.scrollY;\n    /* istanbul ignore next not testable in JSDOM */\n    const updateScrollDirection = () => {\n      if (pinnedToolbar) {\n        setToolbarState('show');\n        return;\n      }\n      const scrollY = window.scrollY;\n      // 80 is an arbitrary number to have a pause before the toolbar scrolls out of view at the top of the page\n      const direction = scrollY > lastScrollY && scrollY > 80 ? 'hide' : 'show';\n      // 2 as a buffer to avoid mistaking minor accidental mouse moves as scroll\n      if (direction !== toolbarState && (scrollY - lastScrollY > 2 || scrollY - lastScrollY < -2)) {\n        setToolbarState(direction);\n      }\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n    };\n    window.addEventListener('scroll', updateScrollDirection);\n    return () => {\n      window.removeEventListener('scroll', updateScrollDirection);\n    };\n  }, [pinnedToolbar, setToolbarState, toolbarState]);\n  const anyPanelOpenInMobile = !!isMobile && (!!activeDrawerId || !!navigationOpen && !!hasNavigation);\n  useEffect(() => {\n    if (anyPanelOpenInMobile) {\n      document.body.classList.add(styles['block-body-scroll']);\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n    return () => {\n      document.body.classList.remove(styles['block-body-scroll']);\n    };\n  }, [anyPanelOpenInMobile]);\n  const toolbarHidden = toolbarState === 'hide' && !pinnedToolbar;\n  const navLandmarkAttributes = navigationOpen ? {\n    role: 'presentation'\n  } : {\n    role: 'navigation',\n    'aria-label': ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigation\n  };\n  return React.createElement(ToolbarSlot, {\n    ref: ref,\n    className: clsx(styles['universal-toolbar'], testutilStyles.toolbar, {\n      [testutilStyles['mobile-bar']]: isMobile,\n      [styles['toolbar-hidden']]: toolbarHidden\n    }),\n    style: {\n      insetBlockStart: toolbarHidden ? '-60px' : verticalOffsets.toolbar\n    }\n  }, React.createElement(\"div\", {\n    className: styles['toolbar-container']\n  }, hasNavigation && React.createElement(\"nav\", Object.assign({}, navLandmarkAttributes, {\n    className: clsx(styles['universal-toolbar-nav'])\n  }), React.createElement(TriggerButton, {\n    ariaLabel: (_a = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.navigationToggle) !== null && _a !== void 0 ? _a : undefined,\n    ariaExpanded: false,\n    iconName: \"menu\",\n    className: testutilStyles['navigation-toggle'],\n    onClick: () => {\n      if (setExpandedDrawerId) {\n        setExpandedDrawerId(null);\n      }\n      if (navigationOpen && expandedDrawerId) {\n        return;\n      }\n      onNavigationToggle === null || onNavigationToggle === void 0 ? void 0 : onNavigationToggle(!navigationOpen);\n    },\n    ref: navigationFocusRef,\n    selected: !drawerExpandedMode && navigationOpen,\n    disabled: anyPanelOpenInMobile\n  })), (breadcrumbs || discoveredBreadcrumbs) && React.createElement(\"div\", {\n    className: clsx(styles['universal-toolbar-breadcrumbs'], testutilStyles.breadcrumbs)\n  }, React.createElement(BreadcrumbsSlot, {\n    ownBreadcrumbs: appLayoutInternals.breadcrumbs,\n    discoveredBreadcrumbs: appLayoutInternals.discoveredBreadcrumbs\n  })), ((drawers === null || drawers === void 0 ? void 0 : drawers.length) || (globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.length) || hasSplitPanel && (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed)) && React.createElement(\"div\", {\n    className: clsx(styles['universal-toolbar-drawers'])\n  }, React.createElement(DrawerTriggers, {\n    ariaLabels: ariaLabels,\n    activeDrawerId: activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null,\n    drawers: (_b = drawers === null || drawers === void 0 ? void 0 : drawers.filter(item => !!item.trigger)) !== null && _b !== void 0 ? _b : [],\n    drawersFocusRef: drawersFocusRef,\n    onActiveDrawerChange: onActiveDrawerChange,\n    splitPanelToggleProps: (splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.displayed) ? splitPanelToggleProps : undefined,\n    splitPanelFocusRef: splitPanelFocusRef,\n    onSplitPanelToggle: onSplitPanelToggle,\n    disabled: anyPanelOpenInMobile,\n    globalDrawersFocusControl: globalDrawersFocusControl,\n    globalDrawers: (_c = globalDrawers === null || globalDrawers === void 0 ? void 0 : globalDrawers.filter(item => !!item.trigger)) !== null && _c !== void 0 ? _c : [],\n    activeGlobalDrawersIds: activeGlobalDrawersIds !== null && activeGlobalDrawersIds !== void 0 ? activeGlobalDrawersIds : [],\n    onActiveGlobalDrawersChange: onActiveGlobalDrawersChange,\n    expandedDrawerId: expandedDrawerId,\n    setExpandedDrawerId: setExpandedDrawerId\n  }))));\n}\nexport const createWidgetizedAppLayoutToolbar = createWidgetizedComponent(AppLayoutToolbarImplementation, ToolbarSkeleton);","map":{"version":3,"names":["React","useEffect","useRef","clsx","useResizeObserver","createWidgetizedComponent","BreadcrumbsSlot","ToolbarSkeleton","ToolbarSlot","DrawerTriggers","TriggerButton","testutilStyles","styles","AppLayoutToolbarImplementation","appLayoutInternals","toolbarProps","breadcrumbs","discoveredBreadcrumbs","verticalOffsets","isMobile","toolbarState","setToolbarState","setToolbarHeight","ariaLabels","activeDrawerId","drawers","drawersFocusRef","onActiveDrawerChange","globalDrawersFocusControl","globalDrawers","activeGlobalDrawersIds","onActiveGlobalDrawersChange","hasNavigation","navigationOpen","navigationFocusRef","onNavigationToggle","hasSplitPanel","splitPanelFocusRef","splitPanelToggleProps","onSplitPanelToggle","expandedDrawerId","setExpandedDrawerId","pinnedToolbar","drawerExpandedMode","ref","entry","borderBoxHeight","lastScrollY","window","scrollY","updateScrollDirection","direction","addEventListener","removeEventListener","anyPanelOpenInMobile","document","body","classList","add","remove","toolbarHidden","navLandmarkAttributes","role","navigation","createElement","className","toolbar","style","insetBlockStart","Object","assign","ariaLabel","_a","navigationToggle","undefined","ariaExpanded","iconName","onClick","selected","disabled","ownBreadcrumbs","length","displayed","_b","filter","item","trigger","_c","createWidgetizedAppLayoutToolbar"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/app-layout/visual-refresh-toolbar/toolbar/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\nimport { createWidgetizedComponent } from '../../../internal/widgets';\nimport { AppLayoutProps } from '../../interfaces';\nimport { OnChangeParams } from '../../utils/use-drawers';\nimport { Focusable, FocusControlMultipleStates } from '../../utils/use-focus-control';\nimport { AppLayoutInternals } from '../interfaces';\nimport { BreadcrumbsSlot } from '../skeleton/breadcrumbs';\nimport { ToolbarSkeleton } from '../skeleton/slot-skeletons';\nimport { ToolbarSlot } from '../skeleton/slot-wrappers';\nimport { DrawerTriggers, SplitPanelToggleProps } from './drawer-triggers';\nimport TriggerButton from './trigger-button';\n\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\nexport { SplitPanelToggleProps };\n\nexport interface ToolbarProps {\n  ariaLabels?: AppLayoutProps.Labels;\n  // navigation\n  hasNavigation?: boolean;\n  navigationOpen?: boolean;\n  onNavigationToggle?: (open: boolean) => void;\n  navigationFocusRef?: React.Ref<Focusable>;\n\n  // breadcrumbs\n  hasBreadcrumbsPortal?: boolean;\n\n  // split panel\n  hasSplitPanel?: boolean;\n  splitPanelToggleProps?: SplitPanelToggleProps;\n  splitPanelFocusRef?: React.Ref<Focusable>;\n  onSplitPanelToggle?: () => void;\n\n  // drawers\n  activeDrawerId?: string | null;\n  drawers?: ReadonlyArray<AppLayoutProps.Drawer>;\n  drawersFocusRef?: React.Ref<Focusable>;\n  globalDrawersFocusControl?: FocusControlMultipleStates;\n  onActiveDrawerChange?: (drawerId: string | null, params: OnChangeParams) => void;\n  globalDrawers?: ReadonlyArray<AppLayoutProps.Drawer> | undefined;\n  activeGlobalDrawersIds?: ReadonlyArray<string>;\n  onActiveGlobalDrawersChange?: ((drawerId: string, params: OnChangeParams) => void) | undefined;\n\n  expandedDrawerId?: string | null;\n  setExpandedDrawerId?: (value: string | null) => void;\n}\n\nexport interface AppLayoutToolbarImplementationProps {\n  appLayoutInternals: AppLayoutInternals;\n  toolbarProps: ToolbarProps;\n}\n\nexport function AppLayoutToolbarImplementation({\n  appLayoutInternals,\n  // the value could be undefined if this component is loaded as a widget by a different app layout version\n  // not testable in a single-version setup\n  toolbarProps = {},\n}: AppLayoutToolbarImplementationProps) {\n  const {\n    breadcrumbs,\n    discoveredBreadcrumbs,\n    verticalOffsets,\n    isMobile,\n    toolbarState,\n    setToolbarState,\n    setToolbarHeight,\n  } = appLayoutInternals;\n  const {\n    ariaLabels,\n    activeDrawerId,\n    drawers,\n    drawersFocusRef,\n    onActiveDrawerChange,\n    globalDrawersFocusControl,\n    globalDrawers,\n    activeGlobalDrawersIds,\n    onActiveGlobalDrawersChange,\n    hasNavigation,\n    navigationOpen,\n    navigationFocusRef,\n    onNavigationToggle,\n    hasSplitPanel,\n    splitPanelFocusRef,\n    splitPanelToggleProps,\n    onSplitPanelToggle,\n    expandedDrawerId,\n    setExpandedDrawerId,\n  } = toolbarProps;\n  // TODO: expose configuration property\n  const pinnedToolbar = true;\n  const drawerExpandedMode = !!expandedDrawerId;\n  const ref = useRef<HTMLElement>(null);\n  useResizeObserver(ref, entry => setToolbarHeight(entry.borderBoxHeight));\n  useEffect(() => {\n    return () => {\n      setToolbarHeight(0);\n    };\n    // unmount effect only\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    let lastScrollY = window.scrollY;\n\n    /* istanbul ignore next not testable in JSDOM */\n    const updateScrollDirection = () => {\n      if (pinnedToolbar) {\n        setToolbarState('show');\n        return;\n      }\n      const scrollY = window.scrollY;\n      // 80 is an arbitrary number to have a pause before the toolbar scrolls out of view at the top of the page\n      const direction = scrollY > lastScrollY && scrollY > 80 ? 'hide' : 'show';\n      // 2 as a buffer to avoid mistaking minor accidental mouse moves as scroll\n      if (direction !== toolbarState && (scrollY - lastScrollY > 2 || scrollY - lastScrollY < -2)) {\n        setToolbarState(direction);\n      }\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n    };\n\n    window.addEventListener('scroll', updateScrollDirection);\n    return () => {\n      window.removeEventListener('scroll', updateScrollDirection);\n    };\n  }, [pinnedToolbar, setToolbarState, toolbarState]);\n\n  const anyPanelOpenInMobile = !!isMobile && (!!activeDrawerId || (!!navigationOpen && !!hasNavigation));\n  useEffect(() => {\n    if (anyPanelOpenInMobile) {\n      document.body.classList.add(styles['block-body-scroll']);\n    } else {\n      document.body.classList.remove(styles['block-body-scroll']);\n    }\n    return () => {\n      document.body.classList.remove(styles['block-body-scroll']);\n    };\n  }, [anyPanelOpenInMobile]);\n\n  const toolbarHidden = toolbarState === 'hide' && !pinnedToolbar;\n  const navLandmarkAttributes = navigationOpen\n    ? { role: 'presentation' }\n    : { role: 'navigation', 'aria-label': ariaLabels?.navigation };\n\n  return (\n    <ToolbarSlot\n      ref={ref}\n      className={clsx(styles['universal-toolbar'], testutilStyles.toolbar, {\n        [testutilStyles['mobile-bar']]: isMobile,\n        [styles['toolbar-hidden']]: toolbarHidden,\n      })}\n      style={{\n        insetBlockStart: toolbarHidden ? '-60px' : verticalOffsets.toolbar,\n      }}\n    >\n      <div className={styles['toolbar-container']}>\n        {hasNavigation && (\n          <nav {...navLandmarkAttributes} className={clsx(styles['universal-toolbar-nav'])}>\n            <TriggerButton\n              ariaLabel={ariaLabels?.navigationToggle ?? undefined}\n              ariaExpanded={false}\n              iconName=\"menu\"\n              className={testutilStyles['navigation-toggle']}\n              onClick={() => {\n                if (setExpandedDrawerId) {\n                  setExpandedDrawerId(null);\n                }\n                if (navigationOpen && expandedDrawerId) {\n                  return;\n                }\n                onNavigationToggle?.(!navigationOpen);\n              }}\n              ref={navigationFocusRef}\n              selected={!drawerExpandedMode && navigationOpen}\n              disabled={anyPanelOpenInMobile}\n            />\n          </nav>\n        )}\n        {(breadcrumbs || discoveredBreadcrumbs) && (\n          <div className={clsx(styles['universal-toolbar-breadcrumbs'], testutilStyles.breadcrumbs)}>\n            <BreadcrumbsSlot\n              ownBreadcrumbs={appLayoutInternals.breadcrumbs}\n              discoveredBreadcrumbs={appLayoutInternals.discoveredBreadcrumbs}\n            />\n          </div>\n        )}\n        {(drawers?.length || globalDrawers?.length || (hasSplitPanel && splitPanelToggleProps?.displayed)) && (\n          <div className={clsx(styles['universal-toolbar-drawers'])}>\n            <DrawerTriggers\n              ariaLabels={ariaLabels}\n              activeDrawerId={activeDrawerId ?? null}\n              drawers={drawers?.filter(item => !!item.trigger) ?? []}\n              drawersFocusRef={drawersFocusRef}\n              onActiveDrawerChange={onActiveDrawerChange}\n              splitPanelToggleProps={splitPanelToggleProps?.displayed ? splitPanelToggleProps : undefined}\n              splitPanelFocusRef={splitPanelFocusRef}\n              onSplitPanelToggle={onSplitPanelToggle}\n              disabled={anyPanelOpenInMobile}\n              globalDrawersFocusControl={globalDrawersFocusControl}\n              globalDrawers={globalDrawers?.filter(item => !!item.trigger) ?? []}\n              activeGlobalDrawersIds={activeGlobalDrawersIds ?? []}\n              onActiveGlobalDrawersChange={onActiveGlobalDrawersChange}\n              expandedDrawerId={expandedDrawerId}\n              setExpandedDrawerId={setExpandedDrawerId!}\n            />\n          </div>\n        )}\n      </div>\n    </ToolbarSlot>\n  );\n}\n\nexport const createWidgetizedAppLayoutToolbar = createWidgetizedComponent(\n  AppLayoutToolbarImplementation,\n  ToolbarSkeleton\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}