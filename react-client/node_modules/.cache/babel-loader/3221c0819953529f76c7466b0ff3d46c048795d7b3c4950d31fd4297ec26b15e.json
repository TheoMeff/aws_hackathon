{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { addMonths, addYears, isAfter, isBefore, isSameMonth, isSameYear, max, min } from 'date-fns';\nimport { getBaseDay, moveNextDay, moveNextWeek, movePrevDay, movePrevWeek } from '../../../calendar/utils/navigation-day';\nimport { getBaseMonth, moveMonthDown, moveMonthUp, moveNextMonth, movePrevMonth } from '../../../calendar/utils/navigation-month';\nimport { useDateCache } from '../../../internal/hooks/use-date-cache';\nimport { KeyCode } from '../../../internal/keycode';\nimport handleKey from '../../../internal/utils/handle-key';\nimport { hasValue } from '../../../internal/utils/has-value';\nimport InternalSpaceBetween from '../../../space-between/internal';\nimport { findDateToFocus } from '../utils';\nimport { Grid } from './grid';\nimport testutilStyles from '../../test-classes/styles.css.js';\nfunction isVisible(date, baseDate, isSingleGrid, granularity) {\n  const isSame = granularity === 'day' ? isSameMonth : isSameYear;\n  const add = granularity === 'day' ? addMonths : addYears;\n  if (isSingleGrid) {\n    return isSame(date, baseDate);\n  }\n  const previous = add(baseDate, -1);\n  return isSame(date, previous) || isSame(date, baseDate);\n}\nexport const Grids = ({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n  focusedDate,\n  onFocusedDateChange,\n  isDateEnabled,\n  dateDisabledReason,\n  isSingleGrid,\n  onSelectDate,\n  onPageChange,\n  locale,\n  todayAriaLabel,\n  currentMonthAriaLabel,\n  headingIdPrefix,\n  startOfWeek = 0,\n  granularity = 'day'\n}) => {\n  const containerRef = useRef(null);\n  const [gridHasFocus, setGridHasFocus] = useState(false);\n  const isMonthPicker = granularity === 'month';\n  const focusedDateRef = useRef(null);\n  const addPages = !isMonthPicker ? addMonths : addYears;\n  const getBase = !isMonthPicker ? getBaseDay : getBaseMonth;\n  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;\n  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;\n  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;\n  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;\n  const dateCache = useDateCache();\n  baseDate = dateCache(baseDate);\n  focusedDate = focusedDate ? dateCache(focusedDate) : null;\n  const isDateFocusable = useCallback(date => {\n    return isDateEnabled(date) || !isDateEnabled(date) && !!dateDisabledReason(date);\n  }, [isDateEnabled, dateDisabledReason]);\n  useEffect(() => {\n    if (focusedDate && !isVisible(focusedDate, baseDate, isSingleGrid, granularity)) {\n      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;\n      const newPage = !isSingleGrid && direction === -1 ? addPages(baseDate, -1) : baseDate;\n      const nearestBaseDate = getBase(newPage, isDateFocusable);\n      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateFocusable);\n      onFocusedDateChange(newFocusedDate);\n    }\n  }, [baseDate, focusedDate, isSingleGrid, granularity, addPages, isDateFocusable, onFocusedDateChange, getBase]);\n  const onGridKeyDownHandler = event => {\n    let updatedFocusDate = null;\n    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];\n    if (focusedDate === null || keys.indexOf(event.keyCode) === -1) {\n      return;\n    }\n    event.preventDefault();\n    handleKey(event, {\n      onActivate: () => {\n        if (!focusedDate || !isDateEnabled(focusedDate)) {\n          return;\n        }\n        onSelectDate(focusedDate);\n      },\n      onBlockEnd: () => focusedDate && (updatedFocusDate = moveDown(focusedDate, isDateFocusable)),\n      onBlockStart: () => focusedDate && (updatedFocusDate = moveUp(focusedDate, isDateFocusable)),\n      onInlineStart: () => focusedDate && (updatedFocusDate = moveLeft(focusedDate, isDateFocusable)),\n      onInlineEnd: () => focusedDate && (updatedFocusDate = moveRight(focusedDate, isDateFocusable))\n    });\n    if (!updatedFocusDate) {\n      return;\n    }\n    const updatedDateIsVisible = isVisible(updatedFocusDate, baseDate, isSingleGrid, granularity);\n    if (!updatedDateIsVisible) {\n      const newPageIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);\n      onPageChange(newPageIsOnLeftSide ? addPages(updatedFocusDate, 1) : updatedFocusDate);\n    }\n    onFocusedDateChange(updatedFocusDate);\n  };\n  useEffect(() => {\n    // focus current date if the focus is already inside the calendar\n    if (focusedDate !== null && gridHasFocus) {\n      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {\n        focusedDateRef.current.focus();\n      }\n    }\n  }, [focusedDate, gridHasFocus]);\n  const onGridBlur = event => {\n    var _a;\n    const newFocusTarget = event.relatedTarget || document.activeElement;\n    const newFocusTargetIsInGrid = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(newFocusTarget);\n    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {\n      setGridHasFocus(false);\n    }\n  };\n  const onGridFocus = () => {\n    if (!gridHasFocus) {\n      setGridHasFocus(true);\n    }\n  };\n  const isRangeVisible = selectedStartDate && selectedEndDate || gridHasFocus;\n  const rangeEnds = [selectedStartDate !== null && selectedStartDate !== void 0 ? selectedStartDate : focusedDate, selectedEndDate !== null && selectedEndDate !== void 0 ? selectedEndDate : focusedDate].filter(hasValue);\n  const rangeStartDate = min(rangeEnds);\n  const rangeEndDate = max(rangeEnds);\n  const pageUnit = isMonthPicker ? 'year' : 'month';\n  const sharedGridProps = {\n    selectedEndDate,\n    selectedStartDate,\n    focusedDate,\n    focusedDateRef,\n    rangeStartDate: isRangeVisible ? rangeStartDate : null,\n    rangeEndDate: isRangeVisible ? rangeEndDate : null,\n    isDateEnabled,\n    dateDisabledReason,\n    onSelectDate,\n    onGridKeyDownHandler,\n    onFocusedDateChange,\n    locale,\n    granularity,\n    currentMonthAriaLabel,\n    startOfWeek,\n    todayAriaLabel\n  };\n  return React.createElement(\"div\", {\n    ref: containerRef,\n    onFocus: onGridFocus,\n    onBlur: onGridBlur\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"xs\",\n    direction: \"horizontal\"\n  }, !isSingleGrid && React.createElement(Grid, Object.assign({}, sharedGridProps, {\n    padDates: 'before',\n    className: testutilStyles['first-grid'],\n    baseDate: addPages(baseDate, -1),\n    ariaLabelledby: `${headingIdPrefix}-prev${pageUnit}`\n  })), React.createElement(Grid, Object.assign({}, sharedGridProps, {\n    padDates: 'after',\n    className: testutilStyles['second-grid'],\n    baseDate: baseDate,\n    ariaLabelledby: `${headingIdPrefix}-current${pageUnit}`\n  }))));\n};","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","addMonths","addYears","isAfter","isBefore","isSameMonth","isSameYear","max","min","getBaseDay","moveNextDay","moveNextWeek","movePrevDay","movePrevWeek","getBaseMonth","moveMonthDown","moveMonthUp","moveNextMonth","movePrevMonth","useDateCache","KeyCode","handleKey","hasValue","InternalSpaceBetween","findDateToFocus","Grid","testutilStyles","isVisible","date","baseDate","isSingleGrid","granularity","isSame","add","previous","Grids","selectedStartDate","selectedEndDate","focusedDate","onFocusedDateChange","isDateEnabled","dateDisabledReason","onSelectDate","onPageChange","locale","todayAriaLabel","currentMonthAriaLabel","headingIdPrefix","startOfWeek","containerRef","gridHasFocus","setGridHasFocus","isMonthPicker","focusedDateRef","addPages","getBase","moveDown","moveLeft","moveRight","moveUp","dateCache","isDateFocusable","direction","newPage","nearestBaseDate","newFocusedDate","onGridKeyDownHandler","event","updatedFocusDate","keys","up","down","left","right","space","enter","indexOf","keyCode","preventDefault","onActivate","onBlockEnd","onBlockStart","onInlineStart","onInlineEnd","updatedDateIsVisible","newPageIsOnLeftSide","current","document","activeElement","focus","onGridBlur","newFocusTarget","relatedTarget","newFocusTargetIsInGrid","_a","contains","onGridFocus","isRangeVisible","rangeEnds","filter","rangeStartDate","rangeEndDate","pageUnit","sharedGridProps","createElement","ref","onFocus","onBlur","size","Object","assign","padDates","className","ariaLabelledby"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/date-range-picker/calendar/grids/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { addMonths, addYears, isAfter, isBefore, isSameMonth, isSameYear, max, min } from 'date-fns';\n\nimport { CalendarProps } from '../../../calendar/interfaces';\nimport {\n  getBaseDay,\n  moveNextDay,\n  moveNextWeek,\n  movePrevDay,\n  movePrevWeek,\n} from '../../../calendar/utils/navigation-day';\nimport {\n  getBaseMonth,\n  moveMonthDown,\n  moveMonthUp,\n  moveNextMonth,\n  movePrevMonth,\n} from '../../../calendar/utils/navigation-month';\nimport { useDateCache } from '../../../internal/hooks/use-date-cache';\nimport { KeyCode } from '../../../internal/keycode';\nimport handleKey from '../../../internal/utils/handle-key';\nimport { hasValue } from '../../../internal/utils/has-value';\nimport InternalSpaceBetween from '../../../space-between/internal';\nimport { findDateToFocus } from '../utils';\nimport { Grid } from './grid';\nimport { SelectGridProps } from './interfaces';\n\nimport testutilStyles from '../../test-classes/styles.css.js';\n\nfunction isVisible(date: Date, baseDate: Date, isSingleGrid: boolean, granularity: CalendarProps.Granularity) {\n  const isSame = granularity === 'day' ? isSameMonth : isSameYear;\n  const add = granularity === 'day' ? addMonths : addYears;\n  if (isSingleGrid) {\n    return isSame(date, baseDate);\n  }\n\n  const previous = add(baseDate, -1);\n\n  return isSame(date, previous) || isSame(date, baseDate);\n}\n\nexport const Grids = ({\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n\n  focusedDate,\n  onFocusedDateChange,\n\n  isDateEnabled,\n  dateDisabledReason,\n  isSingleGrid,\n\n  onSelectDate,\n  onPageChange,\n\n  locale,\n  todayAriaLabel,\n  currentMonthAriaLabel,\n  headingIdPrefix,\n  startOfWeek = 0,\n  granularity = 'day',\n}: SelectGridProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [gridHasFocus, setGridHasFocus] = useState(false);\n  const isMonthPicker = granularity === 'month';\n\n  const focusedDateRef = useRef<HTMLTableCellElement>(null);\n\n  const addPages = !isMonthPicker ? addMonths : addYears;\n  const getBase = !isMonthPicker ? getBaseDay : getBaseMonth;\n  const moveDown = isMonthPicker ? moveMonthDown : moveNextWeek;\n  const moveLeft = isMonthPicker ? movePrevMonth : movePrevDay;\n  const moveRight = isMonthPicker ? moveNextMonth : moveNextDay;\n  const moveUp = isMonthPicker ? moveMonthUp : movePrevWeek;\n\n  const dateCache = useDateCache();\n  baseDate = dateCache(baseDate);\n  focusedDate = focusedDate ? dateCache(focusedDate) : null;\n\n  const isDateFocusable = useCallback(\n    (date: Date) => {\n      return isDateEnabled(date) || (!isDateEnabled(date) && !!dateDisabledReason(date));\n    },\n    [isDateEnabled, dateDisabledReason]\n  );\n\n  useEffect(() => {\n    if (focusedDate && !isVisible(focusedDate, baseDate, isSingleGrid, granularity)) {\n      const direction = isAfter(focusedDate, baseDate) ? -1 : 1;\n\n      const newPage = !isSingleGrid && direction === -1 ? addPages(baseDate, -1) : baseDate;\n      const nearestBaseDate = getBase(newPage, isDateFocusable);\n\n      const newFocusedDate = findDateToFocus(focusedDate, nearestBaseDate, isDateFocusable);\n\n      onFocusedDateChange(newFocusedDate);\n    }\n  }, [baseDate, focusedDate, isSingleGrid, granularity, addPages, isDateFocusable, onFocusedDateChange, getBase]);\n\n  const onGridKeyDownHandler = (event: React.KeyboardEvent<HTMLElement>) => {\n    let updatedFocusDate: Date | null = null;\n\n    const keys = [KeyCode.up, KeyCode.down, KeyCode.left, KeyCode.right, KeyCode.space, KeyCode.enter];\n\n    if (focusedDate === null || keys.indexOf(event.keyCode) === -1) {\n      return;\n    }\n\n    event.preventDefault();\n\n    handleKey(event, {\n      onActivate: () => {\n        if (!focusedDate || !isDateEnabled(focusedDate)) {\n          return;\n        }\n        onSelectDate(focusedDate);\n      },\n      onBlockEnd: () => focusedDate && (updatedFocusDate = moveDown(focusedDate, isDateFocusable)),\n      onBlockStart: () => focusedDate && (updatedFocusDate = moveUp(focusedDate, isDateFocusable)),\n      onInlineStart: () => focusedDate && (updatedFocusDate = moveLeft(focusedDate, isDateFocusable)),\n      onInlineEnd: () => focusedDate && (updatedFocusDate = moveRight(focusedDate, isDateFocusable)),\n    });\n\n    if (!updatedFocusDate) {\n      return;\n    }\n\n    const updatedDateIsVisible = isVisible(updatedFocusDate, baseDate, isSingleGrid, granularity);\n\n    if (!updatedDateIsVisible) {\n      const newPageIsOnLeftSide = !isSingleGrid && isBefore(updatedFocusDate, baseDate);\n      onPageChange(newPageIsOnLeftSide ? addPages(updatedFocusDate, 1) : updatedFocusDate);\n    }\n    onFocusedDateChange(updatedFocusDate);\n  };\n\n  useEffect(() => {\n    // focus current date if the focus is already inside the calendar\n    if (focusedDate !== null && gridHasFocus) {\n      if (focusedDateRef.current && focusedDateRef.current !== document.activeElement) {\n        focusedDateRef.current.focus();\n      }\n    }\n  }, [focusedDate, gridHasFocus]);\n\n  const onGridBlur = (event: React.FocusEvent) => {\n    const newFocusTarget = event.relatedTarget || document.activeElement;\n    const newFocusTargetIsInGrid = containerRef.current?.contains(newFocusTarget as Node);\n    if (newFocusTarget && !newFocusTargetIsInGrid && gridHasFocus) {\n      setGridHasFocus(false);\n    }\n  };\n\n  const onGridFocus = () => {\n    if (!gridHasFocus) {\n      setGridHasFocus(true);\n    }\n  };\n\n  const isRangeVisible = (selectedStartDate && selectedEndDate) || gridHasFocus;\n\n  const rangeEnds: Date[] = [selectedStartDate ?? focusedDate, selectedEndDate ?? focusedDate].filter(hasValue);\n  const rangeStartDate = min(rangeEnds);\n  const rangeEndDate = max(rangeEnds);\n  const pageUnit = isMonthPicker ? 'year' : 'month';\n\n  const sharedGridProps = {\n    selectedEndDate,\n    selectedStartDate,\n    focusedDate,\n    focusedDateRef,\n    rangeStartDate: isRangeVisible ? rangeStartDate : null,\n    rangeEndDate: isRangeVisible ? rangeEndDate : null,\n    isDateEnabled,\n    dateDisabledReason,\n    onSelectDate,\n    onGridKeyDownHandler,\n    onFocusedDateChange,\n    locale,\n    granularity,\n    currentMonthAriaLabel,\n    startOfWeek,\n    todayAriaLabel,\n  };\n\n  return (\n    <div ref={containerRef} onFocus={onGridFocus} onBlur={onGridBlur}>\n      <InternalSpaceBetween size=\"xs\" direction=\"horizontal\">\n        {!isSingleGrid && (\n          <Grid\n            {...sharedGridProps}\n            padDates={'before'}\n            className={testutilStyles['first-grid']}\n            baseDate={addPages(baseDate, -1)}\n            ariaLabelledby={`${headingIdPrefix}-prev${pageUnit}`}\n          />\n        )}\n        <Grid\n          {...sharedGridProps}\n          padDates={'after'}\n          className={testutilStyles['second-grid']}\n          baseDate={baseDate}\n          ariaLabelledby={`${headingIdPrefix}-current${pageUnit}`}\n        />\n      </InternalSpaceBetween>\n    </div>\n  );\n};\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACvE,SAASC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,UAAU,EAAEC,GAAG,EAAEC,GAAG,QAAQ,UAAU;AAGpG,SACEC,UAAU,EACVC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,YAAY,QACP,wCAAwC;AAC/C,SACEC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,aAAa,EACbC,aAAa,QACR,0CAA0C;AACjD,SAASC,YAAY,QAAQ,wCAAwC;AACrE,SAASC,OAAO,QAAQ,2BAA2B;AACnD,OAAOC,SAAS,MAAM,oCAAoC;AAC1D,SAASC,QAAQ,QAAQ,mCAAmC;AAC5D,OAAOC,oBAAoB,MAAM,iCAAiC;AAClE,SAASC,eAAe,QAAQ,UAAU;AAC1C,SAASC,IAAI,QAAQ,QAAQ;AAG7B,OAAOC,cAAc,MAAM,kCAAkC;AAE7D,SAASC,SAASA,CAACC,IAAU,EAAEC,QAAc,EAAEC,YAAqB,EAAEC,WAAsC;EAC1G,MAAMC,MAAM,GAAGD,WAAW,KAAK,KAAK,GAAG1B,WAAW,GAAGC,UAAU;EAC/D,MAAM2B,GAAG,GAAGF,WAAW,KAAK,KAAK,GAAG9B,SAAS,GAAGC,QAAQ;EACxD,IAAI4B,YAAY,EAAE;IAChB,OAAOE,MAAM,CAACJ,IAAI,EAAEC,QAAQ,CAAC;;EAG/B,MAAMK,QAAQ,GAAGD,GAAG,CAACJ,QAAQ,EAAE,CAAC,CAAC,CAAC;EAElC,OAAOG,MAAM,CAACJ,IAAI,EAAEM,QAAQ,CAAC,IAAIF,MAAM,CAACJ,IAAI,EAAEC,QAAQ,CAAC;AACzD;AAEA,OAAO,MAAMM,KAAK,GAAGA,CAAC;EACpBN,QAAQ;EACRO,iBAAiB;EACjBC,eAAe;EAEfC,WAAW;EACXC,mBAAmB;EAEnBC,aAAa;EACbC,kBAAkB;EAClBX,YAAY;EAEZY,YAAY;EACZC,YAAY;EAEZC,MAAM;EACNC,cAAc;EACdC,qBAAqB;EACrBC,eAAe;EACfC,WAAW,GAAG,CAAC;EACfjB,WAAW,GAAG;AAAK,CACH,KAAI;EACpB,MAAMkB,YAAY,GAAGlD,MAAM,CAAiB,IAAI,CAAC;EACjD,MAAM,CAACmD,YAAY,EAAEC,eAAe,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMoD,aAAa,GAAGrB,WAAW,KAAK,OAAO;EAE7C,MAAMsB,cAAc,GAAGtD,MAAM,CAAuB,IAAI,CAAC;EAEzD,MAAMuD,QAAQ,GAAG,CAACF,aAAa,GAAGnD,SAAS,GAAGC,QAAQ;EACtD,MAAMqD,OAAO,GAAG,CAACH,aAAa,GAAG3C,UAAU,GAAGK,YAAY;EAC1D,MAAM0C,QAAQ,GAAGJ,aAAa,GAAGrC,aAAa,GAAGJ,YAAY;EAC7D,MAAM8C,QAAQ,GAAGL,aAAa,GAAGlC,aAAa,GAAGN,WAAW;EAC5D,MAAM8C,SAAS,GAAGN,aAAa,GAAGnC,aAAa,GAAGP,WAAW;EAC7D,MAAMiD,MAAM,GAAGP,aAAa,GAAGpC,WAAW,GAAGH,YAAY;EAEzD,MAAM+C,SAAS,GAAGzC,YAAY,EAAE;EAChCU,QAAQ,GAAG+B,SAAS,CAAC/B,QAAQ,CAAC;EAC9BS,WAAW,GAAGA,WAAW,GAAGsB,SAAS,CAACtB,WAAW,CAAC,GAAG,IAAI;EAEzD,MAAMuB,eAAe,GAAGhE,WAAW,CAChC+B,IAAU,IAAI;IACb,OAAOY,aAAa,CAACZ,IAAI,CAAC,IAAK,CAACY,aAAa,CAACZ,IAAI,CAAC,IAAI,CAAC,CAACa,kBAAkB,CAACb,IAAI,CAAE;EACpF,CAAC,EACD,CAACY,aAAa,EAAEC,kBAAkB,CAAC,CACpC;EAED3C,SAAS,CAAC,MAAK;IACb,IAAIwC,WAAW,IAAI,CAACX,SAAS,CAACW,WAAW,EAAET,QAAQ,EAAEC,YAAY,EAAEC,WAAW,CAAC,EAAE;MAC/E,MAAM+B,SAAS,GAAG3D,OAAO,CAACmC,WAAW,EAAET,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;MAEzD,MAAMkC,OAAO,GAAG,CAACjC,YAAY,IAAIgC,SAAS,KAAK,CAAC,CAAC,GAAGR,QAAQ,CAACzB,QAAQ,EAAE,CAAC,CAAC,CAAC,GAAGA,QAAQ;MACrF,MAAMmC,eAAe,GAAGT,OAAO,CAACQ,OAAO,EAAEF,eAAe,CAAC;MAEzD,MAAMI,cAAc,GAAGzC,eAAe,CAACc,WAAW,EAAE0B,eAAe,EAAEH,eAAe,CAAC;MAErFtB,mBAAmB,CAAC0B,cAAc,CAAC;;EAEvC,CAAC,EAAE,CAACpC,QAAQ,EAAES,WAAW,EAAER,YAAY,EAAEC,WAAW,EAAEuB,QAAQ,EAAEO,eAAe,EAAEtB,mBAAmB,EAAEgB,OAAO,CAAC,CAAC;EAE/G,MAAMW,oBAAoB,GAAIC,KAAuC,IAAI;IACvE,IAAIC,gBAAgB,GAAgB,IAAI;IAExC,MAAMC,IAAI,GAAG,CAACjD,OAAO,CAACkD,EAAE,EAAElD,OAAO,CAACmD,IAAI,EAAEnD,OAAO,CAACoD,IAAI,EAAEpD,OAAO,CAACqD,KAAK,EAAErD,OAAO,CAACsD,KAAK,EAAEtD,OAAO,CAACuD,KAAK,CAAC;IAElG,IAAIrC,WAAW,KAAK,IAAI,IAAI+B,IAAI,CAACO,OAAO,CAACT,KAAK,CAACU,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE;MAC9D;;IAGFV,KAAK,CAACW,cAAc,EAAE;IAEtBzD,SAAS,CAAC8C,KAAK,EAAE;MACfY,UAAU,EAAEA,CAAA,KAAK;QACf,IAAI,CAACzC,WAAW,IAAI,CAACE,aAAa,CAACF,WAAW,CAAC,EAAE;UAC/C;;QAEFI,YAAY,CAACJ,WAAW,CAAC;MAC3B,CAAC;MACD0C,UAAU,EAAEA,CAAA,KAAM1C,WAAW,KAAK8B,gBAAgB,GAAGZ,QAAQ,CAAClB,WAAW,EAAEuB,eAAe,CAAC,CAAC;MAC5FoB,YAAY,EAAEA,CAAA,KAAM3C,WAAW,KAAK8B,gBAAgB,GAAGT,MAAM,CAACrB,WAAW,EAAEuB,eAAe,CAAC,CAAC;MAC5FqB,aAAa,EAAEA,CAAA,KAAM5C,WAAW,KAAK8B,gBAAgB,GAAGX,QAAQ,CAACnB,WAAW,EAAEuB,eAAe,CAAC,CAAC;MAC/FsB,WAAW,EAAEA,CAAA,KAAM7C,WAAW,KAAK8B,gBAAgB,GAAGV,SAAS,CAACpB,WAAW,EAAEuB,eAAe,CAAC;KAC9F,CAAC;IAEF,IAAI,CAACO,gBAAgB,EAAE;MACrB;;IAGF,MAAMgB,oBAAoB,GAAGzD,SAAS,CAACyC,gBAAgB,EAAEvC,QAAQ,EAAEC,YAAY,EAAEC,WAAW,CAAC;IAE7F,IAAI,CAACqD,oBAAoB,EAAE;MACzB,MAAMC,mBAAmB,GAAG,CAACvD,YAAY,IAAI1B,QAAQ,CAACgE,gBAAgB,EAAEvC,QAAQ,CAAC;MACjFc,YAAY,CAAC0C,mBAAmB,GAAG/B,QAAQ,CAACc,gBAAgB,EAAE,CAAC,CAAC,GAAGA,gBAAgB,CAAC;;IAEtF7B,mBAAmB,CAAC6B,gBAAgB,CAAC;EACvC,CAAC;EAEDtE,SAAS,CAAC,MAAK;IACb;IACA,IAAIwC,WAAW,KAAK,IAAI,IAAIY,YAAY,EAAE;MACxC,IAAIG,cAAc,CAACiC,OAAO,IAAIjC,cAAc,CAACiC,OAAO,KAAKC,QAAQ,CAACC,aAAa,EAAE;QAC/EnC,cAAc,CAACiC,OAAO,CAACG,KAAK,EAAE;;;EAGpC,CAAC,EAAE,CAACnD,WAAW,EAAEY,YAAY,CAAC,CAAC;EAE/B,MAAMwC,UAAU,GAAIvB,KAAuB,IAAI;;IAC7C,MAAMwB,cAAc,GAAGxB,KAAK,CAACyB,aAAa,IAAIL,QAAQ,CAACC,aAAa;IACpE,MAAMK,sBAAsB,GAAG,CAAAC,EAAA,GAAA7C,YAAY,CAACqC,OAAO,cAAAQ,EAAA,uBAAAA,EAAA,CAAEC,QAAQ,CAACJ,cAAsB,CAAC;IACrF,IAAIA,cAAc,IAAI,CAACE,sBAAsB,IAAI3C,YAAY,EAAE;MAC7DC,eAAe,CAAC,KAAK,CAAC;;EAE1B,CAAC;EAED,MAAM6C,WAAW,GAAGA,CAAA,KAAK;IACvB,IAAI,CAAC9C,YAAY,EAAE;MACjBC,eAAe,CAAC,IAAI,CAAC;;EAEzB,CAAC;EAED,MAAM8C,cAAc,GAAI7D,iBAAiB,IAAIC,eAAe,IAAKa,YAAY;EAE7E,MAAMgD,SAAS,GAAW,CAAC9D,iBAAiB,aAAjBA,iBAAiB,cAAjBA,iBAAiB,GAAIE,WAAW,EAAED,eAAe,aAAfA,eAAe,cAAfA,eAAe,GAAIC,WAAW,CAAC,CAAC6D,MAAM,CAAC7E,QAAQ,CAAC;EAC7G,MAAM8E,cAAc,GAAG5F,GAAG,CAAC0F,SAAS,CAAC;EACrC,MAAMG,YAAY,GAAG9F,GAAG,CAAC2F,SAAS,CAAC;EACnC,MAAMI,QAAQ,GAAGlD,aAAa,GAAG,MAAM,GAAG,OAAO;EAEjD,MAAMmD,eAAe,GAAG;IACtBlE,eAAe;IACfD,iBAAiB;IACjBE,WAAW;IACXe,cAAc;IACd+C,cAAc,EAAEH,cAAc,GAAGG,cAAc,GAAG,IAAI;IACtDC,YAAY,EAAEJ,cAAc,GAAGI,YAAY,GAAG,IAAI;IAClD7D,aAAa;IACbC,kBAAkB;IAClBC,YAAY;IACZwB,oBAAoB;IACpB3B,mBAAmB;IACnBK,MAAM;IACNb,WAAW;IACXe,qBAAqB;IACrBE,WAAW;IACXH;GACD;EAED,OACEjD,KAAA,CAAA4G,aAAA;IAAKC,GAAG,EAAExD,YAAY;IAAEyD,OAAO,EAAEV,WAAW;IAAEW,MAAM,EAAEjB;EAAU,GAC9D9F,KAAA,CAAA4G,aAAA,CAACjF,oBAAoB;IAACqF,IAAI,EAAC,IAAI;IAAC9C,SAAS,EAAC;EAAY,GACnD,CAAChC,YAAY,IACZlC,KAAA,CAAA4G,aAAA,CAAC/E,IAAI,EAAAoF,MAAA,CAAAC,MAAA,KACCP,eAAe;IACnBQ,QAAQ,EAAE,QAAQ;IAClBC,SAAS,EAAEtF,cAAc,CAAC,YAAY,CAAC;IACvCG,QAAQ,EAAEyB,QAAQ,CAACzB,QAAQ,EAAE,CAAC,CAAC,CAAC;IAChCoF,cAAc,EAAE,GAAGlE,eAAe,QAAQuD,QAAQ;EAAE,GAEvD,EACD1G,KAAA,CAAA4G,aAAA,CAAC/E,IAAI,EAAAoF,MAAA,CAAAC,MAAA,KACCP,eAAe;IACnBQ,QAAQ,EAAE,OAAO;IACjBC,SAAS,EAAEtF,cAAc,CAAC,aAAa,CAAC;IACxCG,QAAQ,EAAEA,QAAQ;IAClBoF,cAAc,EAAE,GAAGlE,eAAe,WAAWuD,QAAQ;EAAE,GACvD,CACmB,CACnB;AAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}