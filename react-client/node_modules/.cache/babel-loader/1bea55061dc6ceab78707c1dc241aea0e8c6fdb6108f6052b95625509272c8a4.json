{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\nimport OptionsList from '../../internal/components/options-list';\nimport { useVirtual } from '../../internal/hooks/use-virtual';\nimport { renderOptions } from '../utils/render-options';\nimport customScrollToIndex from '../utils/scroll-to-index';\nimport { fallbackItemHeight } from './common';\nimport styles from './styles.css.js';\nconst VirtualList = (props, ref) => {\n  return props.menuProps.open ? React.createElement(VirtualListOpen, Object.assign({}, props, {\n    ref: ref\n  })) : React.createElement(VirtualListClosed, Object.assign({}, props, {\n    ref: ref\n  }));\n};\nconst VirtualListOpen = forwardRef(({\n  menuProps,\n  getOptionProps,\n  filteredOptions,\n  filteringValue,\n  highlightType,\n  checkboxes,\n  hasDropdownStatus,\n  listBottom,\n  useInteractiveGroups,\n  screenReaderContent,\n  firstOptionSticky\n}, ref) => {\n  // update component, when it gets wider or narrower to reposition items\n  const [width, menuMeasureRef] = useContainerQuery(rect => ({\n    inner: rect.contentBoxWidth,\n    outer: rect.borderBoxWidth\n  }), []);\n  const menuRefObject = useRef(null);\n  const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n  const previousHighlightedIndex = useRef();\n  const {\n    virtualItems,\n    totalSize,\n    scrollToIndex\n  } = useVirtual({\n    items: filteredOptions,\n    parentRef: menuRefObject,\n    // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n    // when the height of any option could have changed:\n    // 1: because the component got resized (width property got updated)\n    // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    estimateSize: useCallback(() => fallbackItemHeight, [width === null || width === void 0 ? void 0 : width.inner, filteringValue]),\n    firstItemSticky: firstOptionSticky\n  });\n  useImperativeHandle(ref, () => index => {\n    if (highlightType.moveFocus) {\n      const movingUp = previousHighlightedIndex.current !== undefined && index < previousHighlightedIndex.current;\n      if (firstOptionSticky && movingUp && index !== 0 && menuRefObject.current) {\n        // React-Virtual v2 does not offer a proper way to handle sticky elements when scrolling,\n        // so until we upgrade to v3, use our own scroll implementation\n        // to prevent newly highlighted element from being covered by the sticky element\n        // when moving the highlight upwards in the list.\n        // Scrolling behavior is covered by integration tests.\n        // istanbul ignore next\n        customScrollToIndex({\n          index,\n          menuEl: menuRefObject === null || menuRefObject === void 0 ? void 0 : menuRefObject.current\n        });\n      } else {\n        scrollToIndex(index);\n      }\n    }\n    previousHighlightedIndex.current = index;\n  }, [firstOptionSticky, highlightType.moveFocus, scrollToIndex]);\n  const stickySize = firstOptionSticky ? virtualItems[0].size : 0;\n  const withScrollbar = !!width && width.inner < width.outer;\n  const finalOptions = renderOptions({\n    options: virtualItems.map(({\n      index\n    }) => filteredOptions[index]),\n    getOptionProps,\n    filteringValue,\n    highlightType,\n    checkboxes,\n    hasDropdownStatus,\n    virtualItems,\n    useInteractiveGroups,\n    screenReaderContent,\n    firstOptionSticky,\n    withScrollbar\n  });\n  return React.createElement(OptionsList, Object.assign({}, menuProps, {\n    stickyItemBlockSize: stickySize,\n    ref: menuRef\n  }), finalOptions, React.createElement(\"div\", {\n    \"aria-hidden\": \"true\",\n    key: \"total-size\",\n    className: styles['layout-strut'],\n    style: {\n      height: totalSize - stickySize\n    }\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nconst VirtualListClosed = forwardRef(({\n  menuProps,\n  listBottom\n}, ref) => {\n  useImperativeHandle(ref, () => () => {}, []);\n  return React.createElement(OptionsList, Object.assign({}, menuProps, {\n    ref: menuProps.ref\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n});\nexport default forwardRef(VirtualList);","map":{"version":3,"names":["React","forwardRef","useCallback","useImperativeHandle","useRef","useContainerQuery","useMergeRefs","OptionsList","useVirtual","renderOptions","customScrollToIndex","fallbackItemHeight","styles","VirtualList","props","ref","menuProps","open","createElement","VirtualListOpen","Object","assign","VirtualListClosed","getOptionProps","filteredOptions","filteringValue","highlightType","checkboxes","hasDropdownStatus","listBottom","useInteractiveGroups","screenReaderContent","firstOptionSticky","width","menuMeasureRef","rect","inner","contentBoxWidth","outer","borderBoxWidth","menuRefObject","menuRef","previousHighlightedIndex","virtualItems","totalSize","scrollToIndex","items","parentRef","estimateSize","firstItemSticky","index","moveFocus","movingUp","current","undefined","menuEl","stickySize","size","withScrollbar","finalOptions","options","map","stickyItemBlockSize","key","className","style","height","role"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/select/parts/virtual-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useCallback, useImperativeHandle, useRef } from 'react';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\n\nimport OptionsList from '../../internal/components/options-list';\nimport { useVirtual } from '../../internal/hooks/use-virtual';\nimport { renderOptions } from '../utils/render-options';\nimport customScrollToIndex from '../utils/scroll-to-index';\nimport { fallbackItemHeight } from './common';\nimport { SelectListProps } from './plain-list';\n\nimport styles from './styles.css.js';\n\nconst VirtualList = (props: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n  return props.menuProps.open ? <VirtualListOpen {...props} ref={ref} /> : <VirtualListClosed {...props} ref={ref} />;\n};\n\nconst VirtualListOpen = forwardRef(\n  (\n    {\n      menuProps,\n      getOptionProps,\n      filteredOptions,\n      filteringValue,\n      highlightType,\n      checkboxes,\n      hasDropdownStatus,\n      listBottom,\n      useInteractiveGroups,\n      screenReaderContent,\n      firstOptionSticky,\n    }: SelectListProps,\n    ref: React.Ref<SelectListProps.SelectListRef>\n  ) => {\n    // update component, when it gets wider or narrower to reposition items\n    const [width, menuMeasureRef] = useContainerQuery(\n      rect => ({ inner: rect.contentBoxWidth, outer: rect.borderBoxWidth }),\n      []\n    );\n    const menuRefObject = useRef(null);\n    const menuRef = useMergeRefs(menuMeasureRef, menuRefObject, menuProps.ref);\n    const previousHighlightedIndex = useRef<number>();\n    const { virtualItems, totalSize, scrollToIndex } = useVirtual({\n      items: filteredOptions,\n      parentRef: menuRefObject,\n      // estimateSize is a dependency of measurements memo. We update it to force full recalculation\n      // when the height of any option could have changed:\n      // 1: because the component got resized (width property got updated)\n      // 2: because the option changed its content (filteringValue property controls the highlight and the visibility of hidden tags)\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      estimateSize: useCallback(() => fallbackItemHeight, [width?.inner, filteringValue]),\n      firstItemSticky: firstOptionSticky,\n    });\n\n    useImperativeHandle(\n      ref,\n      () => (index: number) => {\n        if (highlightType.moveFocus) {\n          const movingUp = previousHighlightedIndex.current !== undefined && index < previousHighlightedIndex.current;\n          if (firstOptionSticky && movingUp && index !== 0 && menuRefObject.current) {\n            // React-Virtual v2 does not offer a proper way to handle sticky elements when scrolling,\n            // so until we upgrade to v3, use our own scroll implementation\n            // to prevent newly highlighted element from being covered by the sticky element\n            // when moving the highlight upwards in the list.\n\n            // Scrolling behavior is covered by integration tests.\n            // istanbul ignore next\n            customScrollToIndex({\n              index,\n              menuEl: menuRefObject?.current,\n            });\n          } else {\n            scrollToIndex(index);\n          }\n        }\n        previousHighlightedIndex.current = index;\n      },\n      [firstOptionSticky, highlightType.moveFocus, scrollToIndex]\n    );\n\n    const stickySize = firstOptionSticky ? virtualItems[0].size : 0;\n    const withScrollbar = !!width && width.inner < width.outer;\n\n    const finalOptions = renderOptions({\n      options: virtualItems.map(({ index }) => filteredOptions[index]),\n      getOptionProps,\n      filteringValue,\n      highlightType,\n      checkboxes,\n      hasDropdownStatus,\n      virtualItems,\n      useInteractiveGroups,\n      screenReaderContent,\n      firstOptionSticky,\n      withScrollbar,\n    });\n\n    return (\n      <OptionsList {...menuProps} stickyItemBlockSize={stickySize} ref={menuRef}>\n        {finalOptions}\n        <div\n          aria-hidden=\"true\"\n          key=\"total-size\"\n          className={styles['layout-strut']}\n          style={{ height: totalSize - stickySize }}\n        />\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nconst VirtualListClosed = forwardRef(\n  ({ menuProps, listBottom }: SelectListProps, ref: React.Ref<SelectListProps.SelectListRef>) => {\n    useImperativeHandle(ref, () => () => {}, []);\n    return (\n      <OptionsList {...menuProps} ref={menuProps.ref}>\n        {listBottom ? (\n          <li role=\"option\" className={styles['list-bottom']}>\n            {listBottom}\n          </li>\n        ) : null}\n      </OptionsList>\n    );\n  }\n);\n\nexport default forwardRef(VirtualList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}