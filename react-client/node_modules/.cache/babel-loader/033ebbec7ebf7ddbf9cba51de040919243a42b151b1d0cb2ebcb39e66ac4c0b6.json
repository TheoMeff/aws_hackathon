{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useMemo } from 'react';\nimport { getCalendarMonthWithSixRows, getCalendarYear } from '../../internal/utils/date-time/calendar.js';\nimport { normalizeStartOfWeek } from '../../internal/utils/locale/index.js';\nexport default function useCalendarGridRows({\n  baseDate,\n  granularity,\n  locale,\n  startOfWeek: rawStartOfWeek\n}) {\n  const isMonthPicker = granularity === 'month';\n  const rows = useMemo(() => {\n    if (isMonthPicker) {\n      return getCalendarYear(baseDate);\n    } else {\n      const startOfWeek = normalizeStartOfWeek(rawStartOfWeek, locale);\n      return getCalendarMonthWithSixRows(baseDate, {\n        startOfWeek,\n        padDates: 'after'\n      });\n    }\n  }, [baseDate, isMonthPicker, rawStartOfWeek, locale]);\n  return rows;\n}","map":{"version":3,"names":["useMemo","getCalendarMonthWithSixRows","getCalendarYear","normalizeStartOfWeek","useCalendarGridRows","baseDate","granularity","locale","startOfWeek","rawStartOfWeek","isMonthPicker","rows","padDates"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/calendar/grid/use-calendar-grid-rows.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useMemo } from 'react';\n\nimport { getCalendarMonthWithSixRows, getCalendarYear } from '../../internal/utils/date-time/calendar.js';\nimport { normalizeStartOfWeek } from '../../internal/utils/locale/index.js';\nimport { CalendarProps } from '../interfaces.js';\n\nexport default function useCalendarGridRows({\n  baseDate,\n  granularity,\n  locale,\n  startOfWeek: rawStartOfWeek,\n}: {\n  baseDate: Date;\n  granularity: CalendarProps.Granularity;\n  locale: string;\n  startOfWeek?: number;\n}) {\n  const isMonthPicker = granularity === 'month';\n\n  const rows = useMemo<Date[][]>(() => {\n    if (isMonthPicker) {\n      return getCalendarYear(baseDate);\n    } else {\n      const startOfWeek = normalizeStartOfWeek(rawStartOfWeek, locale);\n      return getCalendarMonthWithSixRows(baseDate, { startOfWeek, padDates: 'after' });\n    }\n  }, [baseDate, isMonthPicker, rawStartOfWeek, locale]);\n\n  return rows;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,OAAO,QAAQ,OAAO;AAE/B,SAASC,2BAA2B,EAAEC,eAAe,QAAQ,4CAA4C;AACzG,SAASC,oBAAoB,QAAQ,sCAAsC;AAG3E,eAAc,SAAUC,mBAAmBA,CAAC;EAC1CC,QAAQ;EACRC,WAAW;EACXC,MAAM;EACNC,WAAW,EAAEC;AAAc,CAM5B;EACC,MAAMC,aAAa,GAAGJ,WAAW,KAAK,OAAO;EAE7C,MAAMK,IAAI,GAAGX,OAAO,CAAW,MAAK;IAClC,IAAIU,aAAa,EAAE;MACjB,OAAOR,eAAe,CAACG,QAAQ,CAAC;KACjC,MAAM;MACL,MAAMG,WAAW,GAAGL,oBAAoB,CAACM,cAAc,EAAEF,MAAM,CAAC;MAChE,OAAON,2BAA2B,CAACI,QAAQ,EAAE;QAAEG,WAAW;QAAEI,QAAQ,EAAE;MAAO,CAAE,CAAC;;EAEpF,CAAC,EAAE,CAACP,QAAQ,EAAEK,aAAa,EAAED,cAAc,EAAEF,MAAM,CAAC,CAAC;EAErD,OAAOI,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}