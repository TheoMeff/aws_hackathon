{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\nimport { getBaseProps } from '../../internal/base-component';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\nimport Option from '../../internal/components/option';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport Tooltip from '../../internal/components/tooltip';\nimport useHiddenDescription from '../../internal/hooks/use-hidden-description';\nimport styles from './styles.css.js';\nconst MultiSelectItem = (_a, ref) => {\n  var {\n      option,\n      highlighted,\n      selected,\n      filteringValue,\n      hasCheckbox,\n      virtualPosition,\n      padBottom,\n      isNextSelected,\n      indeterminate,\n      screenReaderContent,\n      ariaPosinset,\n      ariaSetsize,\n      highlightType,\n      withScrollbar,\n      sticky\n    } = _a,\n    restProps = __rest(_a, [\"option\", \"highlighted\", \"selected\", \"filteringValue\", \"hasCheckbox\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"indeterminate\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\", \"highlightType\", \"withScrollbar\", \"sticky\"]);\n  const baseProps = getBaseProps(restProps);\n  const isParent = option.type === 'parent';\n  const isChild = option.type === 'child';\n  const isSelectAll = option.type === 'select-all';\n  const wrappedOption = option.option;\n  const disabled = option.disabled || wrappedOption.disabled;\n  const disabledReason = disabled && (option.disabledReason || wrappedOption.disabledReason) ? option.disabledReason || wrappedOption.disabledReason : '';\n  const isDisabledWithReason = !!disabledReason;\n  const internalRef = useRef(null);\n  const className = styles.item;\n  const {\n    descriptionId,\n    descriptionEl\n  } = useHiddenDescription(disabledReason);\n  const [canShowTooltip, setCanShowTooltip] = useState(true);\n  useEffect(() => setCanShowTooltip(true), [highlighted]);\n  return React.createElement(SelectableItem, Object.assign({\n    ariaChecked: isParent && indeterminate ? 'mixed' : Boolean(selected),\n    selected: selected,\n    isNextSelected: isNextSelected,\n    highlighted: highlighted,\n    disabled: disabled,\n    isParent: isParent,\n    isChild: isChild,\n    isSelectAll: isSelectAll,\n    highlightType: highlightType,\n    ref: useMergeRefs(ref, internalRef),\n    virtualPosition: virtualPosition,\n    padBottom: padBottom,\n    useInteractiveGroups: true,\n    screenReaderContent: screenReaderContent,\n    ariaPosinset: ariaPosinset,\n    ariaSetsize: ariaSetsize,\n    ariaDescribedby: isDisabledWithReason ? descriptionId : '',\n    value: option.option.value,\n    afterHeader: option.afterHeader,\n    withScrollbar: withScrollbar,\n    sticky: sticky\n  }, baseProps), React.createElement(\"div\", {\n    className: className\n  }, hasCheckbox && React.createElement(\"div\", {\n    className: styles.checkbox\n  }, React.createElement(CheckboxIcon, {\n    checked: selected,\n    indeterminate: (isParent || isSelectAll) && indeterminate,\n    disabled: disabled\n  })), React.createElement(Option, {\n    option: Object.assign(Object.assign({}, wrappedOption), {\n      disabled\n    }),\n    highlightedOption: highlighted,\n    selectedOption: selected,\n    highlightText: filteringValue,\n    isGroupOption: isParent\n  })), isDisabledWithReason && React.createElement(React.Fragment, null, descriptionEl, highlighted && canShowTooltip && React.createElement(Tooltip, {\n    className: styles['disabled-reason-tooltip'],\n    trackRef: internalRef,\n    value: disabledReason,\n    position: \"right\",\n    hideOnOverscroll: true,\n    onDismiss: () => setCanShowTooltip(false)\n  })));\n};\nexport default React.memo(React.forwardRef(MultiSelectItem));","map":{"version":3,"names":["React","useEffect","useRef","useState","useMergeRefs","getBaseProps","CheckboxIcon","Option","SelectableItem","Tooltip","useHiddenDescription","styles","MultiSelectItem","_a","ref","option","highlighted","selected","filteringValue","hasCheckbox","virtualPosition","padBottom","isNextSelected","indeterminate","screenReaderContent","ariaPosinset","ariaSetsize","highlightType","withScrollbar","sticky","restProps","__rest","baseProps","isParent","type","isChild","isSelectAll","wrappedOption","disabled","disabledReason","isDisabledWithReason","internalRef","className","item","descriptionId","descriptionEl","canShowTooltip","setCanShowTooltip","createElement","Object","assign","ariaChecked","Boolean","useInteractiveGroups","ariaDescribedby","value","afterHeader","checkbox","checked","highlightedOption","selectedOption","highlightText","isGroupOption","Fragment","trackRef","position","hideOnOverscroll","onDismiss","memo","forwardRef"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/select/parts/multiselect-item.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\n\nimport { getBaseProps } from '../../internal/base-component';\nimport CheckboxIcon from '../../internal/components/checkbox-icon';\nimport Option from '../../internal/components/option';\nimport { OptionDefinition } from '../../internal/components/option/interfaces';\nimport SelectableItem from '../../internal/components/selectable-item';\nimport Tooltip from '../../internal/components/tooltip';\nimport useHiddenDescription from '../../internal/hooks/use-hidden-description';\nimport { ItemProps } from './item';\n\nimport styles from './styles.css.js';\ninterface MultiselectItemProps extends ItemProps {\n  indeterminate?: boolean;\n}\n\nconst MultiSelectItem = (\n  {\n    option,\n    highlighted,\n    selected,\n    filteringValue,\n    hasCheckbox,\n    virtualPosition,\n    padBottom,\n    isNextSelected,\n    indeterminate,\n    screenReaderContent,\n    ariaPosinset,\n    ariaSetsize,\n    highlightType,\n    withScrollbar,\n    sticky,\n    ...restProps\n  }: MultiselectItemProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const baseProps = getBaseProps(restProps);\n\n  const isParent = option.type === 'parent';\n  const isChild = option.type === 'child';\n  const isSelectAll = option.type === 'select-all';\n  const wrappedOption: OptionDefinition = option.option;\n  const disabled = option.disabled || wrappedOption.disabled;\n  const disabledReason =\n    disabled && (option.disabledReason || wrappedOption.disabledReason)\n      ? option.disabledReason || wrappedOption.disabledReason\n      : '';\n  const isDisabledWithReason = !!disabledReason;\n  const internalRef = useRef<HTMLDivElement>(null);\n  const className = styles.item;\n\n  const { descriptionId, descriptionEl } = useHiddenDescription(disabledReason);\n\n  const [canShowTooltip, setCanShowTooltip] = useState(true);\n  useEffect(() => setCanShowTooltip(true), [highlighted]);\n  return (\n    <SelectableItem\n      ariaChecked={isParent && indeterminate ? 'mixed' : Boolean(selected)}\n      selected={selected}\n      isNextSelected={isNextSelected}\n      highlighted={highlighted}\n      disabled={disabled}\n      isParent={isParent}\n      isChild={isChild}\n      isSelectAll={isSelectAll}\n      highlightType={highlightType}\n      ref={useMergeRefs(ref, internalRef)}\n      virtualPosition={virtualPosition}\n      padBottom={padBottom}\n      useInteractiveGroups={true}\n      screenReaderContent={screenReaderContent}\n      ariaPosinset={ariaPosinset}\n      ariaSetsize={ariaSetsize}\n      ariaDescribedby={isDisabledWithReason ? descriptionId : ''}\n      value={option.option.value}\n      afterHeader={option.afterHeader}\n      withScrollbar={withScrollbar}\n      sticky={sticky}\n      {...baseProps}\n    >\n      <div className={className}>\n        {hasCheckbox && (\n          <div className={styles.checkbox}>\n            <CheckboxIcon\n              checked={selected}\n              indeterminate={(isParent || isSelectAll) && indeterminate}\n              disabled={disabled}\n            />\n          </div>\n        )}\n        <Option\n          option={{ ...wrappedOption, disabled }}\n          highlightedOption={highlighted}\n          selectedOption={selected}\n          highlightText={filteringValue}\n          isGroupOption={isParent}\n        />\n      </div>\n      {isDisabledWithReason && (\n        <>\n          {descriptionEl}\n          {highlighted && canShowTooltip && (\n            <Tooltip\n              className={styles['disabled-reason-tooltip']}\n              trackRef={internalRef}\n              value={disabledReason!}\n              position=\"right\"\n              hideOnOverscroll={true}\n              onDismiss={() => setCanShowTooltip(false)}\n            />\n          )}\n        </>\n      )}\n    </SelectableItem>\n  );\n};\n\nexport default React.memo(React.forwardRef(MultiSelectItem));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}