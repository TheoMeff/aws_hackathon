{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getDaysInMonth } from 'date-fns';\nimport { displayToIso, parseDate } from '../internal/utils/date-time';\nfunction daysMax(value) {\n  // force to first day in month, as new Date('2018-02-30') -> March 2nd 2018\n  const baseDate = displayToIso(value).substring(0, 7);\n  return getDaysInMonth(parseDate(baseDate));\n}\nconst yearMask = {\n  min: 0,\n  max: 9999,\n  default: 2000,\n  length: 4\n};\nconst monthMask = {\n  min: 1,\n  max: 12,\n  length: 2\n};\nconst dayMask = {\n  min: 1,\n  max: daysMax,\n  length: 2\n};\nexport const generateMaskArgs = ({\n  granularity = 'day',\n  /**\n   * There are only two options, 'iso' and 'slashed' which is our current default format. If more formats are entered\n   * we should take the formatting type rather than teh boolean when we make an update\n   */\n  isIso = false\n} = {}) => {\n  return {\n    separator: isIso ? '-' : '/',\n    inputSeparators: [...(isIso ? ['/'] : ['-']), '.', ' '],\n    segments: granularity === 'month' ? [yearMask, monthMask] : [yearMask, monthMask, dayMask]\n  };\n};","map":{"version":3,"names":["getDaysInMonth","displayToIso","parseDate","daysMax","value","baseDate","substring","yearMask","min","max","default","length","monthMask","dayMask","generateMaskArgs","granularity","isIso","separator","inputSeparators","segments"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/date-input/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { getDaysInMonth } from 'date-fns';\n\nimport { CalendarProps } from '../calendar/interfaces';\nimport { MaskArgs } from '../internal/components/masked-input/utils/mask-format';\nimport { displayToIso, parseDate } from '../internal/utils/date-time';\n\nfunction daysMax(value: string): number {\n  // force to first day in month, as new Date('2018-02-30') -> March 2nd 2018\n  const baseDate = displayToIso(value).substring(0, 7);\n  return getDaysInMonth(parseDate(baseDate));\n}\n\nconst yearMask = { min: 0, max: 9999, default: 2000, length: 4 };\nconst monthMask = { min: 1, max: 12, length: 2 };\nconst dayMask = { min: 1, max: daysMax, length: 2 };\n\nexport interface GenerateMaskArgsProps extends Pick<CalendarProps, 'granularity'> {\n  isIso?: boolean;\n}\n\nexport const generateMaskArgs = ({\n  granularity = 'day',\n  /**\n   * There are only two options, 'iso' and 'slashed' which is our current default format. If more formats are entered\n   * we should take the formatting type rather than teh boolean when we make an update\n   */\n  isIso = false,\n}: GenerateMaskArgsProps = {}): MaskArgs => {\n  return {\n    separator: isIso ? '-' : '/',\n    inputSeparators: [...(isIso ? ['/'] : ['-']), '.', ' '],\n    segments: granularity === 'month' ? [yearMask, monthMask] : [yearMask, monthMask, dayMask],\n  };\n};\n"],"mappings":"AAAA;AACA;AAEA,SAASA,cAAc,QAAQ,UAAU;AAIzC,SAASC,YAAY,EAAEC,SAAS,QAAQ,6BAA6B;AAErE,SAASC,OAAOA,CAACC,KAAa;EAC5B;EACA,MAAMC,QAAQ,GAAGJ,YAAY,CAACG,KAAK,CAAC,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;EACpD,OAAON,cAAc,CAACE,SAAS,CAACG,QAAQ,CAAC,CAAC;AAC5C;AAEA,MAAME,QAAQ,GAAG;EAAEC,GAAG,EAAE,CAAC;EAAEC,GAAG,EAAE,IAAI;EAAEC,OAAO,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAC,CAAE;AAChE,MAAMC,SAAS,GAAG;EAAEJ,GAAG,EAAE,CAAC;EAAEC,GAAG,EAAE,EAAE;EAAEE,MAAM,EAAE;AAAC,CAAE;AAChD,MAAME,OAAO,GAAG;EAAEL,GAAG,EAAE,CAAC;EAAEC,GAAG,EAAEN,OAAO;EAAEQ,MAAM,EAAE;AAAC,CAAE;AAMnD,OAAO,MAAMG,gBAAgB,GAAGA,CAAC;EAC/BC,WAAW,GAAG,KAAK;EACnB;;;;EAIAC,KAAK,GAAG;AAAK,IACY,EAAE,KAAc;EACzC,OAAO;IACLC,SAAS,EAAED,KAAK,GAAG,GAAG,GAAG,GAAG;IAC5BE,eAAe,EAAE,CAAC,IAAIF,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC;IACvDG,QAAQ,EAAEJ,WAAW,KAAK,OAAO,GAAG,CAACR,QAAQ,EAAEK,SAAS,CAAC,GAAG,CAACL,QAAQ,EAAEK,SAAS,EAAEC,OAAO;GAC1F;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}