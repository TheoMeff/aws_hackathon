{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isValid, parseISO } from 'date-fns';\nimport { formatTimeOffsetLocalized } from './format-time-offset';\nexport default function formatDateLocalized({\n  date: isoDate,\n  hideTimeOffset,\n  isDateOnly,\n  isMonthOnly,\n  timeOffset,\n  locale\n}) {\n  let date = parseISO(isoDate);\n  // if the date is not ISO formatted, fallback to built-in date parsing\n  if (!isValid(date)) {\n    date = new Date(isoDate);\n  }\n  if (isMonthOnly) {\n    const formattedMonthDate = new Intl.DateTimeFormat(locale, {\n      month: 'long',\n      year: 'numeric'\n    }).format(date);\n    return formattedMonthDate;\n  }\n  const formattedDate = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    year: 'numeric',\n    day: 'numeric'\n  }).format(date);\n  if (isDateOnly) {\n    return formattedDate;\n  }\n  const formattedTime = new Intl.DateTimeFormat(locale, {\n    hour: '2-digit',\n    hourCycle: 'h23',\n    minute: '2-digit',\n    second: '2-digit'\n  }).format(date);\n  const formattedDateTime = formattedDate + getDateTimeSeparator(locale) + formattedTime;\n  if (hideTimeOffset) {\n    return formattedDateTime;\n  }\n  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);\n  return formattedDateTime + ' ' + formattedTimeOffset;\n}\n// Languages in which date and time are separated just with a space, without comma\nconst languagesWithoutDateTimeSeparator = ['ja', 'zh-CN', 'zh-TW'];\nfunction getDateTimeSeparator(locale) {\n  return locale && languagesWithoutDateTimeSeparator.includes(locale) ? ' ' : ', ';\n}","map":{"version":3,"names":["isValid","parseISO","formatTimeOffsetLocalized","formatDateLocalized","date","isoDate","hideTimeOffset","isDateOnly","isMonthOnly","timeOffset","locale","Date","formattedMonthDate","Intl","DateTimeFormat","month","year","format","formattedDate","day","formattedTime","hour","hourCycle","minute","second","formattedDateTime","getDateTimeSeparator","formattedTimeOffset","languagesWithoutDateTimeSeparator","includes"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/internal/utils/date-time/format-date-localized.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isValid, parseISO } from 'date-fns';\n\nimport { formatTimeOffsetLocalized } from './format-time-offset';\n\nexport default function formatDateLocalized({\n  date: isoDate,\n  hideTimeOffset,\n  isDateOnly,\n  isMonthOnly,\n  timeOffset,\n  locale,\n}: {\n  date: string;\n  hideTimeOffset?: boolean;\n  isMonthOnly: boolean;\n  isDateOnly: boolean;\n  timeOffset?: number;\n  locale?: string;\n}) {\n  let date = parseISO(isoDate);\n  // if the date is not ISO formatted, fallback to built-in date parsing\n  if (!isValid(date)) {\n    date = new Date(isoDate);\n  }\n\n  if (isMonthOnly) {\n    const formattedMonthDate = new Intl.DateTimeFormat(locale, {\n      month: 'long',\n      year: 'numeric',\n    }).format(date);\n\n    return formattedMonthDate;\n  }\n\n  const formattedDate = new Intl.DateTimeFormat(locale, {\n    month: 'long',\n    year: 'numeric',\n    day: 'numeric',\n  }).format(date);\n\n  if (isDateOnly) {\n    return formattedDate;\n  }\n\n  const formattedTime = new Intl.DateTimeFormat(locale, {\n    hour: '2-digit',\n    hourCycle: 'h23',\n    minute: '2-digit',\n    second: '2-digit',\n  }).format(date);\n\n  const formattedDateTime = formattedDate + getDateTimeSeparator(locale) + formattedTime;\n\n  if (hideTimeOffset) {\n    return formattedDateTime;\n  }\n\n  const formattedTimeOffset = formatTimeOffsetLocalized(isoDate, timeOffset);\n  return formattedDateTime + ' ' + formattedTimeOffset;\n}\n\n// Languages in which date and time are separated just with a space, without comma\nconst languagesWithoutDateTimeSeparator = ['ja', 'zh-CN', 'zh-TW'];\n\nfunction getDateTimeSeparator(locale?: string) {\n  return locale && languagesWithoutDateTimeSeparator.includes(locale) ? ' ' : ', ';\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,OAAO,EAAEC,QAAQ,QAAQ,UAAU;AAE5C,SAASC,yBAAyB,QAAQ,sBAAsB;AAEhE,eAAc,SAAUC,mBAAmBA,CAAC;EAC1CC,IAAI,EAAEC,OAAO;EACbC,cAAc;EACdC,UAAU;EACVC,WAAW;EACXC,UAAU;EACVC;AAAM,CAQP;EACC,IAAIN,IAAI,GAAGH,QAAQ,CAACI,OAAO,CAAC;EAC5B;EACA,IAAI,CAACL,OAAO,CAACI,IAAI,CAAC,EAAE;IAClBA,IAAI,GAAG,IAAIO,IAAI,CAACN,OAAO,CAAC;;EAG1B,IAAIG,WAAW,EAAE;IACf,MAAMI,kBAAkB,GAAG,IAAIC,IAAI,CAACC,cAAc,CAACJ,MAAM,EAAE;MACzDK,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE;KACP,CAAC,CAACC,MAAM,CAACb,IAAI,CAAC;IAEf,OAAOQ,kBAAkB;;EAG3B,MAAMM,aAAa,GAAG,IAAIL,IAAI,CAACC,cAAc,CAACJ,MAAM,EAAE;IACpDK,KAAK,EAAE,MAAM;IACbC,IAAI,EAAE,SAAS;IACfG,GAAG,EAAE;GACN,CAAC,CAACF,MAAM,CAACb,IAAI,CAAC;EAEf,IAAIG,UAAU,EAAE;IACd,OAAOW,aAAa;;EAGtB,MAAME,aAAa,GAAG,IAAIP,IAAI,CAACC,cAAc,CAACJ,MAAM,EAAE;IACpDW,IAAI,EAAE,SAAS;IACfC,SAAS,EAAE,KAAK;IAChBC,MAAM,EAAE,SAAS;IACjBC,MAAM,EAAE;GACT,CAAC,CAACP,MAAM,CAACb,IAAI,CAAC;EAEf,MAAMqB,iBAAiB,GAAGP,aAAa,GAAGQ,oBAAoB,CAAChB,MAAM,CAAC,GAAGU,aAAa;EAEtF,IAAId,cAAc,EAAE;IAClB,OAAOmB,iBAAiB;;EAG1B,MAAME,mBAAmB,GAAGzB,yBAAyB,CAACG,OAAO,EAAEI,UAAU,CAAC;EAC1E,OAAOgB,iBAAiB,GAAG,GAAG,GAAGE,mBAAmB;AACtD;AAEA;AACA,MAAMC,iCAAiC,GAAG,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,CAAC;AAElE,SAASF,oBAAoBA,CAAChB,MAAe;EAC3C,OAAOA,MAAM,IAAIkB,iCAAiC,CAACC,QAAQ,CAACnB,MAAM,CAAC,GAAG,GAAG,GAAG,IAAI;AAClF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}