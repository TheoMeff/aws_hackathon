{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useCallback, useEffect, useImperativeHandle, useRef } from 'react';\nimport clsx from 'clsx';\nimport { useDensityMode } from '@cloudscape-design/component-toolkit/internal';\nimport InternalButton from '../button/internal';\nimport { convertAutoComplete } from '../input/utils';\nimport { getBaseProps } from '../internal/base-component';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport * as tokens from '../internal/generated/styles/tokens';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\nconst InternalPromptInput = React.forwardRef((_a, ref) => {\n  var {\n      value,\n      actionButtonAriaLabel,\n      actionButtonIconName,\n      actionButtonIconUrl,\n      actionButtonIconSvg,\n      actionButtonIconAlt,\n      ariaLabel,\n      autoComplete,\n      autoFocus,\n      disableActionButton,\n      disableBrowserAutocorrect,\n      disabled,\n      maxRows,\n      minRows,\n      name,\n      onAction,\n      onBlur,\n      onChange,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      placeholder,\n      readOnly,\n      spellcheck,\n      secondaryActions,\n      secondaryContent,\n      disableSecondaryActionsPaddings,\n      disableSecondaryContentPaddings,\n      __internalRootRef = null\n    } = _a,\n    rest = __rest(_a, [\"value\", \"actionButtonAriaLabel\", \"actionButtonIconName\", \"actionButtonIconUrl\", \"actionButtonIconSvg\", \"actionButtonIconAlt\", \"ariaLabel\", \"autoComplete\", \"autoFocus\", \"disableActionButton\", \"disableBrowserAutocorrect\", \"disabled\", \"maxRows\", \"minRows\", \"name\", \"onAction\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onKeyUp\", \"placeholder\", \"readOnly\", \"spellcheck\", \"secondaryActions\", \"secondaryContent\", \"disableSecondaryActionsPaddings\", \"disableSecondaryContentPaddings\", \"__internalRootRef\"]);\n  const {\n    ariaLabelledby,\n    ariaDescribedby,\n    controlId,\n    invalid,\n    warning\n  } = useFormFieldContext(rest);\n  const baseProps = getBaseProps(rest);\n  const textareaRef = useRef(null);\n  const isRefresh = useVisualRefresh();\n  const isCompactMode = useDensityMode(textareaRef) === 'compact';\n  const PADDING = isRefresh ? tokens.spaceXxs : tokens.spaceXxxs;\n  const LINE_HEIGHT = tokens.lineHeightBodyM;\n  const DEFAULT_MAX_ROWS = 3;\n  useImperativeHandle(ref, () => ({\n    focus(...args) {\n      var _a;\n      (_a = textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus(...args);\n    },\n    select() {\n      var _a;\n      (_a = textareaRef.current) === null || _a === void 0 ? void 0 : _a.select();\n    },\n    setSelectionRange(...args) {\n      var _a;\n      (_a = textareaRef.current) === null || _a === void 0 ? void 0 : _a.setSelectionRange(...args);\n    }\n  }), [textareaRef]);\n  const handleKeyDown = event => {\n    fireKeyboardEvent(onKeyDown, event);\n    if (event.key === 'Enter' && !event.shiftKey) {\n      if ('form' in event.target && event.target.form !== null && !event.isDefaultPrevented()) {\n        event.target.form.requestSubmit();\n      }\n      event.preventDefault();\n      fireNonCancelableEvent(onAction, {\n        value\n      });\n    }\n  };\n  const handleChange = event => {\n    fireNonCancelableEvent(onChange, {\n      value: event.target.value\n    });\n    adjustTextareaHeight();\n  };\n  const hasActionButton = actionButtonIconName || actionButtonIconSvg || actionButtonIconUrl;\n  const adjustTextareaHeight = useCallback(() => {\n    if (textareaRef.current) {\n      // this is required so the scrollHeight becomes dynamic, otherwise it will be locked at the highest value for the size it reached e.g. 500px\n      textareaRef.current.style.height = 'auto';\n      const minTextareaHeight = `calc(${LINE_HEIGHT} +  ${tokens.spaceScaledXxs} * 2)`; // the min height of Textarea with 1 row\n      if (maxRows === -1) {\n        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;\n        textareaRef.current.style.height = `max(${scrollHeight}, ${minTextareaHeight})`;\n      } else {\n        const maxRowsHeight = `calc(${maxRows <= 0 ? DEFAULT_MAX_ROWS : maxRows} * (${LINE_HEIGHT} + ${PADDING} / 2) + ${PADDING})`;\n        const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;\n        textareaRef.current.style.height = `min(max(${scrollHeight}, ${minTextareaHeight}), ${maxRowsHeight})`;\n      }\n    }\n  }, [maxRows, LINE_HEIGHT, PADDING]);\n  useEffect(() => {\n    const handleResize = () => {\n      adjustTextareaHeight();\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [adjustTextareaHeight]);\n  useEffect(() => {\n    adjustTextareaHeight();\n  }, [value, adjustTextareaHeight, maxRows, isCompactMode]);\n  const attributes = {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': ariaDescribedby,\n    'aria-invalid': invalid ? 'true' : undefined,\n    name,\n    placeholder,\n    autoFocus,\n    className: clsx(styles.textarea, testutilStyles.textarea, {\n      [styles.invalid]: invalid,\n      [styles.warning]: warning\n    }),\n    autoComplete: convertAutoComplete(autoComplete),\n    spellCheck: spellcheck,\n    disabled,\n    readOnly: readOnly ? true : undefined,\n    rows: minRows,\n    onKeyDown: handleKeyDown,\n    onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n    // We set a default value on the component in order to force it into the controlled mode.\n    value: value || '',\n    onChange: handleChange,\n    onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),\n    onFocus: onFocus && (() => fireNonCancelableEvent(onFocus))\n  };\n  if (disableBrowserAutocorrect) {\n    attributes.autoCorrect = 'off';\n    attributes.autoCapitalize = 'off';\n  }\n  const action = React.createElement(\"div\", {\n    className: styles.button\n  }, React.createElement(InternalButton, {\n    className: clsx(styles['action-button'], testutilStyles['action-button']),\n    ariaLabel: actionButtonAriaLabel,\n    disabled: disabled || readOnly || disableActionButton,\n    __focusable: readOnly,\n    iconName: actionButtonIconName,\n    iconUrl: actionButtonIconUrl,\n    iconSvg: actionButtonIconSvg,\n    iconAlt: actionButtonIconAlt,\n    onClick: () => fireNonCancelableEvent(onAction, {\n      value\n    }),\n    variant: \"icon\"\n  }));\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    \"aria-label\": ariaLabel,\n    className: clsx(styles.root, testutilStyles.root, baseProps.className, {\n      [styles['textarea-readonly']]: readOnly,\n      [styles['textarea-invalid']]: invalid,\n      [styles['textarea-warning']]: warning && !invalid,\n      [styles.disabled]: disabled\n    }),\n    ref: __internalRootRef,\n    role: \"region\"\n  }), secondaryContent && React.createElement(\"div\", {\n    className: clsx(styles['secondary-content'], testutilStyles['secondary-content'], {\n      [styles['with-paddings']]: !disableSecondaryContentPaddings,\n      [styles.invalid]: invalid,\n      [styles.warning]: warning\n    })\n  }, secondaryContent), React.createElement(\"div\", {\n    className: styles['textarea-wrapper']\n  }, React.createElement(\"textarea\", Object.assign({\n    ref: textareaRef,\n    id: controlId\n  }, attributes)), hasActionButton && !secondaryActions && action), secondaryActions && React.createElement(\"div\", {\n    className: clsx(styles['secondary-actions'], testutilStyles['secondary-actions'], {\n      [styles['with-paddings']]: !disableSecondaryActionsPaddings,\n      [styles.invalid]: invalid,\n      [styles.warning]: warning\n    })\n  }, secondaryActions, React.createElement(\"div\", {\n    className: styles.buffer,\n    onClick: () => {\n      var _a;\n      return (_a = textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }\n  }), hasActionButton && action));\n});\nexport default InternalPromptInput;","map":{"version":3,"names":["React","useCallback","useEffect","useImperativeHandle","useRef","clsx","useDensityMode","InternalButton","convertAutoComplete","getBaseProps","useFormFieldContext","fireKeyboardEvent","fireNonCancelableEvent","tokens","useVisualRefresh","styles","testutilStyles","InternalPromptInput","forwardRef","_a","ref","value","actionButtonAriaLabel","actionButtonIconName","actionButtonIconUrl","actionButtonIconSvg","actionButtonIconAlt","ariaLabel","autoComplete","autoFocus","disableActionButton","disableBrowserAutocorrect","disabled","maxRows","minRows","name","onAction","onBlur","onChange","onFocus","onKeyDown","onKeyUp","placeholder","readOnly","spellcheck","secondaryActions","secondaryContent","disableSecondaryActionsPaddings","disableSecondaryContentPaddings","__internalRootRef","rest","__rest","ariaLabelledby","ariaDescribedby","controlId","invalid","warning","baseProps","textareaRef","isRefresh","isCompactMode","PADDING","spaceXxs","spaceXxxs","LINE_HEIGHT","lineHeightBodyM","DEFAULT_MAX_ROWS","focus","args","current","select","setSelectionRange","handleKeyDown","event","key","shiftKey","target","form","isDefaultPrevented","requestSubmit","preventDefault","handleChange","adjustTextareaHeight","hasActionButton","style","height","minTextareaHeight","spaceScaledXxs","scrollHeight","maxRowsHeight","handleResize","window","addEventListener","removeEventListener","attributes","undefined","className","textarea","spellCheck","rows","autoCorrect","autoCapitalize","action","createElement","button","__focusable","iconName","iconUrl","iconSvg","iconAlt","onClick","variant","Object","assign","root","role","id","buffer"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/prompt-input/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { Ref, useCallback, useEffect, useImperativeHandle, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useDensityMode } from '@cloudscape-design/component-toolkit/internal';\n\nimport InternalButton from '../button/internal';\nimport { convertAutoComplete } from '../input/utils';\nimport { getBaseProps } from '../internal/base-component';\nimport { useFormFieldContext } from '../internal/context/form-field-context';\nimport { fireKeyboardEvent, fireNonCancelableEvent } from '../internal/events';\nimport * as tokens from '../internal/generated/styles/tokens';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { SomeRequired } from '../internal/types';\nimport { PromptInputProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport testutilStyles from './test-classes/styles.css.js';\n\ninterface InternalPromptInputProps\n  extends SomeRequired<PromptInputProps, 'maxRows' | 'minRows'>,\n    InternalBaseComponentProps {}\n\nconst InternalPromptInput = React.forwardRef(\n  (\n    {\n      value,\n      actionButtonAriaLabel,\n      actionButtonIconName,\n      actionButtonIconUrl,\n      actionButtonIconSvg,\n      actionButtonIconAlt,\n      ariaLabel,\n      autoComplete,\n      autoFocus,\n      disableActionButton,\n      disableBrowserAutocorrect,\n      disabled,\n      maxRows,\n      minRows,\n      name,\n      onAction,\n      onBlur,\n      onChange,\n      onFocus,\n      onKeyDown,\n      onKeyUp,\n      placeholder,\n      readOnly,\n      spellcheck,\n      secondaryActions,\n      secondaryContent,\n      disableSecondaryActionsPaddings,\n      disableSecondaryContentPaddings,\n      __internalRootRef = null,\n      ...rest\n    }: InternalPromptInputProps,\n    ref: Ref<PromptInputProps.Ref>\n  ) => {\n    const { ariaLabelledby, ariaDescribedby, controlId, invalid, warning } = useFormFieldContext(rest);\n\n    const baseProps = getBaseProps(rest);\n\n    const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n    const isRefresh = useVisualRefresh();\n    const isCompactMode = useDensityMode(textareaRef) === 'compact';\n\n    const PADDING = isRefresh ? tokens.spaceXxs : tokens.spaceXxxs;\n    const LINE_HEIGHT = tokens.lineHeightBodyM;\n    const DEFAULT_MAX_ROWS = 3;\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        focus(...args: Parameters<HTMLElement['focus']>) {\n          textareaRef.current?.focus(...args);\n        },\n        select() {\n          textareaRef.current?.select();\n        },\n        setSelectionRange(...args: Parameters<HTMLTextAreaElement['setSelectionRange']>) {\n          textareaRef.current?.setSelectionRange(...args);\n        },\n      }),\n      [textareaRef]\n    );\n\n    const handleKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n      fireKeyboardEvent(onKeyDown, event);\n\n      if (event.key === 'Enter' && !event.shiftKey) {\n        if ('form' in event.target && event.target.form !== null && !event.isDefaultPrevented()) {\n          (event.target.form as HTMLFormElement).requestSubmit();\n        }\n\n        event.preventDefault();\n        fireNonCancelableEvent(onAction, { value });\n      }\n    };\n\n    const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      fireNonCancelableEvent(onChange, { value: event.target.value });\n      adjustTextareaHeight();\n    };\n\n    const hasActionButton = actionButtonIconName || actionButtonIconSvg || actionButtonIconUrl;\n\n    const adjustTextareaHeight = useCallback(() => {\n      if (textareaRef.current) {\n        // this is required so the scrollHeight becomes dynamic, otherwise it will be locked at the highest value for the size it reached e.g. 500px\n        textareaRef.current.style.height = 'auto';\n\n        const minTextareaHeight = `calc(${LINE_HEIGHT} +  ${tokens.spaceScaledXxs} * 2)`; // the min height of Textarea with 1 row\n\n        if (maxRows === -1) {\n          const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;\n          textareaRef.current.style.height = `max(${scrollHeight}, ${minTextareaHeight})`;\n        } else {\n          const maxRowsHeight = `calc(${maxRows <= 0 ? DEFAULT_MAX_ROWS : maxRows} * (${LINE_HEIGHT} + ${PADDING} / 2) + ${PADDING})`;\n          const scrollHeight = `calc(${textareaRef.current.scrollHeight}px)`;\n          textareaRef.current.style.height = `min(max(${scrollHeight}, ${minTextareaHeight}), ${maxRowsHeight})`;\n        }\n      }\n    }, [maxRows, LINE_HEIGHT, PADDING]);\n\n    useEffect(() => {\n      const handleResize = () => {\n        adjustTextareaHeight();\n      };\n\n      window.addEventListener('resize', handleResize);\n\n      return () => {\n        window.removeEventListener('resize', handleResize);\n      };\n    }, [adjustTextareaHeight]);\n\n    useEffect(() => {\n      adjustTextareaHeight();\n    }, [value, adjustTextareaHeight, maxRows, isCompactMode]);\n\n    const attributes: React.TextareaHTMLAttributes<HTMLTextAreaElement> = {\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby,\n      'aria-invalid': invalid ? 'true' : undefined,\n      name,\n      placeholder,\n      autoFocus,\n      className: clsx(styles.textarea, testutilStyles.textarea, {\n        [styles.invalid]: invalid,\n        [styles.warning]: warning,\n      }),\n      autoComplete: convertAutoComplete(autoComplete),\n      spellCheck: spellcheck,\n      disabled,\n      readOnly: readOnly ? true : undefined,\n      rows: minRows,\n      onKeyDown: handleKeyDown,\n      onKeyUp: onKeyUp && (event => fireKeyboardEvent(onKeyUp, event)),\n      // We set a default value on the component in order to force it into the controlled mode.\n      value: value || '',\n      onChange: handleChange,\n      onBlur: onBlur && (() => fireNonCancelableEvent(onBlur)),\n      onFocus: onFocus && (() => fireNonCancelableEvent(onFocus)),\n    };\n\n    if (disableBrowserAutocorrect) {\n      attributes.autoCorrect = 'off';\n      attributes.autoCapitalize = 'off';\n    }\n\n    const action = (\n      <div className={styles.button}>\n        <InternalButton\n          className={clsx(styles['action-button'], testutilStyles['action-button'])}\n          ariaLabel={actionButtonAriaLabel}\n          disabled={disabled || readOnly || disableActionButton}\n          __focusable={readOnly}\n          iconName={actionButtonIconName}\n          iconUrl={actionButtonIconUrl}\n          iconSvg={actionButtonIconSvg}\n          iconAlt={actionButtonIconAlt}\n          onClick={() => fireNonCancelableEvent(onAction, { value })}\n          variant=\"icon\"\n        />\n      </div>\n    );\n\n    return (\n      <div\n        {...baseProps}\n        aria-label={ariaLabel}\n        className={clsx(styles.root, testutilStyles.root, baseProps.className, {\n          [styles['textarea-readonly']]: readOnly,\n          [styles['textarea-invalid']]: invalid,\n          [styles['textarea-warning']]: warning && !invalid,\n          [styles.disabled]: disabled,\n        })}\n        ref={__internalRootRef}\n        role=\"region\"\n      >\n        {secondaryContent && (\n          <div\n            className={clsx(styles['secondary-content'], testutilStyles['secondary-content'], {\n              [styles['with-paddings']]: !disableSecondaryContentPaddings,\n              [styles.invalid]: invalid,\n              [styles.warning]: warning,\n            })}\n          >\n            {secondaryContent}\n          </div>\n        )}\n        <div className={styles['textarea-wrapper']}>\n          <textarea ref={textareaRef} id={controlId} {...attributes} />\n          {hasActionButton && !secondaryActions && action}\n        </div>\n        {secondaryActions && (\n          <div\n            className={clsx(styles['secondary-actions'], testutilStyles['secondary-actions'], {\n              [styles['with-paddings']]: !disableSecondaryActionsPaddings,\n              [styles.invalid]: invalid,\n              [styles.warning]: warning,\n            })}\n          >\n            {secondaryActions}\n            <div className={styles.buffer} onClick={() => textareaRef.current?.focus()} />\n            {hasActionButton && action}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default InternalPromptInput;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,IAASC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,MAAM,QAAQ,OAAO;AACvF,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,cAAc,QAAQ,+CAA+C;AAE9E,OAAOC,cAAc,MAAM,oBAAoB;AAC/C,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,mBAAmB,QAAQ,wCAAwC;AAC5E,SAASC,iBAAiB,EAAEC,sBAAsB,QAAQ,oBAAoB;AAC9E,OAAO,KAAKC,MAAM,MAAM,qCAAqC;AAE7D,SAASC,gBAAgB,QAAQ,mCAAmC;AAIpE,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,cAAc,MAAM,8BAA8B;AAMzD,MAAMC,mBAAmB,GAAGjB,KAAK,CAACkB,UAAU,CAC1C,CACEC,EA+B2B,EAC3BC,GAA8B,KAC5B;MAjCF;MACEC,KAAK;MACLC,qBAAqB;MACrBC,oBAAoB;MACpBC,mBAAmB;MACnBC,mBAAmB;MACnBC,mBAAmB;MACnBC,SAAS;MACTC,YAAY;MACZC,SAAS;MACTC,mBAAmB;MACnBC,yBAAyB;MACzBC,QAAQ;MACRC,OAAO;MACPC,OAAO;MACPC,IAAI;MACJC,QAAQ;MACRC,MAAM;MACNC,QAAQ;MACRC,OAAO;MACPC,SAAS;MACTC,OAAO;MACPC,WAAW;MACXC,QAAQ;MACRC,UAAU;MACVC,gBAAgB;MAChBC,gBAAgB;MAChBC,+BAA+B;MAC/BC,+BAA+B;MAC/BC,iBAAiB,GAAG;IAAI,IAAA9B,EAEC;IADtB+B,IAAI,GAAAC,MAAA,CAAAhC,EAAA,EA9BT,wfA+BC,CADQ;EAIT,MAAM;IAAEiC,cAAc;IAAEC,eAAe;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAO,CAAE,GAAG9C,mBAAmB,CAACwC,IAAI,CAAC;EAElG,MAAMO,SAAS,GAAGhD,YAAY,CAACyC,IAAI,CAAC;EAEpC,MAAMQ,WAAW,GAAGtD,MAAM,CAAsB,IAAI,CAAC;EAErD,MAAMuD,SAAS,GAAG7C,gBAAgB,EAAE;EACpC,MAAM8C,aAAa,GAAGtD,cAAc,CAACoD,WAAW,CAAC,KAAK,SAAS;EAE/D,MAAMG,OAAO,GAAGF,SAAS,GAAG9C,MAAM,CAACiD,QAAQ,GAAGjD,MAAM,CAACkD,SAAS;EAC9D,MAAMC,WAAW,GAAGnD,MAAM,CAACoD,eAAe;EAC1C,MAAMC,gBAAgB,GAAG,CAAC;EAE1B/D,mBAAmB,CACjBiB,GAAG,EACH,OAAO;IACL+C,KAAKA,CAAC,GAAGC,IAAsC;;MAC7C,CAAAjD,EAAA,GAAAuC,WAAW,CAACW,OAAO,cAAAlD,EAAA,uBAAAA,EAAA,CAAEgD,KAAK,CAAC,GAAGC,IAAI,CAAC;IACrC,CAAC;IACDE,MAAMA,CAAA;;MACJ,CAAAnD,EAAA,GAAAuC,WAAW,CAACW,OAAO,cAAAlD,EAAA,uBAAAA,EAAA,CAAEmD,MAAM,EAAE;IAC/B,CAAC;IACDC,iBAAiBA,CAAC,GAAGH,IAA0D;;MAC7E,CAAAjD,EAAA,GAAAuC,WAAW,CAACW,OAAO,cAAAlD,EAAA,uBAAAA,EAAA,CAAEoD,iBAAiB,CAAC,GAAGH,IAAI,CAAC;IACjD;GACD,CAAC,EACF,CAACV,WAAW,CAAC,CACd;EAED,MAAMc,aAAa,GAAIC,KAA+C,IAAI;IACxE9D,iBAAiB,CAAC6B,SAAS,EAAEiC,KAAK,CAAC;IAEnC,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,IAAI,CAACD,KAAK,CAACE,QAAQ,EAAE;MAC5C,IAAI,MAAM,IAAIF,KAAK,CAACG,MAAM,IAAIH,KAAK,CAACG,MAAM,CAACC,IAAI,KAAK,IAAI,IAAI,CAACJ,KAAK,CAACK,kBAAkB,EAAE,EAAE;QACtFL,KAAK,CAACG,MAAM,CAACC,IAAwB,CAACE,aAAa,EAAE;;MAGxDN,KAAK,CAACO,cAAc,EAAE;MACtBpE,sBAAsB,CAACwB,QAAQ,EAAE;QAAEf;MAAK,CAAE,CAAC;;EAE/C,CAAC;EAED,MAAM4D,YAAY,GAAIR,KAA6C,IAAI;IACrE7D,sBAAsB,CAAC0B,QAAQ,EAAE;MAAEjB,KAAK,EAAEoD,KAAK,CAACG,MAAM,CAACvD;IAAK,CAAE,CAAC;IAC/D6D,oBAAoB,EAAE;EACxB,CAAC;EAED,MAAMC,eAAe,GAAG5D,oBAAoB,IAAIE,mBAAmB,IAAID,mBAAmB;EAE1F,MAAM0D,oBAAoB,GAAGjF,WAAW,CAAC,MAAK;IAC5C,IAAIyD,WAAW,CAACW,OAAO,EAAE;MACvB;MACAX,WAAW,CAACW,OAAO,CAACe,KAAK,CAACC,MAAM,GAAG,MAAM;MAEzC,MAAMC,iBAAiB,GAAG,QAAQtB,WAAW,OAAOnD,MAAM,CAAC0E,cAAc,OAAO,CAAC,CAAC;MAElF,IAAItD,OAAO,KAAK,CAAC,CAAC,EAAE;QAClB,MAAMuD,YAAY,GAAG,QAAQ9B,WAAW,CAACW,OAAO,CAACmB,YAAY,KAAK;QAClE9B,WAAW,CAACW,OAAO,CAACe,KAAK,CAACC,MAAM,GAAG,OAAOG,YAAY,KAAKF,iBAAiB,GAAG;OAChF,MAAM;QACL,MAAMG,aAAa,GAAG,QAAQxD,OAAO,IAAI,CAAC,GAAGiC,gBAAgB,GAAGjC,OAAO,OAAO+B,WAAW,MAAMH,OAAO,WAAWA,OAAO,GAAG;QAC3H,MAAM2B,YAAY,GAAG,QAAQ9B,WAAW,CAACW,OAAO,CAACmB,YAAY,KAAK;QAClE9B,WAAW,CAACW,OAAO,CAACe,KAAK,CAACC,MAAM,GAAG,WAAWG,YAAY,KAAKF,iBAAiB,MAAMG,aAAa,GAAG;;;EAG5G,CAAC,EAAE,CAACxD,OAAO,EAAE+B,WAAW,EAAEH,OAAO,CAAC,CAAC;EAEnC3D,SAAS,CAAC,MAAK;IACb,MAAMwF,YAAY,GAAGA,CAAA,KAAK;MACxBR,oBAAoB,EAAE;IACxB,CAAC;IAEDS,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IAE/C,OAAO,MAAK;MACVC,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,CAACR,oBAAoB,CAAC,CAAC;EAE1BhF,SAAS,CAAC,MAAK;IACbgF,oBAAoB,EAAE;EACxB,CAAC,EAAE,CAAC7D,KAAK,EAAE6D,oBAAoB,EAAEjD,OAAO,EAAE2B,aAAa,CAAC,CAAC;EAEzD,MAAMkC,UAAU,GAAsD;IACpE,YAAY,EAAEnE,SAAS;IACvB,iBAAiB,EAAEyB,cAAc;IACjC,kBAAkB,EAAEC,eAAe;IACnC,cAAc,EAAEE,OAAO,GAAG,MAAM,GAAGwC,SAAS;IAC5C5D,IAAI;IACJO,WAAW;IACXb,SAAS;IACTmE,SAAS,EAAE3F,IAAI,CAACU,MAAM,CAACkF,QAAQ,EAAEjF,cAAc,CAACiF,QAAQ,EAAE;MACxD,CAAClF,MAAM,CAACwC,OAAO,GAAGA,OAAO;MACzB,CAACxC,MAAM,CAACyC,OAAO,GAAGA;KACnB,CAAC;IACF5B,YAAY,EAAEpB,mBAAmB,CAACoB,YAAY,CAAC;IAC/CsE,UAAU,EAAEtD,UAAU;IACtBZ,QAAQ;IACRW,QAAQ,EAAEA,QAAQ,GAAG,IAAI,GAAGoD,SAAS;IACrCI,IAAI,EAAEjE,OAAO;IACbM,SAAS,EAAEgC,aAAa;IACxB/B,OAAO,EAAEA,OAAO,KAAKgC,KAAK,IAAI9D,iBAAiB,CAAC8B,OAAO,EAAEgC,KAAK,CAAC,CAAC;IAChE;IACApD,KAAK,EAAEA,KAAK,IAAI,EAAE;IAClBiB,QAAQ,EAAE2C,YAAY;IACtB5C,MAAM,EAAEA,MAAM,KAAK,MAAMzB,sBAAsB,CAACyB,MAAM,CAAC,CAAC;IACxDE,OAAO,EAAEA,OAAO,KAAK,MAAM3B,sBAAsB,CAAC2B,OAAO,CAAC;GAC3D;EAED,IAAIR,yBAAyB,EAAE;IAC7B+D,UAAU,CAACM,WAAW,GAAG,KAAK;IAC9BN,UAAU,CAACO,cAAc,GAAG,KAAK;;EAGnC,MAAMC,MAAM,GACVtG,KAAA,CAAAuG,aAAA;IAAKP,SAAS,EAAEjF,MAAM,CAACyF;EAAM,GAC3BxG,KAAA,CAAAuG,aAAA,CAAChG,cAAc;IACbyF,SAAS,EAAE3F,IAAI,CAACU,MAAM,CAAC,eAAe,CAAC,EAAEC,cAAc,CAAC,eAAe,CAAC,CAAC;IACzEW,SAAS,EAAEL,qBAAqB;IAChCU,QAAQ,EAAEA,QAAQ,IAAIW,QAAQ,IAAIb,mBAAmB;IACrD2E,WAAW,EAAE9D,QAAQ;IACrB+D,QAAQ,EAAEnF,oBAAoB;IAC9BoF,OAAO,EAAEnF,mBAAmB;IAC5BoF,OAAO,EAAEnF,mBAAmB;IAC5BoF,OAAO,EAAEnF,mBAAmB;IAC5BoF,OAAO,EAAEA,CAAA,KAAMlG,sBAAsB,CAACwB,QAAQ,EAAE;MAAEf;IAAK,CAAE,CAAC;IAC1D0F,OAAO,EAAC;EAAM,EACd,CAEL;EAED,OACE/G,KAAA,CAAAuG,aAAA,QAAAS,MAAA,CAAAC,MAAA,KACMxD,SAAS;IAAA,cACD9B,SAAS;IACrBqE,SAAS,EAAE3F,IAAI,CAACU,MAAM,CAACmG,IAAI,EAAElG,cAAc,CAACkG,IAAI,EAAEzD,SAAS,CAACuC,SAAS,EAAE;MACrE,CAACjF,MAAM,CAAC,mBAAmB,CAAC,GAAG4B,QAAQ;MACvC,CAAC5B,MAAM,CAAC,kBAAkB,CAAC,GAAGwC,OAAO;MACrC,CAACxC,MAAM,CAAC,kBAAkB,CAAC,GAAGyC,OAAO,IAAI,CAACD,OAAO;MACjD,CAACxC,MAAM,CAACiB,QAAQ,GAAGA;KACpB,CAAC;IACFZ,GAAG,EAAE6B,iBAAiB;IACtBkE,IAAI,EAAC;EAAQ,IAEZrE,gBAAgB,IACf9C,KAAA,CAAAuG,aAAA;IACEP,SAAS,EAAE3F,IAAI,CAACU,MAAM,CAAC,mBAAmB,CAAC,EAAEC,cAAc,CAAC,mBAAmB,CAAC,EAAE;MAChF,CAACD,MAAM,CAAC,eAAe,CAAC,GAAG,CAACiC,+BAA+B;MAC3D,CAACjC,MAAM,CAACwC,OAAO,GAAGA,OAAO;MACzB,CAACxC,MAAM,CAACyC,OAAO,GAAGA;KACnB;EAAC,GAEDV,gBAAgB,CAEpB,EACD9C,KAAA,CAAAuG,aAAA;IAAKP,SAAS,EAAEjF,MAAM,CAAC,kBAAkB;EAAC,GACxCf,KAAA,CAAAuG,aAAA,aAAAS,MAAA,CAAAC,MAAA;IAAU7F,GAAG,EAAEsC,WAAW;IAAE0D,EAAE,EAAE9D;EAAS,GAAMwC,UAAU,EAAI,EAC5DX,eAAe,IAAI,CAACtC,gBAAgB,IAAIyD,MAAM,CAC3C,EACLzD,gBAAgB,IACf7C,KAAA,CAAAuG,aAAA;IACEP,SAAS,EAAE3F,IAAI,CAACU,MAAM,CAAC,mBAAmB,CAAC,EAAEC,cAAc,CAAC,mBAAmB,CAAC,EAAE;MAChF,CAACD,MAAM,CAAC,eAAe,CAAC,GAAG,CAACgC,+BAA+B;MAC3D,CAAChC,MAAM,CAACwC,OAAO,GAAGA,OAAO;MACzB,CAACxC,MAAM,CAACyC,OAAO,GAAGA;KACnB;EAAC,GAEDX,gBAAgB,EACjB7C,KAAA,CAAAuG,aAAA;IAAKP,SAAS,EAAEjF,MAAM,CAACsG,MAAM;IAAEP,OAAO,EAAEA,CAAA,KAAK;MAAA,IAAA3F,EAAA;MAAC,QAAAA,EAAA,GAAAuC,WAAW,CAACW,OAAO,cAAAlD,EAAA,uBAAAA,EAAA,CAAEgD,KAAK,EAAE;IAAA;EAAA,EAAI,EAC7EgB,eAAe,IAAImB,MAAM,CAE7B,CACG;AAEV,CAAC,CACF;AAED,eAAerF,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}