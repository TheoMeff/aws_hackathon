{"ast":null,"code":"import { __awaiter } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { nodeContains } from '@cloudscape-design/component-toolkit/dom';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport usePopoverPosition from './use-popover-position.js';\nimport styles from './styles.css.js';\nexport default function PopoverContainer({\n  position,\n  trackRef,\n  getTrack: externalGetTrack,\n  trackKey,\n  minVisibleBlockSize,\n  arrow,\n  children,\n  zIndex,\n  renderWithPortal,\n  size,\n  fixedWidth,\n  variant,\n  keepPosition,\n  allowScrollToFit,\n  allowVerticalOverflow,\n  hideOnOverscroll,\n  hoverArea,\n  className\n}) {\n  const bodyRef = useRef(null);\n  const contentRef = useRef(null);\n  const popoverRef = useRef(null);\n  const arrowRef = useRef(null);\n  const isRefresh = useVisualRefresh();\n  const getTrack = useRef(() => {\n    if (trackRef) {\n      return trackRef.current;\n    }\n    if (externalGetTrack) {\n      return externalGetTrack();\n    }\n    throw new Error('Invariant violation: must provide either trackRef or getTrack.');\n  });\n  // Updates the position handler.\n  const {\n    updatePositionHandler,\n    popoverStyle,\n    internalPosition,\n    positionHandlerRef,\n    isOverscrolling\n  } = usePopoverPosition({\n    popoverRef,\n    bodyRef,\n    arrowRef,\n    getTrack: getTrack.current,\n    contentRef,\n    allowScrollToFit,\n    allowVerticalOverflow,\n    preferredPosition: position,\n    renderWithPortal,\n    keepPosition,\n    hideOnOverscroll,\n    minVisibleBlockSize\n  });\n  // Recalculate position when properties change.\n  useLayoutEffect(() => {\n    updatePositionHandler();\n  }, [updatePositionHandler, trackKey]);\n  // Recalculate position when content size changes.\n  useResizeObserver(contentRef, () => {\n    updatePositionHandler(true);\n  });\n  // Recalculate position on DOM events.\n  useLayoutEffect(() => {\n    /*\n    This is a heuristic. Some layout changes are caused by user clicks (e.g. toggling the tools panel, submitting a form),\n    and by tracking the click event we can adapt the popover's position to the new layout.\n    */\n    const controller = new AbortController();\n    const onClick = event => __awaiter(this, void 0, void 0, function* () {\n      if (\n      // Do not update position if keepPosition is true.\n      keepPosition ||\n      // If the click was on the trigger, this will make the popover appear or disappear,\n      // so no need to update its position either in this case.\n      nodeContains(getTrack.current(), event.target)) {\n        return;\n      }\n      // Continuously update the popover position for one second to account for any layout changes\n      // and animations. On browsers where `requestIdleCallback` is supported,\n      // this runs only while the CPU is otherwise idle. In other browsers (mainly Safari), we call it\n      // with a low frequency.\n      const targetTime = performance.now() + 1000;\n      while (performance.now() < targetTime) {\n        if (controller.signal.aborted) {\n          break;\n        }\n        updatePositionHandler();\n        if (typeof requestIdleCallback !== 'undefined') {\n          yield new Promise(r => requestIdleCallback(r));\n        } else {\n          yield new Promise(r => setTimeout(r, 50));\n        }\n      }\n    });\n    const updatePositionOnResize = () => requestAnimationFrame(() => updatePositionHandler());\n    const refreshPosition = () => requestAnimationFrame(() => positionHandlerRef.current());\n    window.addEventListener('click', onClick, {\n      signal: controller.signal\n    });\n    window.addEventListener('resize', updatePositionOnResize, {\n      signal: controller.signal\n    });\n    window.addEventListener('scroll', refreshPosition, {\n      capture: true,\n      signal: controller.signal\n    });\n    return () => {\n      controller.abort();\n    };\n  }, [hideOnOverscroll, keepPosition, positionHandlerRef, trackRef, updatePositionHandler]);\n  return isOverscrolling ? null : React.createElement(\"div\", {\n    ref: popoverRef,\n    style: Object.assign(Object.assign({}, popoverStyle), {\n      zIndex\n    }),\n    className: clsx(styles.container, isRefresh && styles.refresh, className)\n  }, React.createElement(\"div\", {\n    ref: arrowRef,\n    className: clsx(styles[`container-arrow`], styles[`container-arrow-position-${internalPosition}`]),\n    \"aria-hidden\": true\n  }, arrow(internalPosition)), React.createElement(\"div\", {\n    ref: bodyRef,\n    className: clsx(styles['container-body'], styles[`container-body-size-${size}`], {\n      [styles['fixed-width']]: fixedWidth,\n      [styles[`container-body-variant-${variant}`]]: variant\n    })\n  }, hoverArea ? React.createElement(\"div\", {\n    className: styles['hover-area']\n  }, React.createElement(\"div\", {\n    ref: contentRef\n  }, children)) : React.createElement(\"div\", {\n    ref: contentRef\n  }, children)));\n}","map":{"version":3,"names":["React","useLayoutEffect","useRef","clsx","nodeContains","useResizeObserver","useVisualRefresh","usePopoverPosition","styles","PopoverContainer","position","trackRef","getTrack","externalGetTrack","trackKey","minVisibleBlockSize","arrow","children","zIndex","renderWithPortal","size","fixedWidth","variant","keepPosition","allowScrollToFit","allowVerticalOverflow","hideOnOverscroll","hoverArea","className","bodyRef","contentRef","popoverRef","arrowRef","isRefresh","current","Error","updatePositionHandler","popoverStyle","internalPosition","positionHandlerRef","isOverscrolling","preferredPosition","controller","AbortController","onClick","event","__awaiter","target","targetTime","performance","now","signal","aborted","requestIdleCallback","Promise","r","setTimeout","updatePositionOnResize","requestAnimationFrame","refreshPosition","window","addEventListener","capture","abort","createElement","ref","style","Object","assign","container","refresh"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/popover/container.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { nodeContains } from '@cloudscape-design/component-toolkit/dom';\nimport { useResizeObserver } from '@cloudscape-design/component-toolkit/internal';\n\nimport { useVisualRefresh } from '../internal/hooks/use-visual-mode';\nimport { InternalPosition, PopoverProps } from './interfaces';\nimport usePopoverPosition from './use-popover-position.js';\n\nimport styles from './styles.css.js';\n\ninterface PopoverContainerProps {\n  /** References the element the container is positioned against. */\n  trackRef?: React.RefObject<HTMLElement | SVGElement>;\n  getTrack?: () => null | HTMLElement | SVGElement;\n  /**\n    Used to update the container position in case track or track position changes:\n    \n    const trackRef = useRef<Element>(null)\n    return (<>\n      <Track style={getPosition(selectedItemId)} ref={trackRef} />\n      <PopoverContainer trackRef={trackRef} trackKey={selectedItemId} .../>\n    </>)\n  */\n  trackKey?: string | number;\n  minVisibleBlockSize?: number;\n  position: PopoverProps.Position;\n  zIndex?: React.CSSProperties['zIndex'];\n  arrow: (position: InternalPosition | null) => React.ReactNode;\n  children: React.ReactNode;\n  renderWithPortal?: boolean;\n  size: PopoverProps.Size | 'content';\n  fixedWidth: boolean;\n  variant?: 'annotation';\n  // When keepPosition is true, the popover will not recalculate its position when it resizes nor when it receives clicks.\n  keepPosition?: boolean;\n  // When allowScrollToFit is true, we will scroll to the the popover if it overflows the viewport even when choosing the best possible position for it.\n  // Do not use this if the popover is open on hover, in order to avoid unexpected movement.\n  allowScrollToFit?: boolean;\n  allowVerticalOverflow?: boolean;\n  // Whether the popover should be hidden when the trigger is scrolled away.\n  hideOnOverscroll?: boolean;\n  hoverArea?: boolean;\n  className?: string;\n}\n\nexport default function PopoverContainer({\n  position,\n  trackRef,\n  getTrack: externalGetTrack,\n  trackKey,\n  minVisibleBlockSize,\n  arrow,\n  children,\n  zIndex,\n  renderWithPortal,\n  size,\n  fixedWidth,\n  variant,\n  keepPosition,\n  allowScrollToFit,\n  allowVerticalOverflow,\n  hideOnOverscroll,\n  hoverArea,\n  className,\n}: PopoverContainerProps) {\n  const bodyRef = useRef<HTMLDivElement | null>(null);\n  const contentRef = useRef<HTMLDivElement | null>(null);\n  const popoverRef = useRef<HTMLDivElement | null>(null);\n  const arrowRef = useRef<HTMLDivElement | null>(null);\n\n  const isRefresh = useVisualRefresh();\n\n  const getTrack = useRef(() => {\n    if (trackRef) {\n      return trackRef.current;\n    }\n    if (externalGetTrack) {\n      return externalGetTrack();\n    }\n    throw new Error('Invariant violation: must provide either trackRef or getTrack.');\n  });\n\n  // Updates the position handler.\n  const { updatePositionHandler, popoverStyle, internalPosition, positionHandlerRef, isOverscrolling } =\n    usePopoverPosition({\n      popoverRef,\n      bodyRef,\n      arrowRef,\n      getTrack: getTrack.current,\n      contentRef,\n      allowScrollToFit,\n      allowVerticalOverflow,\n      preferredPosition: position,\n      renderWithPortal,\n      keepPosition,\n      hideOnOverscroll,\n      minVisibleBlockSize,\n    });\n\n  // Recalculate position when properties change.\n  useLayoutEffect(() => {\n    updatePositionHandler();\n  }, [updatePositionHandler, trackKey]);\n\n  // Recalculate position when content size changes.\n  useResizeObserver(contentRef, () => {\n    updatePositionHandler(true);\n  });\n\n  // Recalculate position on DOM events.\n  useLayoutEffect(() => {\n    /*\n    This is a heuristic. Some layout changes are caused by user clicks (e.g. toggling the tools panel, submitting a form),\n    and by tracking the click event we can adapt the popover's position to the new layout.\n    */\n\n    const controller = new AbortController();\n\n    const onClick = async (event: UIEvent | KeyboardEvent) => {\n      if (\n        // Do not update position if keepPosition is true.\n        keepPosition ||\n        // If the click was on the trigger, this will make the popover appear or disappear,\n        // so no need to update its position either in this case.\n        nodeContains(getTrack.current(), event.target)\n      ) {\n        return;\n      }\n\n      // Continuously update the popover position for one second to account for any layout changes\n      // and animations. On browsers where `requestIdleCallback` is supported,\n      // this runs only while the CPU is otherwise idle. In other browsers (mainly Safari), we call it\n      // with a low frequency.\n      const targetTime = performance.now() + 1_000;\n\n      while (performance.now() < targetTime) {\n        if (controller.signal.aborted) {\n          break;\n        }\n\n        updatePositionHandler();\n\n        if (typeof requestIdleCallback !== 'undefined') {\n          await new Promise(r => requestIdleCallback(r));\n        } else {\n          await new Promise(r => setTimeout(r, 50));\n        }\n      }\n    };\n\n    const updatePositionOnResize = () => requestAnimationFrame(() => updatePositionHandler());\n    const refreshPosition = () => requestAnimationFrame(() => positionHandlerRef.current());\n\n    window.addEventListener('click', onClick, { signal: controller.signal });\n    window.addEventListener('resize', updatePositionOnResize, { signal: controller.signal });\n    window.addEventListener('scroll', refreshPosition, { capture: true, signal: controller.signal });\n\n    return () => {\n      controller.abort();\n    };\n  }, [hideOnOverscroll, keepPosition, positionHandlerRef, trackRef, updatePositionHandler]);\n\n  return isOverscrolling ? null : (\n    <div\n      ref={popoverRef}\n      style={{ ...popoverStyle, zIndex }}\n      className={clsx(styles.container, isRefresh && styles.refresh, className)}\n    >\n      <div\n        ref={arrowRef}\n        className={clsx(styles[`container-arrow`], styles[`container-arrow-position-${internalPosition}`])}\n        aria-hidden={true}\n      >\n        {arrow(internalPosition)}\n      </div>\n\n      <div\n        ref={bodyRef}\n        className={clsx(styles['container-body'], styles[`container-body-size-${size}`], {\n          [styles['fixed-width']]: fixedWidth,\n          [styles[`container-body-variant-${variant}`]]: variant,\n        })}\n      >\n        {hoverArea ? (\n          <div className={styles['hover-area']}>\n            <div ref={contentRef}>{children}</div>\n          </div>\n        ) : (\n          <div ref={contentRef}>{children}</div>\n        )}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}