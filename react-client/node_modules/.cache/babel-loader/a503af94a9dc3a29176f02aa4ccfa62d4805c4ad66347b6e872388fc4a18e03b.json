{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { addMonths, isAfter, isBefore, isSameDay, isSameMonth, isSameYear, subMonths } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\n// Returns a 3-by-4 matrix with dates corresponding to the initial date-time of each month of the year for a given date.\nexport function getCalendarYear(date) {\n  const year = date.getFullYear();\n  return new Array(4).fill(0).map((_, i) => new Array(3).fill(0).map((_, j) => new Date(year, i * 3 + j)));\n}\nexport class MonthCalendar {\n  constructor({\n    padDates,\n    baseDate,\n    startOfWeek,\n    selection\n  }) {\n    this.padDates = padDates;\n    this.weeks = [];\n    this.range = [baseDate, baseDate];\n    const allCalendarDates = getCalendarMonthWithSixRows(baseDate, {\n      startOfWeek,\n      padDates\n    });\n    this.weekdays = allCalendarDates[0].map(date => date.getDay());\n    const isDateVisible = (weekIndex, dayIndex) => {\n      const week = allCalendarDates[weekIndex];\n      const date = week === null || week === void 0 ? void 0 : week[dayIndex];\n      if (!date) {\n        return false;\n      }\n      switch (padDates) {\n        case 'before':\n          return isSameMonth(date, baseDate) || isBefore(date, baseDate);\n        case 'after':\n          return isSameMonth(date, baseDate) || isAfter(date, baseDate);\n      }\n    };\n    const isDateInRange = (weekIndex, dayIndex) => {\n      const week = allCalendarDates[weekIndex];\n      const date = week === null || week === void 0 ? void 0 : week[dayIndex];\n      return !!(date && selection && checkDateIsInRange(date, selection[0], selection[1]));\n    };\n    // The test index is only set for weeks that have at least one day that belongs to the current month.\n    // It starts from the first such week and counts from 1.\n    const getWeekTestIndex = weekIndex => {\n      var _a;\n      const week = allCalendarDates[weekIndex];\n      if (!week) {\n        return undefined;\n      }\n      if (!isSameMonth(week[0], baseDate) && !isSameMonth(week[week.length - 1], baseDate)) {\n        return undefined;\n      }\n      return ((_a = getWeekTestIndex(weekIndex - 1)) !== null && _a !== void 0 ? _a : 0) + 1;\n    };\n    for (let weekIndex = 0; weekIndex < allCalendarDates.length; weekIndex++) {\n      const daysOfWeek = allCalendarDates[weekIndex];\n      const week = {\n        days: [],\n        testIndex: getWeekTestIndex(weekIndex)\n      };\n      for (let dayIndex = 0; dayIndex < daysOfWeek.length; dayIndex++) {\n        const date = daysOfWeek[dayIndex];\n        const isVisible = isDateVisible(weekIndex, dayIndex);\n        const isSelected = !!(selection && (isSameDay(date, selection[0]) || isSameDay(date, selection[1])));\n        const isInRange = isDateInRange(weekIndex, dayIndex);\n        const isTop = isVisible && !isDateVisible(weekIndex - 1, dayIndex);\n        const isBottom = isVisible && !isDateVisible(weekIndex + 1, dayIndex);\n        const isLeft = isVisible && !isDateVisible(weekIndex, dayIndex - 1);\n        const isRight = isVisible && !isDateVisible(weekIndex, dayIndex + 1);\n        const isRangeTop = isInRange && !isDateInRange(weekIndex - 1, dayIndex);\n        const isRangeBottom = isInRange && !isDateInRange(weekIndex + 1, dayIndex);\n        const isRangeLeft = isInRange && !isDateInRange(weekIndex, dayIndex - 1);\n        const isRangeRight = isInRange && !isDateInRange(weekIndex, dayIndex + 1);\n        week.days.push({\n          date,\n          isVisible,\n          isSelected,\n          isInRange,\n          isSelectionTop: isTop || isRangeTop,\n          isSelectionBottom: isBottom || isRangeBottom,\n          isSelectionLeft: isLeft || isRangeLeft,\n          isSelectionRight: isRight || isRangeRight\n        });\n      }\n      this.weeks.push(week);\n    }\n  }\n}\nexport class YearCalendar {\n  constructor({\n    baseDate,\n    selection\n  }) {\n    this.quarters = [];\n    this.range = [baseDate, baseDate];\n    const allCalendarMonths = getCalendarYear(baseDate);\n    const isMonthInRange = (quarterIndex, monthIndex) => {\n      const quarter = allCalendarMonths[quarterIndex];\n      const month = quarter === null || quarter === void 0 ? void 0 : quarter[monthIndex];\n      return !!(month && selection && checkMonthIsInRange(month, selection[0], selection[1]));\n    };\n    const isMonthVisible = (quarterIndex, monthIndex) => {\n      const quarter = allCalendarMonths[quarterIndex];\n      const month = quarter === null || quarter === void 0 ? void 0 : quarter[monthIndex];\n      if (!month) {\n        return false;\n      }\n      return isSameYear(month, baseDate);\n    };\n    for (let quarterIndex = 0; quarterIndex < allCalendarMonths.length; quarterIndex++) {\n      const monthsOfQuarter = allCalendarMonths[quarterIndex];\n      const quarter = {\n        months: []\n      };\n      for (let monthIndex = 0; monthIndex < monthsOfQuarter.length; monthIndex++) {\n        const month = monthsOfQuarter[monthIndex];\n        const isVisible = isMonthVisible(quarterIndex, monthIndex);\n        const isSelected = !!(selection && (isSameMonth(month, selection[0]) || isSameMonth(month, selection[1])));\n        const isInRange = isMonthInRange(quarterIndex, monthIndex);\n        const isTop = isVisible && !isMonthVisible(quarterIndex - 1, monthIndex);\n        const isBottom = isVisible && !isMonthVisible(quarterIndex + 1, monthIndex);\n        const isLeft = isVisible && !isMonthVisible(quarterIndex, monthIndex - 1);\n        const isRight = isVisible && !isMonthVisible(quarterIndex, monthIndex + 1);\n        const isRangeTop = isInRange && !isMonthInRange(quarterIndex - 1, monthIndex);\n        const isRangeBottom = isInRange && !isMonthInRange(quarterIndex + 1, monthIndex);\n        const isRangeLeft = isInRange && !isMonthInRange(quarterIndex, monthIndex - 1);\n        const isRangeRight = isInRange && !isMonthInRange(quarterIndex, monthIndex + 1);\n        quarter.months.push({\n          date: month,\n          isVisible,\n          isSelected,\n          isInRange,\n          isSelectionTop: isTop || isRangeTop,\n          isSelectionBottom: isBottom || isRangeBottom,\n          isSelectionLeft: isLeft || isRangeLeft,\n          isSelectionRight: isRight || isRangeRight\n        });\n      }\n      this.quarters.push(quarter);\n    }\n  }\n}\nexport function getCalendarMonthWithSixRows(date, {\n  startOfWeek,\n  padDates\n}) {\n  switch (padDates) {\n    case 'before':\n      return [...getPrevMonthRows(date, startOfWeek), ...getCurrentMonthRows(date, startOfWeek)].slice(-6);\n    case 'after':\n      return [...getCurrentMonthRows(date, startOfWeek), ...getNextMonthRows(date, startOfWeek)].slice(0, 6);\n  }\n}\nfunction checkDateIsInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n  const inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}\nfunction checkMonthIsInRange(date, dateOne, dateTwo) {\n  if (!dateOne || !dateTwo || isSameMonth(dateOne, dateTwo)) {\n    return false;\n  }\n  const inRange = isAfter(date, dateOne) && isBefore(date, dateTwo) || isAfter(date, dateTwo) && isBefore(date, dateOne);\n  return inRange || isSameMonth(date, dateOne) || isSameMonth(date, dateTwo);\n}\nexport function getCurrentMonthRows(date, firstDayOfWeek) {\n  return getCalendarMonth(date, {\n    firstDayOfWeek\n  });\n}\nexport function getPrevMonthRows(date, firstDayOfWeek) {\n  const rows = getCalendarMonth(subMonths(date, 1), {\n    firstDayOfWeek\n  });\n  const lastDay = rows[rows.length - 1][rows[rows.length - 1].length - 1];\n  return !isSameMonth(date, lastDay) ? rows : rows.slice(0, -1);\n}\nexport function getNextMonthRows(date, firstDayOfWeek) {\n  const rows = getCalendarMonth(addMonths(date, 1), {\n    firstDayOfWeek\n  });\n  const firstDay = rows[0][0];\n  return !isSameMonth(date, firstDay) ? rows : rows.slice(1);\n}","map":{"version":3,"names":["addMonths","isAfter","isBefore","isSameDay","isSameMonth","isSameYear","subMonths","getCalendarMonth","getCalendarYear","date","year","getFullYear","Array","fill","map","_","i","j","Date","MonthCalendar","constructor","padDates","baseDate","startOfWeek","selection","weeks","range","allCalendarDates","getCalendarMonthWithSixRows","weekdays","getDay","isDateVisible","weekIndex","dayIndex","week","isDateInRange","checkDateIsInRange","getWeekTestIndex","undefined","length","_a","daysOfWeek","days","testIndex","isVisible","isSelected","isInRange","isTop","isBottom","isLeft","isRight","isRangeTop","isRangeBottom","isRangeLeft","isRangeRight","push","isSelectionTop","isSelectionBottom","isSelectionLeft","isSelectionRight","YearCalendar","quarters","allCalendarMonths","isMonthInRange","quarterIndex","monthIndex","quarter","month","checkMonthIsInRange","isMonthVisible","monthsOfQuarter","months","getPrevMonthRows","getCurrentMonthRows","slice","getNextMonthRows","dateOne","dateTwo","inRange","firstDayOfWeek","rows","lastDay","firstDay"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/internal/utils/date-time/calendar.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { addMonths, isAfter, isBefore, isSameDay, isSameMonth, isSameYear, subMonths } from 'date-fns';\nimport { getCalendarMonth } from 'mnth';\n\nimport { DayIndex } from '../locale';\n\n// Returns a 3-by-4 matrix with dates corresponding to the initial date-time of each month of the year for a given date.\nexport function getCalendarYear(date: Date): Date[][] {\n  const year = date.getFullYear();\n  return new Array(4)\n    .fill(0)\n    .map((_, i: number) => new Array(3).fill(0).map((_, j: number) => new Date(year, i * 3 + j)));\n}\n\nexport interface CalendarDate {\n  /**\n   * could represent one day or or one complete month depending on the type of calendar\n   */\n  date: Date;\n  isVisible: boolean;\n  isSelected: boolean;\n  isInRange: boolean;\n  isSelectionTop: boolean;\n  isSelectionBottom: boolean;\n  isSelectionLeft: boolean;\n  isSelectionRight: boolean;\n}\nexport interface CalendarWeek {\n  days: CalendarDate[];\n  testIndex?: number;\n}\n\nexport interface CalendarQuarter {\n  months: CalendarDate[];\n}\n\nexport class MonthCalendar {\n  padDates: 'before' | 'after';\n  weekdays: number[];\n  weeks: CalendarWeek[];\n  range: [Date, Date];\n\n  constructor({\n    padDates,\n    baseDate,\n    startOfWeek,\n    selection,\n  }: {\n    padDates: 'before' | 'after';\n    baseDate: Date;\n    startOfWeek: DayIndex;\n    selection: null | [Date, Date];\n  }) {\n    this.padDates = padDates;\n    this.weeks = [];\n    this.range = [baseDate, baseDate];\n\n    const allCalendarDates = getCalendarMonthWithSixRows(baseDate, { startOfWeek, padDates });\n    this.weekdays = allCalendarDates[0].map(date => date.getDay());\n\n    const isDateVisible = (weekIndex: number, dayIndex: number) => {\n      const week = allCalendarDates[weekIndex];\n      const date = week?.[dayIndex];\n      if (!date) {\n        return false;\n      }\n      switch (padDates) {\n        case 'before':\n          return isSameMonth(date, baseDate) || isBefore(date, baseDate);\n        case 'after':\n          return isSameMonth(date, baseDate) || isAfter(date, baseDate);\n      }\n    };\n\n    const isDateInRange = (weekIndex: number, dayIndex: number) => {\n      const week = allCalendarDates[weekIndex];\n      const date = week?.[dayIndex];\n      return !!(date && selection && checkDateIsInRange(date, selection[0], selection[1]));\n    };\n\n    // The test index is only set for weeks that have at least one day that belongs to the current month.\n    // It starts from the first such week and counts from 1.\n    const getWeekTestIndex = (weekIndex: number): undefined | number => {\n      const week = allCalendarDates[weekIndex];\n      if (!week) {\n        return undefined;\n      }\n      if (!isSameMonth(week[0], baseDate) && !isSameMonth(week[week.length - 1], baseDate)) {\n        return undefined;\n      }\n      return (getWeekTestIndex(weekIndex - 1) ?? 0) + 1;\n    };\n\n    for (let weekIndex = 0; weekIndex < allCalendarDates.length; weekIndex++) {\n      const daysOfWeek = allCalendarDates[weekIndex];\n      const week: CalendarWeek = { days: [], testIndex: getWeekTestIndex(weekIndex) };\n\n      for (let dayIndex = 0; dayIndex < daysOfWeek.length; dayIndex++) {\n        const date = daysOfWeek[dayIndex];\n        const isVisible = isDateVisible(weekIndex, dayIndex);\n        const isSelected = !!(selection && (isSameDay(date, selection[0]) || isSameDay(date, selection[1])));\n        const isInRange = isDateInRange(weekIndex, dayIndex);\n        const isTop = isVisible && !isDateVisible(weekIndex - 1, dayIndex);\n        const isBottom = isVisible && !isDateVisible(weekIndex + 1, dayIndex);\n        const isLeft = isVisible && !isDateVisible(weekIndex, dayIndex - 1);\n        const isRight = isVisible && !isDateVisible(weekIndex, dayIndex + 1);\n        const isRangeTop = isInRange && !isDateInRange(weekIndex - 1, dayIndex);\n        const isRangeBottom = isInRange && !isDateInRange(weekIndex + 1, dayIndex);\n        const isRangeLeft = isInRange && !isDateInRange(weekIndex, dayIndex - 1);\n        const isRangeRight = isInRange && !isDateInRange(weekIndex, dayIndex + 1);\n\n        week.days.push({\n          date,\n          isVisible,\n          isSelected,\n          isInRange,\n          isSelectionTop: isTop || isRangeTop,\n          isSelectionBottom: isBottom || isRangeBottom,\n          isSelectionLeft: isLeft || isRangeLeft,\n          isSelectionRight: isRight || isRangeRight,\n        });\n      }\n      this.weeks.push(week);\n    }\n  }\n}\n\nexport class YearCalendar {\n  quarters: CalendarQuarter[];\n  range: [Date, Date];\n\n  constructor({ baseDate, selection }: { baseDate: Date; selection: null | [Date, Date] }) {\n    this.quarters = [];\n    this.range = [baseDate, baseDate];\n\n    const allCalendarMonths = getCalendarYear(baseDate);\n\n    const isMonthInRange = (quarterIndex: number, monthIndex: number) => {\n      const quarter = allCalendarMonths[quarterIndex];\n      const month = quarter?.[monthIndex];\n      return !!(month && selection && checkMonthIsInRange(month, selection[0], selection[1]));\n    };\n\n    const isMonthVisible = (quarterIndex: number, monthIndex: number) => {\n      const quarter = allCalendarMonths[quarterIndex];\n      const month = quarter?.[monthIndex];\n      if (!month) {\n        return false;\n      }\n      return isSameYear(month, baseDate);\n    };\n\n    for (let quarterIndex = 0; quarterIndex < allCalendarMonths.length; quarterIndex++) {\n      const monthsOfQuarter = allCalendarMonths[quarterIndex];\n      const quarter: CalendarQuarter = { months: [] };\n\n      for (let monthIndex = 0; monthIndex < monthsOfQuarter.length; monthIndex++) {\n        const month = monthsOfQuarter[monthIndex];\n        const isVisible = isMonthVisible(quarterIndex, monthIndex);\n        const isSelected = !!(selection && (isSameMonth(month, selection[0]) || isSameMonth(month, selection[1])));\n        const isInRange = isMonthInRange(quarterIndex, monthIndex);\n        const isTop = isVisible && !isMonthVisible(quarterIndex - 1, monthIndex);\n        const isBottom = isVisible && !isMonthVisible(quarterIndex + 1, monthIndex);\n        const isLeft = isVisible && !isMonthVisible(quarterIndex, monthIndex - 1);\n        const isRight = isVisible && !isMonthVisible(quarterIndex, monthIndex + 1);\n        const isRangeTop = isInRange && !isMonthInRange(quarterIndex - 1, monthIndex);\n        const isRangeBottom = isInRange && !isMonthInRange(quarterIndex + 1, monthIndex);\n        const isRangeLeft = isInRange && !isMonthInRange(quarterIndex, monthIndex - 1);\n        const isRangeRight = isInRange && !isMonthInRange(quarterIndex, monthIndex + 1);\n\n        quarter.months.push({\n          date: month,\n          isVisible,\n          isSelected,\n          isInRange,\n          isSelectionTop: isTop || isRangeTop,\n          isSelectionBottom: isBottom || isRangeBottom,\n          isSelectionLeft: isLeft || isRangeLeft,\n          isSelectionRight: isRight || isRangeRight,\n        });\n      }\n      this.quarters.push(quarter);\n    }\n  }\n}\n\nexport function getCalendarMonthWithSixRows(\n  date: Date,\n  { startOfWeek, padDates }: { startOfWeek: DayIndex; padDates: 'before' | 'after' }\n) {\n  switch (padDates) {\n    case 'before':\n      return [...getPrevMonthRows(date, startOfWeek), ...getCurrentMonthRows(date, startOfWeek)].slice(-6);\n    case 'after':\n      return [...getCurrentMonthRows(date, startOfWeek), ...getNextMonthRows(date, startOfWeek)].slice(0, 6);\n  }\n}\n\nfunction checkDateIsInRange(date: Date, dateOne: Date | null, dateTwo: Date | null) {\n  if (!dateOne || !dateTwo || isSameDay(dateOne, dateTwo)) {\n    return false;\n  }\n\n  const inRange =\n    (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));\n\n  return inRange || isSameDay(date, dateOne) || isSameDay(date, dateTwo);\n}\n\nfunction checkMonthIsInRange(date: Date, dateOne: Date | null, dateTwo: Date | null) {\n  if (!dateOne || !dateTwo || isSameMonth(dateOne, dateTwo)) {\n    return false;\n  }\n\n  const inRange =\n    (isAfter(date, dateOne) && isBefore(date, dateTwo)) || (isAfter(date, dateTwo) && isBefore(date, dateOne));\n\n  return inRange || isSameMonth(date, dateOne) || isSameMonth(date, dateTwo);\n}\n\nexport function getCurrentMonthRows(date: Date, firstDayOfWeek: DayIndex) {\n  return getCalendarMonth(date, { firstDayOfWeek });\n}\n\nexport function getPrevMonthRows(date: Date, firstDayOfWeek: DayIndex) {\n  const rows = getCalendarMonth(subMonths(date, 1), { firstDayOfWeek });\n  const lastDay = rows[rows.length - 1][rows[rows.length - 1].length - 1];\n  return !isSameMonth(date, lastDay) ? rows : rows.slice(0, -1);\n}\n\nexport function getNextMonthRows(date: Date, firstDayOfWeek: DayIndex) {\n  const rows = getCalendarMonth(addMonths(date, 1), { firstDayOfWeek });\n  const firstDay = rows[0][0];\n  return !isSameMonth(date, firstDay) ? rows : rows.slice(1);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}