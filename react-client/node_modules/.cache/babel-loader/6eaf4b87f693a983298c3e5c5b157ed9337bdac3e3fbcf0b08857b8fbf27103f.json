{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __rest } from \"tslib\";\nimport { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { useInternalI18n } from '../i18n/context';\nimport { useDropdownStatus } from '../internal/components/dropdown-status';\nimport { isGroup } from '../internal/components/option/utils/filter-options';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { joinStrings } from '../internal/utils/strings';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field.js';\nimport { findOptionIndex } from '../select/utils/connect-options';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { useLoadItems } from '../select/utils/use-load-items';\nimport { useNativeSearch } from '../select/utils/use-native-search';\nimport { useSelect } from '../select/utils/use-select';\nexport function useMultiselect(_a) {\n  var {\n      options,\n      filteringType,\n      filteringResultsText,\n      disabled,\n      statusType,\n      empty,\n      loadingText,\n      finishedText,\n      errorText,\n      noMatch,\n      renderHighlightedAriaLive,\n      selectedOptions,\n      deselectAriaLabel,\n      keepOpen,\n      onBlur,\n      onFocus,\n      onLoadItems,\n      onChange,\n      controlId,\n      ariaLabelId,\n      footerId,\n      filteringValue,\n      setFilteringValue,\n      externalRef,\n      embedded,\n      enableSelectAll,\n      i18nStrings\n    } = _a,\n    restProps = __rest(_a, [\"options\", \"filteringType\", \"filteringResultsText\", \"disabled\", \"statusType\", \"empty\", \"loadingText\", \"finishedText\", \"errorText\", \"noMatch\", \"renderHighlightedAriaLive\", \"selectedOptions\", \"deselectAriaLabel\", \"keepOpen\", \"onBlur\", \"onFocus\", \"onLoadItems\", \"onChange\", \"controlId\", \"ariaLabelId\", \"footerId\", \"filteringValue\", \"setFilteringValue\", \"externalRef\", \"embedded\", \"enableSelectAll\", \"i18nStrings\"]);\n  checkOptionValueField('Multiselect', 'options', options);\n  const i18n = useInternalI18n('multiselect');\n  const i18nCommon = useInternalI18n('select');\n  const recoveryText = i18nCommon('recoveryText', restProps.recoveryText);\n  const errorIconAriaLabel = i18nCommon('errorIconAriaLabel', restProps.errorIconAriaLabel);\n  const selectedAriaLabel = i18nCommon('selectedAriaLabel', restProps.selectedAriaLabel);\n  if (restProps.recoveryText && !onLoadItems) {\n    warnOnce('Multiselect', '`onLoadItems` must be provided for `recoveryText` to be displayed.');\n  }\n  const {\n    handleLoadMore,\n    handleRecoveryClick,\n    fireLoadItems\n  } = useLoadItems({\n    onLoadItems,\n    options,\n    statusType\n  });\n  const useInteractiveGroups = true;\n  const {\n    flatOptions,\n    filteredOptions,\n    parentMap,\n    totalCount,\n    matchesCount\n  } = prepareOptions(options, filteringType, filteringValue);\n  const selectAllOption = {\n    type: 'select-all',\n    afterHeader: filteringType !== 'none',\n    option: {\n      label: i18n('i18nStrings.selectAllText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.selectAllText)\n    }\n  };\n  const visibleOptions = enableSelectAll && filteredOptions.length ? [selectAllOption, ...filteredOptions] : filteredOptions;\n  // Includes visible and non-visible (filtered out) options\n  const allNonParentOptions = flatOptions.filter(item => item.type !== 'parent').map(option => option.option);\n  const filteredNonParentOptions = filteredOptions.filter(item => item.type !== 'parent').map(item => item.option);\n  const selectedValues = useMemo(() => new Set(selectedOptions.map(option => option.value)), [selectedOptions]);\n  const isSomeSelected = selectedOptions.length > 0;\n  const isAllVisibleSelectableSelected = isSomeSelected && filteredNonParentOptions.every(option => option.disabled || selectedValues.has(option.value));\n  const isAllSelected = allNonParentOptions.every(option => selectedValues.has(option.value));\n  const toggleAll = () => {\n    const filteredNonParentOptionValues = new Set(filteredNonParentOptions.map(option => option.value));\n    fireNonCancelableEvent(onChange, {\n      selectedOptions: isAllVisibleSelectableSelected ? selectedOptions.filter(option => !filteredNonParentOptionValues.has(option.value)) : allNonParentOptions.filter(({\n        disabled,\n        value\n      }) => selectedValues.has(value) || !disabled && filteredNonParentOptionValues.has(value))\n    });\n  };\n  const updateSelectedOption = useCallback(option => {\n    // switch between selection and deselection behavior, ignores disabled options to prevent\n    // getting stuck on one behavior when an option is disabled and its state cannot be changed\n    const isAllChildrenSelected = optionsArray => optionsArray.every(item => findOptionIndex(selectedOptions, item) > -1 || item.disabled);\n    const intersection = (visibleOptions, options) => visibleOptions.filter(item => findOptionIndex(options, item) > -1 && !item.disabled);\n    const union = (visibleOptions, options) => visibleOptions.filter(item => findOptionIndex(options, item) === -1).concat(options);\n    const select = (options, selectedOptions) => {\n      return union(selectedOptions, options);\n    };\n    const unselect = (options, selectedOptions) => {\n      return selectedOptions.filter(option => findOptionIndex(options, option) === -1);\n    };\n    let newSelectedOptions = [...selectedOptions];\n    if (isGroup(option)) {\n      const visibleOptions = intersection([...option.options], filteredNonParentOptions);\n      newSelectedOptions = isAllChildrenSelected(visibleOptions) ? unselect(visibleOptions, newSelectedOptions) : select(visibleOptions, newSelectedOptions);\n    } else {\n      newSelectedOptions = isAllChildrenSelected([option]) ? unselect([option], newSelectedOptions) : select([option], newSelectedOptions);\n    }\n    fireNonCancelableEvent(onChange, {\n      selectedOptions: newSelectedOptions\n    });\n  }, [selectedOptions, onChange, filteredNonParentOptions]);\n  const scrollToIndex = useRef(null);\n  const {\n    isOpen,\n    highlightType,\n    highlightedOption,\n    highlightedIndex,\n    getTriggerProps,\n    getDropdownProps,\n    getFilterProps,\n    getMenuProps,\n    getOptionProps,\n    highlightOption,\n    announceSelected\n  } = useSelect({\n    selectedOptions,\n    updateSelectedOption,\n    options: visibleOptions,\n    filteringType,\n    onFocus,\n    onBlur,\n    externalRef,\n    keepOpen,\n    fireLoadItems,\n    setFilteringValue,\n    useInteractiveGroups,\n    statusType,\n    embedded,\n    isAllSelected,\n    isSomeSelected,\n    toggleAll\n  });\n  const wrapperOnKeyDown = useNativeSearch({\n    isEnabled: filteringType === 'none' && isOpen,\n    options: visibleOptions,\n    highlightOption: highlightOption,\n    highlightedOption: highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.option,\n    useInteractiveGroups\n  });\n  const isEmpty = !options || options.length === 0;\n  const isNoMatch = filteredOptions && filteredOptions.length === 0;\n  const isFiltered = filteringType !== 'none' && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;\n  const filteredText = isFiltered ? filteringResultsText === null || filteringResultsText === void 0 ? void 0 : filteringResultsText(matchesCount, totalCount) : undefined;\n  const dropdownStatus = useDropdownStatus({\n    statusType,\n    empty,\n    loadingText,\n    finishedText,\n    errorText,\n    recoveryText,\n    isEmpty,\n    isNoMatch,\n    noMatch,\n    isFiltered,\n    filteringResultsText: filteredText,\n    onRecoveryClick: handleRecoveryClick,\n    errorIconAriaLabel: errorIconAriaLabel,\n    hasRecoveryCallback: !!onLoadItems\n  });\n  const announcement = useAnnouncement({\n    announceSelected,\n    highlightedOption,\n    getParent: option => {\n      var _a;\n      return (_a = parentMap.get(option)) === null || _a === void 0 ? void 0 : _a.option;\n    },\n    selectedAriaLabel,\n    renderHighlightedAriaLive\n  });\n  const tokens = selectedOptions.map(option => ({\n    label: option.label,\n    disabled: disabled || option.disabled,\n    labelTag: option.labelTag,\n    description: option.description,\n    iconAlt: option.iconAlt,\n    iconName: option.iconName,\n    iconUrl: option.iconUrl,\n    iconSvg: option.iconSvg,\n    tags: option.tags,\n    dismissLabel: i18n('deselectAriaLabel', deselectAriaLabel === null || deselectAriaLabel === void 0 ? void 0 : deselectAriaLabel(option), format => {\n      var _a;\n      return format({\n        option__label: (_a = option.label) !== null && _a !== void 0 ? _a : ''\n      });\n    })\n  }));\n  useEffect(() => {\n    var _a;\n    (_a = scrollToIndex.current) === null || _a === void 0 ? void 0 : _a.call(scrollToIndex, highlightedIndex);\n  }, [highlightedIndex]);\n  const dropdownOnMouseDown = event => {\n    const target = event.target;\n    if (target !== document.activeElement) {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    }\n  };\n  const tokenOnDismiss = ({\n    detail\n  }) => {\n    const optionToDeselect = selectedOptions[detail.itemIndex];\n    updateSelectedOption(optionToDeselect);\n    const targetRef = getTriggerProps().ref;\n    if (targetRef.current) {\n      targetRef.current.focus();\n    }\n  };\n  return {\n    isOpen,\n    tokens,\n    announcement,\n    dropdownStatus,\n    filteringValue,\n    filteredOptions: visibleOptions,\n    highlightType,\n    scrollToIndex,\n    getFilterProps,\n    getTriggerProps,\n    getMenuProps: () => Object.assign(Object.assign({}, getMenuProps()), {\n      onLoadMore: handleLoadMore,\n      ariaLabelledby: joinStrings(ariaLabelId, controlId),\n      ariaDescribedby: dropdownStatus.content ? footerId : undefined,\n      embedded\n    }),\n    getOptionProps,\n    getTokenProps: () => ({\n      onDismiss: tokenOnDismiss\n    }),\n    getDropdownProps: () => Object.assign(Object.assign({}, getDropdownProps()), {\n      onMouseDown: dropdownOnMouseDown\n    }),\n    getWrapperProps: () => ({\n      onKeyDown: wrapperOnKeyDown\n    }),\n    highlightedIndex\n  };\n}","map":{"version":3,"names":["useCallback","useEffect","useMemo","useRef","warnOnce","useInternalI18n","useDropdownStatus","isGroup","prepareOptions","fireNonCancelableEvent","joinStrings","checkOptionValueField","findOptionIndex","useAnnouncement","useLoadItems","useNativeSearch","useSelect","useMultiselect","_a","options","filteringType","filteringResultsText","disabled","statusType","empty","loadingText","finishedText","errorText","noMatch","renderHighlightedAriaLive","selectedOptions","deselectAriaLabel","keepOpen","onBlur","onFocus","onLoadItems","onChange","controlId","ariaLabelId","footerId","filteringValue","setFilteringValue","externalRef","embedded","enableSelectAll","i18nStrings","restProps","__rest","i18n","i18nCommon","recoveryText","errorIconAriaLabel","selectedAriaLabel","handleLoadMore","handleRecoveryClick","fireLoadItems","useInteractiveGroups","flatOptions","filteredOptions","parentMap","totalCount","matchesCount","selectAllOption","type","afterHeader","option","label","selectAllText","visibleOptions","length","allNonParentOptions","filter","item","map","filteredNonParentOptions","selectedValues","Set","value","isSomeSelected","isAllVisibleSelectableSelected","every","has","isAllSelected","toggleAll","filteredNonParentOptionValues","updateSelectedOption","isAllChildrenSelected","optionsArray","intersection","union","concat","select","unselect","newSelectedOptions","scrollToIndex","isOpen","highlightType","highlightedOption","highlightedIndex","getTriggerProps","getDropdownProps","getFilterProps","getMenuProps","getOptionProps","highlightOption","announceSelected","wrapperOnKeyDown","isEnabled","isEmpty","isNoMatch","isFiltered","filteredText","undefined","dropdownStatus","onRecoveryClick","hasRecoveryCallback","announcement","getParent","get","tokens","labelTag","description","iconAlt","iconName","iconUrl","iconSvg","tags","dismissLabel","format","option__label","current","call","dropdownOnMouseDown","event","target","document","activeElement","preventDefault","tokenOnDismiss","detail","optionToDeselect","itemIndex","targetRef","ref","focus","Object","assign","onLoadMore","ariaLabelledby","ariaDescribedby","content","getTokenProps","onDismiss","onMouseDown","getWrapperProps","onKeyDown"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/multiselect/use-multiselect.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\n\nimport { useInternalI18n } from '../i18n/context';\nimport { DropdownStatusProps, useDropdownStatus } from '../internal/components/dropdown-status';\nimport { DropdownOption, OptionDefinition, OptionGroup } from '../internal/components/option/interfaces';\nimport { isGroup } from '../internal/components/option/utils/filter-options';\nimport { prepareOptions } from '../internal/components/option/utils/prepare-options';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { SomeRequired } from '../internal/types';\nimport { joinStrings } from '../internal/utils/strings';\nimport { SelectListProps } from '../select/parts/plain-list';\nimport { checkOptionValueField } from '../select/utils/check-option-value-field.js';\nimport { findOptionIndex } from '../select/utils/connect-options';\nimport { useAnnouncement } from '../select/utils/use-announcement';\nimport { useLoadItems } from '../select/utils/use-load-items';\nimport { useNativeSearch } from '../select/utils/use-native-search';\nimport { useSelect } from '../select/utils/use-select';\nimport { TokenGroupProps } from '../token-group/interfaces';\nimport { MultiselectProps } from './interfaces';\n\ntype UseMultiselectOptions = SomeRequired<\n  Pick<\n    MultiselectProps,\n    | 'options'\n    | 'selectedOptions'\n    | 'filteringType'\n    | 'filteringResultsText'\n    | 'disabled'\n    | 'noMatch'\n    | 'renderHighlightedAriaLive'\n    | 'deselectAriaLabel'\n    | 'keepOpen'\n    | 'onBlur'\n    | 'onFocus'\n    | 'onLoadItems'\n    | 'onChange'\n    | 'selectedAriaLabel'\n    | 'enableSelectAll'\n    | 'i18nStrings'\n  > &\n    DropdownStatusProps & {\n      controlId?: string;\n      ariaLabelId: string;\n      footerId: string;\n      filteringValue: string;\n      setFilteringValue?: (value: string) => void;\n      externalRef: React.Ref<MultiselectProps.Ref>;\n    },\n  'options' | 'selectedOptions' | 'filteringType' | 'statusType' | 'keepOpen'\n> & { embedded?: boolean };\n\nexport function useMultiselect({\n  options,\n  filteringType,\n  filteringResultsText,\n  disabled,\n  statusType,\n  empty,\n  loadingText,\n  finishedText,\n  errorText,\n  noMatch,\n  renderHighlightedAriaLive,\n  selectedOptions,\n  deselectAriaLabel,\n  keepOpen,\n  onBlur,\n  onFocus,\n  onLoadItems,\n  onChange,\n  controlId,\n  ariaLabelId,\n  footerId,\n  filteringValue,\n  setFilteringValue,\n  externalRef,\n  embedded,\n  enableSelectAll,\n  i18nStrings,\n  ...restProps\n}: UseMultiselectOptions) {\n  checkOptionValueField('Multiselect', 'options', options);\n\n  const i18n = useInternalI18n('multiselect');\n  const i18nCommon = useInternalI18n('select');\n  const recoveryText = i18nCommon('recoveryText', restProps.recoveryText);\n  const errorIconAriaLabel = i18nCommon('errorIconAriaLabel', restProps.errorIconAriaLabel);\n  const selectedAriaLabel = i18nCommon('selectedAriaLabel', restProps.selectedAriaLabel);\n\n  if (restProps.recoveryText && !onLoadItems) {\n    warnOnce('Multiselect', '`onLoadItems` must be provided for `recoveryText` to be displayed.');\n  }\n\n  const { handleLoadMore, handleRecoveryClick, fireLoadItems } = useLoadItems({\n    onLoadItems,\n    options,\n    statusType,\n  });\n  const useInteractiveGroups = true;\n  const { flatOptions, filteredOptions, parentMap, totalCount, matchesCount } = prepareOptions(\n    options,\n    filteringType,\n    filteringValue\n  );\n\n  const selectAllOption: DropdownOption = {\n    type: 'select-all',\n    afterHeader: filteringType !== 'none',\n    option: { label: i18n('i18nStrings.selectAllText', i18nStrings?.selectAllText) },\n  };\n\n  const visibleOptions =\n    enableSelectAll && filteredOptions.length ? [selectAllOption, ...filteredOptions] : filteredOptions;\n\n  // Includes visible and non-visible (filtered out) options\n  const allNonParentOptions = flatOptions.filter(item => item.type !== 'parent').map(option => option.option);\n\n  const filteredNonParentOptions = filteredOptions.filter(item => item.type !== 'parent').map(item => item.option);\n\n  const selectedValues = useMemo(() => new Set(selectedOptions.map(option => option.value)), [selectedOptions]);\n\n  const isSomeSelected = selectedOptions.length > 0;\n  const isAllVisibleSelectableSelected =\n    isSomeSelected && filteredNonParentOptions.every(option => option.disabled || selectedValues.has(option.value));\n  const isAllSelected = allNonParentOptions.every(option => selectedValues.has(option.value));\n\n  const toggleAll = () => {\n    const filteredNonParentOptionValues = new Set(filteredNonParentOptions.map(option => option.value));\n    fireNonCancelableEvent(onChange, {\n      selectedOptions: isAllVisibleSelectableSelected\n        ? selectedOptions.filter(option => !filteredNonParentOptionValues.has(option.value))\n        : allNonParentOptions.filter(\n            ({ disabled, value }) =>\n              selectedValues.has(value) || (!disabled && filteredNonParentOptionValues.has(value))\n          ),\n    });\n  };\n\n  const updateSelectedOption = useCallback(\n    (option: OptionDefinition | OptionGroup) => {\n      // switch between selection and deselection behavior, ignores disabled options to prevent\n      // getting stuck on one behavior when an option is disabled and its state cannot be changed\n      const isAllChildrenSelected = (optionsArray: OptionDefinition[]) =>\n        optionsArray.every(item => findOptionIndex(selectedOptions, item) > -1 || item.disabled);\n      const intersection = (visibleOptions: OptionDefinition[], options: OptionDefinition[]) =>\n        visibleOptions.filter(item => findOptionIndex(options, item) > -1 && !item.disabled);\n      const union = (visibleOptions: OptionDefinition[], options: OptionDefinition[]) =>\n        visibleOptions.filter(item => findOptionIndex(options, item) === -1).concat(options);\n      const select = (options: OptionDefinition[], selectedOptions: OptionDefinition[]) => {\n        return union(selectedOptions, options);\n      };\n      const unselect = (options: OptionDefinition[], selectedOptions: OptionDefinition[]) => {\n        return selectedOptions.filter(option => findOptionIndex(options, option) === -1);\n      };\n      let newSelectedOptions = [...selectedOptions];\n\n      if (isGroup(option)) {\n        const visibleOptions = intersection([...option.options], filteredNonParentOptions);\n        newSelectedOptions = isAllChildrenSelected(visibleOptions)\n          ? unselect(visibleOptions, newSelectedOptions)\n          : select(visibleOptions, newSelectedOptions);\n      } else {\n        newSelectedOptions = isAllChildrenSelected([option])\n          ? unselect([option], newSelectedOptions)\n          : select([option], newSelectedOptions);\n      }\n\n      fireNonCancelableEvent(onChange, {\n        selectedOptions: newSelectedOptions,\n      });\n    },\n    [selectedOptions, onChange, filteredNonParentOptions]\n  );\n\n  const scrollToIndex = useRef<SelectListProps.SelectListRef>(null);\n  const {\n    isOpen,\n    highlightType,\n    highlightedOption,\n    highlightedIndex,\n    getTriggerProps,\n    getDropdownProps,\n    getFilterProps,\n    getMenuProps,\n    getOptionProps,\n    highlightOption,\n    announceSelected,\n  } = useSelect({\n    selectedOptions,\n    updateSelectedOption,\n    options: visibleOptions,\n    filteringType,\n    onFocus,\n    onBlur,\n    externalRef,\n    keepOpen,\n    fireLoadItems,\n    setFilteringValue,\n    useInteractiveGroups,\n    statusType,\n    embedded,\n    isAllSelected,\n    isSomeSelected,\n    toggleAll,\n  });\n\n  const wrapperOnKeyDown = useNativeSearch({\n    isEnabled: filteringType === 'none' && isOpen,\n    options: visibleOptions,\n    highlightOption: highlightOption,\n    highlightedOption: highlightedOption?.option,\n    useInteractiveGroups,\n  });\n\n  const isEmpty = !options || options.length === 0;\n  const isNoMatch = filteredOptions && filteredOptions.length === 0;\n  const isFiltered =\n    filteringType !== 'none' && filteringValue.length > 0 && filteredOptions && filteredOptions.length > 0;\n  const filteredText = isFiltered ? filteringResultsText?.(matchesCount, totalCount) : undefined;\n  const dropdownStatus = useDropdownStatus({\n    statusType,\n    empty,\n    loadingText,\n    finishedText,\n    errorText,\n    recoveryText,\n    isEmpty,\n    isNoMatch,\n    noMatch,\n    isFiltered,\n    filteringResultsText: filteredText,\n    onRecoveryClick: handleRecoveryClick,\n    errorIconAriaLabel: errorIconAriaLabel,\n    hasRecoveryCallback: !!onLoadItems,\n  });\n\n  const announcement = useAnnouncement({\n    announceSelected,\n    highlightedOption,\n    getParent: option => parentMap.get(option)?.option as undefined | OptionGroup,\n    selectedAriaLabel,\n    renderHighlightedAriaLive,\n  });\n\n  const tokens: TokenGroupProps['items'] = selectedOptions.map(option => ({\n    label: option.label,\n    disabled: disabled || option.disabled,\n    labelTag: option.labelTag,\n    description: option.description,\n    iconAlt: option.iconAlt,\n    iconName: option.iconName,\n    iconUrl: option.iconUrl,\n    iconSvg: option.iconSvg,\n    tags: option.tags,\n    dismissLabel: i18n('deselectAriaLabel', deselectAriaLabel?.(option), format =>\n      format({ option__label: option.label ?? '' })\n    ),\n  }));\n\n  useEffect(() => {\n    scrollToIndex.current?.(highlightedIndex);\n  }, [highlightedIndex]);\n\n  const dropdownOnMouseDown = (event: React.MouseEvent) => {\n    const target = event.target as HTMLElement;\n\n    if (target !== document.activeElement) {\n      // prevent currently focused element from losing it\n      event.preventDefault();\n    }\n  };\n\n  const tokenOnDismiss: TokenGroupProps['onDismiss'] = ({ detail }) => {\n    const optionToDeselect = selectedOptions[detail.itemIndex];\n    updateSelectedOption(optionToDeselect);\n    const targetRef = getTriggerProps().ref;\n    if (targetRef.current) {\n      targetRef.current.focus();\n    }\n  };\n\n  return {\n    isOpen,\n    tokens,\n    announcement,\n    dropdownStatus,\n    filteringValue,\n    filteredOptions: visibleOptions,\n    highlightType,\n    scrollToIndex,\n    getFilterProps,\n    getTriggerProps,\n    getMenuProps: () => ({\n      ...getMenuProps(),\n      onLoadMore: handleLoadMore,\n      ariaLabelledby: joinStrings(ariaLabelId, controlId),\n      ariaDescribedby: dropdownStatus.content ? footerId : undefined,\n      embedded,\n    }),\n    getOptionProps,\n    getTokenProps: () => ({ onDismiss: tokenOnDismiss }),\n    getDropdownProps: () => ({ ...getDropdownProps(), onMouseDown: dropdownOnMouseDown }),\n    getWrapperProps: () => ({ onKeyDown: wrapperOnKeyDown }),\n    highlightedIndex,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}