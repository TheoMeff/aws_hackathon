{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { splitItems } from '../../drawer/drawers-helpers';\nimport OverflowMenu from '../../drawer/overflow-menu';\nimport { TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport TriggerButton from './trigger-button';\nimport splitPanelTestUtilStyles from '../../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nexport function DrawerTriggers({\n  ariaLabels,\n  activeDrawerId,\n  drawers,\n  drawersFocusRef,\n  onActiveDrawerChange,\n  splitPanelOpen,\n  splitPanelPosition = 'bottom',\n  splitPanelFocusRef,\n  splitPanelToggleProps,\n  onSplitPanelToggle,\n  disabled,\n  activeGlobalDrawersIds,\n  globalDrawers,\n  globalDrawersFocusControl,\n  onActiveGlobalDrawersChange,\n  expandedDrawerId,\n  setExpandedDrawerId\n}) {\n  const isMobile = useMobile();\n  const hasMultipleTriggers = drawers.length > 1;\n  const previousActiveLocalDrawerId = useRef(activeDrawerId);\n  const previousActiveGlobalDrawersIds = useRef(activeGlobalDrawersIds);\n  const [containerWidth, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  if (!drawers.length && !globalDrawers.length && !splitPanelToggleProps) {\n    return null;\n  }\n  if (activeDrawerId) {\n    previousActiveLocalDrawerId.current = activeDrawerId;\n  }\n  if (activeGlobalDrawersIds.length) {\n    previousActiveGlobalDrawersIds.current = activeGlobalDrawersIds;\n  }\n  const getIndexOfOverflowItem = () => {\n    if (isMobile) {\n      return 2;\n    }\n    if (containerWidth) {\n      const ITEM_WIDTH = 50; // Roughly 34px + padding = 42px but added extra for safety\n      const overflowSpot = containerWidth;\n      const index = Math.floor(overflowSpot / ITEM_WIDTH);\n      let splitPanelItem = 0;\n      if (splitPanelToggleProps) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n  const indexOfOverflowItem = getIndexOfOverflowItem();\n  const {\n    visibleItems,\n    overflowItems\n  } = splitItems([...drawers, ...globalDrawers], indexOfOverflowItem, activeDrawerId !== null && activeDrawerId !== void 0 ? activeDrawerId : null);\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  const globalDrawersStartIndex = drawers.length;\n  const hasOpenDrawer = !!activeDrawerId || splitPanelPosition === 'side' && splitPanelOpen;\n  const splitPanelResolvedPosition = splitPanelToggleProps === null || splitPanelToggleProps === void 0 ? void 0 : splitPanelToggleProps.position;\n  const exitExpandedMode = () => {\n    if (setExpandedDrawerId) {\n      setExpandedDrawerId(null);\n    }\n  };\n  return React.createElement(\"aside\", {\n    className: styles[`drawers-${isMobile ? 'mobile' : 'desktop'}-triggers-container`],\n    \"aria-label\": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers,\n    ref: triggersContainerRef,\n    role: \"region\"\n  }, React.createElement(\"div\", {\n    className: styles['drawers-trigger-content'],\n    \"aria-label\": ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawers,\n    role: \"toolbar\",\n    \"aria-orientation\": \"horizontal\"\n  }, splitPanelToggleProps && React.createElement(React.Fragment, null, React.createElement(TriggerButton, {\n    ariaLabel: splitPanelToggleProps.ariaLabel,\n    ariaControls: splitPanelToggleProps.controlId,\n    ariaExpanded: !expandedDrawerId && splitPanelToggleProps.active,\n    className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], splitPanelTestUtilStyles['open-button']),\n    iconName: splitPanelResolvedPosition === 'side' ? 'view-vertical' : 'view-horizontal',\n    onClick: () => {\n      exitExpandedMode();\n      if (!!expandedDrawerId && splitPanelToggleProps.active) {\n        return;\n      }\n      onSplitPanelToggle === null || onSplitPanelToggle === void 0 ? void 0 : onSplitPanelToggle();\n    },\n    selected: !expandedDrawerId && splitPanelToggleProps.active,\n    ref: splitPanelResolvedPosition === 'side' ? splitPanelFocusRef : undefined,\n    hasTooltip: true,\n    isMobile: isMobile,\n    isForSplitPanel: true,\n    disabled: disabled\n  }), hasMultipleTriggers ? React.createElement(\"div\", {\n    className: styles['group-divider']\n  }) : null), visibleItems.slice(0, globalDrawersStartIndex).map(item => {\n    var _a, _b;\n    const isForPreviousActiveDrawer = (previousActiveLocalDrawerId === null || previousActiveLocalDrawerId === void 0 ? void 0 : previousActiveLocalDrawerId.current) === item.id;\n    const selected = !expandedDrawerId && item.id === activeDrawerId;\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: selected,\n      ariaControls: activeDrawerId === item.id ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], !toolsOnlyMode && testutilStyles['drawers-trigger'], item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: () => {\n        exitExpandedMode();\n        if (!!expandedDrawerId && activeDrawerId === item.id) {\n          return;\n        }\n        onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(activeDrawerId !== item.id ? item.id : null, {\n          initiatedByUserAction: true\n        });\n      },\n      ref: item.id === previousActiveLocalDrawerId.current ? drawersFocusRef : undefined,\n      selected: selected,\n      badge: item.badge,\n      testId: `awsui-app-layout-trigger-${item.id}`,\n      hasTooltip: true,\n      hasOpenDrawer: hasOpenDrawer,\n      tooltipText: (_b = item.ariaLabels) === null || _b === void 0 ? void 0 : _b.drawerName,\n      isForPreviousActiveDrawer: isForPreviousActiveDrawer,\n      isMobile: isMobile,\n      disabled: disabled\n    });\n  }), globalDrawersStartIndex > 0 && visibleItems.length > globalDrawersStartIndex && React.createElement(\"div\", {\n    className: styles['group-divider']\n  }), visibleItems.slice(globalDrawersStartIndex).map(item => {\n    var _a, _b, _c;\n    const isForPreviousActiveDrawer = previousActiveGlobalDrawersIds === null || previousActiveGlobalDrawersIds === void 0 ? void 0 : previousActiveGlobalDrawersIds.current.includes(item.id);\n    const selected = activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId);\n    return React.createElement(TriggerButton, {\n      ariaLabel: (_a = item.ariaLabels) === null || _a === void 0 ? void 0 : _a.triggerButton,\n      ariaExpanded: selected,\n      ariaControls: selected ? item.id : undefined,\n      className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testutilStyles['drawers-trigger-global']),\n      iconName: item.trigger.iconName,\n      iconSvg: item.trigger.iconSvg,\n      key: item.id,\n      onClick: () => {\n        exitExpandedMode();\n        if (!!expandedDrawerId && item.id !== expandedDrawerId && activeGlobalDrawersIds.includes(item.id)) {\n          return;\n        }\n        onActiveGlobalDrawersChange === null || onActiveGlobalDrawersChange === void 0 ? void 0 : onActiveGlobalDrawersChange(item.id, {\n          initiatedByUserAction: true\n        });\n      },\n      ref: (_b = globalDrawersFocusControl === null || globalDrawersFocusControl === void 0 ? void 0 : globalDrawersFocusControl.refs[item.id]) === null || _b === void 0 ? void 0 : _b.toggle,\n      selected: selected,\n      badge: item.badge,\n      testId: `awsui-app-layout-trigger-${item.id}`,\n      hasTooltip: true,\n      hasOpenDrawer: hasOpenDrawer,\n      tooltipText: (_c = item.ariaLabels) === null || _c === void 0 ? void 0 : _c.drawerName,\n      isForPreviousActiveDrawer: isForPreviousActiveDrawer,\n      isMobile: isMobile,\n      disabled: disabled\n    });\n  }), overflowItems.length > 0 && React.createElement(OverflowMenu, {\n    items: overflowItems.map(item => Object.assign(Object.assign({}, item), {\n      active: activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId)\n    })),\n    ariaLabel: overflowMenuHasBadge ? ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflowWithBadge : ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.drawersOverflow,\n    customTriggerBuilder: ({\n      onClick,\n      triggerRef,\n      ariaLabel,\n      ariaExpanded,\n      testUtilsClass\n    }) => {\n      return React.createElement(TriggerButton, {\n        ref: triggerRef,\n        ariaLabel: ariaLabel,\n        ariaExpanded: ariaExpanded,\n        badge: overflowMenuHasBadge,\n        className: clsx(styles['drawers-trigger'], testutilStyles['drawers-trigger'], testutilStyles['drawers-trigger-global'], testUtilsClass),\n        iconName: \"ellipsis\",\n        onClick: onClick,\n        disabled: disabled\n      });\n    },\n    onItemClick: event => {\n      const id = event.detail.id;\n      exitExpandedMode();\n      if (globalDrawers.find(drawer => drawer.id === id)) {\n        if (!!expandedDrawerId && id !== expandedDrawerId && activeGlobalDrawersIds.includes(id)) {\n          return;\n        }\n        onActiveGlobalDrawersChange === null || onActiveGlobalDrawersChange === void 0 ? void 0 : onActiveGlobalDrawersChange(id, {\n          initiatedByUserAction: true\n        });\n      } else {\n        onActiveDrawerChange === null || onActiveDrawerChange === void 0 ? void 0 : onActiveDrawerChange(event.detail.id, {\n          initiatedByUserAction: true\n        });\n      }\n    },\n    globalDrawersStartIndex: globalDrawersStartIndex - indexOfOverflowItem\n  })));\n}","map":{"version":3,"names":["React","useRef","clsx","useContainerQuery","useMobile","splitItems","OverflowMenu","TOOLS_DRAWER_ID","TriggerButton","splitPanelTestUtilStyles","testutilStyles","styles","DrawerTriggers","ariaLabels","activeDrawerId","drawers","drawersFocusRef","onActiveDrawerChange","splitPanelOpen","splitPanelPosition","splitPanelFocusRef","splitPanelToggleProps","onSplitPanelToggle","disabled","activeGlobalDrawersIds","globalDrawers","globalDrawersFocusControl","onActiveGlobalDrawersChange","expandedDrawerId","setExpandedDrawerId","isMobile","hasMultipleTriggers","length","previousActiveLocalDrawerId","previousActiveGlobalDrawersIds","containerWidth","triggersContainerRef","rect","contentBoxWidth","current","getIndexOfOverflowItem","ITEM_WIDTH","overflowSpot","index","Math","floor","splitPanelItem","indexOfOverflowItem","visibleItems","overflowItems","overflowMenuHasBadge","find","item","badge","toolsOnlyMode","id","globalDrawersStartIndex","hasOpenDrawer","splitPanelResolvedPosition","position","exitExpandedMode","createElement","className","ref","role","Fragment","ariaLabel","ariaControls","controlId","ariaExpanded","active","iconName","onClick","selected","undefined","hasTooltip","isForSplitPanel","slice","map","isForPreviousActiveDrawer","_a","triggerButton","trigger","iconSvg","key","initiatedByUserAction","testId","tooltipText","_b","drawerName","includes","refs","toggle","_c","items","Object","assign","drawersOverflowWithBadge","drawersOverflow","customTriggerBuilder","triggerRef","testUtilsClass","onItemClick","event","detail","drawer"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/app-layout/visual-refresh-toolbar/toolbar/drawer-triggers.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\n\nimport { useMobile } from '../../../internal/hooks/use-mobile';\nimport { splitItems } from '../../drawer/drawers-helpers';\nimport OverflowMenu from '../../drawer/overflow-menu';\nimport { AppLayoutProps, AppLayoutPropsWithDefaults } from '../../interfaces';\nimport { OnChangeParams, TOOLS_DRAWER_ID } from '../../utils/use-drawers';\nimport { Focusable, FocusControlMultipleStates } from '../../utils/use-focus-control';\nimport TriggerButton from './trigger-button';\n\nimport splitPanelTestUtilStyles from '../../../split-panel/test-classes/styles.css.js';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\nexport interface SplitPanelToggleProps {\n  displayed: boolean;\n  ariaLabel: string | undefined;\n  controlId: string | undefined;\n  active: boolean;\n  position: AppLayoutProps.SplitPanelPosition;\n}\n\ninterface DrawerTriggersProps {\n  ariaLabels: AppLayoutPropsWithDefaults['ariaLabels'];\n\n  activeDrawerId: string | null;\n  drawersFocusRef: React.Ref<Focusable> | undefined;\n  drawers: ReadonlyArray<AppLayoutProps.Drawer>;\n  onActiveDrawerChange: ((drawerId: string | null, params: OnChangeParams) => void) | undefined;\n\n  activeGlobalDrawersIds: ReadonlyArray<string>;\n  globalDrawersFocusControl?: FocusControlMultipleStates;\n  globalDrawers: ReadonlyArray<AppLayoutProps.Drawer>;\n  onActiveGlobalDrawersChange?: (newDrawerId: string, params: OnChangeParams) => void;\n  expandedDrawerId?: string | null;\n  setExpandedDrawerId: (value: string | null) => void;\n\n  splitPanelOpen?: boolean;\n  splitPanelPosition?: AppLayoutProps.SplitPanelPreferences['position'];\n  splitPanelToggleProps: SplitPanelToggleProps | undefined;\n  splitPanelFocusRef: React.Ref<Focusable> | undefined;\n  onSplitPanelToggle: (() => void) | undefined;\n  disabled: boolean;\n}\n\nexport function DrawerTriggers({\n  ariaLabels,\n  activeDrawerId,\n  drawers,\n  drawersFocusRef,\n  onActiveDrawerChange,\n  splitPanelOpen,\n  splitPanelPosition = 'bottom',\n  splitPanelFocusRef,\n  splitPanelToggleProps,\n  onSplitPanelToggle,\n  disabled,\n  activeGlobalDrawersIds,\n  globalDrawers,\n  globalDrawersFocusControl,\n  onActiveGlobalDrawersChange,\n  expandedDrawerId,\n  setExpandedDrawerId,\n}: DrawerTriggersProps) {\n  const isMobile = useMobile();\n  const hasMultipleTriggers = drawers.length > 1;\n  const previousActiveLocalDrawerId = useRef(activeDrawerId);\n  const previousActiveGlobalDrawersIds = useRef(activeGlobalDrawersIds);\n  const [containerWidth, triggersContainerRef] = useContainerQuery(rect => rect.contentBoxWidth);\n  if (!drawers.length && !globalDrawers.length && !splitPanelToggleProps) {\n    return null;\n  }\n\n  if (activeDrawerId) {\n    previousActiveLocalDrawerId.current = activeDrawerId;\n  }\n\n  if (activeGlobalDrawersIds.length) {\n    previousActiveGlobalDrawersIds.current = activeGlobalDrawersIds;\n  }\n\n  const getIndexOfOverflowItem = () => {\n    if (isMobile) {\n      return 2;\n    }\n    if (containerWidth) {\n      const ITEM_WIDTH = 50; // Roughly 34px + padding = 42px but added extra for safety\n      const overflowSpot = containerWidth;\n\n      const index = Math.floor(overflowSpot / ITEM_WIDTH);\n\n      let splitPanelItem = 0;\n      if (splitPanelToggleProps) {\n        splitPanelItem = 1;\n      }\n      return index - splitPanelItem;\n    }\n    return 0;\n  };\n\n  const indexOfOverflowItem = getIndexOfOverflowItem();\n\n  const { visibleItems, overflowItems } = splitItems(\n    [...drawers, ...globalDrawers],\n    indexOfOverflowItem,\n    activeDrawerId ?? null\n  );\n  const overflowMenuHasBadge = !!overflowItems.find(item => item.badge);\n  const toolsOnlyMode = drawers.length === 1 && drawers[0].id === TOOLS_DRAWER_ID;\n  const globalDrawersStartIndex = drawers.length;\n  const hasOpenDrawer = !!activeDrawerId || (splitPanelPosition === 'side' && splitPanelOpen);\n  const splitPanelResolvedPosition = splitPanelToggleProps?.position;\n\n  const exitExpandedMode = () => {\n    if (setExpandedDrawerId) {\n      setExpandedDrawerId(null);\n    }\n  };\n\n  return (\n    <aside\n      className={styles[`drawers-${isMobile ? 'mobile' : 'desktop'}-triggers-container`]}\n      aria-label={ariaLabels?.drawers}\n      ref={triggersContainerRef}\n      role=\"region\"\n    >\n      <div\n        className={styles['drawers-trigger-content']}\n        aria-label={ariaLabels?.drawers}\n        role=\"toolbar\"\n        aria-orientation=\"horizontal\"\n      >\n        {splitPanelToggleProps && (\n          <>\n            <TriggerButton\n              ariaLabel={splitPanelToggleProps.ariaLabel}\n              ariaControls={splitPanelToggleProps.controlId}\n              ariaExpanded={!expandedDrawerId && splitPanelToggleProps.active}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                splitPanelTestUtilStyles['open-button']\n              )}\n              iconName={splitPanelResolvedPosition === 'side' ? 'view-vertical' : 'view-horizontal'}\n              onClick={() => {\n                exitExpandedMode();\n                if (!!expandedDrawerId && splitPanelToggleProps.active) {\n                  return;\n                }\n                onSplitPanelToggle?.();\n              }}\n              selected={!expandedDrawerId && splitPanelToggleProps.active}\n              ref={splitPanelResolvedPosition === 'side' ? splitPanelFocusRef : undefined}\n              hasTooltip={true}\n              isMobile={isMobile}\n              isForSplitPanel={true}\n              disabled={disabled}\n            />\n            {hasMultipleTriggers ? <div className={styles['group-divider']}></div> : null}\n          </>\n        )}\n        {visibleItems.slice(0, globalDrawersStartIndex).map(item => {\n          const isForPreviousActiveDrawer = previousActiveLocalDrawerId?.current === item.id;\n          const selected = !expandedDrawerId && item.id === activeDrawerId;\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={selected}\n              ariaControls={activeDrawerId === item.id ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                !toolsOnlyMode && testutilStyles['drawers-trigger'],\n                item.id === TOOLS_DRAWER_ID && testutilStyles['tools-toggle']\n              )}\n              iconName={item.trigger!.iconName}\n              iconSvg={item.trigger!.iconSvg}\n              key={item.id}\n              onClick={() => {\n                exitExpandedMode();\n                if (!!expandedDrawerId && activeDrawerId === item.id) {\n                  return;\n                }\n                onActiveDrawerChange?.(activeDrawerId !== item.id ? item.id : null, { initiatedByUserAction: true });\n              }}\n              ref={item.id === previousActiveLocalDrawerId.current ? drawersFocusRef : undefined}\n              selected={selected}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n              hasTooltip={true}\n              hasOpenDrawer={hasOpenDrawer}\n              tooltipText={item.ariaLabels?.drawerName}\n              isForPreviousActiveDrawer={isForPreviousActiveDrawer}\n              isMobile={isMobile}\n              disabled={disabled}\n            />\n          );\n        })}\n        {globalDrawersStartIndex > 0 && visibleItems.length > globalDrawersStartIndex && (\n          <div className={styles['group-divider']}></div>\n        )}\n        {visibleItems.slice(globalDrawersStartIndex).map(item => {\n          const isForPreviousActiveDrawer = previousActiveGlobalDrawersIds?.current.includes(item.id);\n          const selected =\n            activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId);\n          return (\n            <TriggerButton\n              ariaLabel={item.ariaLabels?.triggerButton}\n              ariaExpanded={selected}\n              ariaControls={selected ? item.id : undefined}\n              className={clsx(\n                styles['drawers-trigger'],\n                testutilStyles['drawers-trigger'],\n                testutilStyles['drawers-trigger-global']\n              )}\n              iconName={item.trigger!.iconName}\n              iconSvg={item.trigger!.iconSvg}\n              key={item.id}\n              onClick={() => {\n                exitExpandedMode();\n                if (!!expandedDrawerId && item.id !== expandedDrawerId && activeGlobalDrawersIds.includes(item.id)) {\n                  return;\n                }\n                onActiveGlobalDrawersChange?.(item.id, { initiatedByUserAction: true });\n              }}\n              ref={globalDrawersFocusControl?.refs[item.id]?.toggle}\n              selected={selected}\n              badge={item.badge}\n              testId={`awsui-app-layout-trigger-${item.id}`}\n              hasTooltip={true}\n              hasOpenDrawer={hasOpenDrawer}\n              tooltipText={item.ariaLabels?.drawerName}\n              isForPreviousActiveDrawer={isForPreviousActiveDrawer}\n              isMobile={isMobile}\n              disabled={disabled}\n            />\n          );\n        })}\n        {overflowItems.length > 0 && (\n          <OverflowMenu\n            items={overflowItems.map(item => ({\n              ...item,\n              active: activeGlobalDrawersIds.includes(item.id) && (!expandedDrawerId || item.id === expandedDrawerId),\n            }))}\n            ariaLabel={overflowMenuHasBadge ? ariaLabels?.drawersOverflowWithBadge : ariaLabels?.drawersOverflow}\n            customTriggerBuilder={({ onClick, triggerRef, ariaLabel, ariaExpanded, testUtilsClass }) => {\n              return (\n                <TriggerButton\n                  ref={triggerRef}\n                  ariaLabel={ariaLabel}\n                  ariaExpanded={ariaExpanded}\n                  badge={overflowMenuHasBadge}\n                  className={clsx(\n                    styles['drawers-trigger'],\n                    testutilStyles['drawers-trigger'],\n                    testutilStyles['drawers-trigger-global'],\n                    testUtilsClass\n                  )}\n                  iconName=\"ellipsis\"\n                  onClick={onClick}\n                  disabled={disabled}\n                />\n              );\n            }}\n            onItemClick={event => {\n              const id = event.detail.id;\n              exitExpandedMode();\n              if (globalDrawers.find(drawer => drawer.id === id)) {\n                if (!!expandedDrawerId && id !== expandedDrawerId && activeGlobalDrawersIds.includes(id)) {\n                  return;\n                }\n                onActiveGlobalDrawersChange?.(id, { initiatedByUserAction: true });\n              } else {\n                onActiveDrawerChange?.(event.detail.id, { initiatedByUserAction: true });\n              }\n            }}\n            globalDrawersStartIndex={globalDrawersStartIndex - indexOfOverflowItem}\n          />\n        )}\n      </div>\n    </aside>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}