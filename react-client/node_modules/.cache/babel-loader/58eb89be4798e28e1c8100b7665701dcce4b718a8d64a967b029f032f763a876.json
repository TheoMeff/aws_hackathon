{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useInternalI18n } from '../../i18n/context';\nimport Icon from '../../icon/internal';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport InternalLiveRegion from '../../live-region/internal';\nimport { DisabledInlineEditor } from './disabled-inline-editor';\nimport { InlineEditor } from './inline-editor';\nimport { TableTdElement } from './td-element';\nimport styles from './styles.css.js';\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\nfunction TableCellEditable(_a) {\n  var _b, _c, _d;\n  var {\n      item,\n      column,\n      isEditing,\n      onEditStart,\n      onEditEnd,\n      submitEdit,\n      ariaLabels,\n      successfulEdit = false\n    } = _a,\n    rest = __rest(_a, [\"item\", \"column\", \"isEditing\", \"onEditStart\", \"onEditEnd\", \"submitEdit\", \"ariaLabels\", \"successfulEdit\"]);\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString()\n  };\n  const isFocusMoveNeededRef = useRef(false);\n  const isExpandableColumn = rest.level !== undefined;\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasFocus, setHasFocus] = useState(false);\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n  const {\n    tabIndex: editActivateTabIndex\n  } = useSingleTabStopNavigation(editActivateRef);\n  return React.createElement(TableTdElement, Object.assign({}, rest, {\n    nativeAttributes: tdNativeAttributes,\n    isEditing: isEditing,\n    hasSuccessIcon: showSuccessIcon && hasFocus,\n    onClick: !isEditing && !isExpandableColumn ? onEditStart : undefined,\n    onFocus: () => setHasFocus(true),\n    onBlur: () => setHasFocus(false)\n  }), isEditing && column.editConfig ? React.createElement(InlineEditor, {\n    ariaLabels: ariaLabels,\n    column: column,\n    item: item,\n    onEditEnd: options => {\n      setShowSuccessIcon(false);\n      isFocusMoveNeededRef.current = options.refocusCell;\n      onEditEnd(options.cancelled);\n    },\n    submitEdit: submitEdit !== null && submitEdit !== void 0 ? submitEdit : submitHandlerFallback\n  }) : React.createElement(React.Fragment, null, column.cell(item), showSuccessIcon && hasFocus && React.createElement(React.Fragment, null, React.createElement(\"span\", {\n    className: styles['body-cell-success'],\n    onMouseDown: e => {\n      // Prevent the editor's Button blur event to be fired when clicking the success icon.\n      // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n      e.preventDefault();\n    }\n  }, React.createElement(Icon, {\n    name: \"status-positive\",\n    variant: \"success\",\n    ariaLabel: (_b = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _b === void 0 ? void 0 : _b.call(ariaLabels, column)\n  })), React.createElement(InternalLiveRegion, {\n    tagName: \"span\",\n    hidden: true\n  }, i18n('ariaLabels.successfulEditLabel', (_c = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.successfulEditLabel) === null || _c === void 0 ? void 0 : _c.call(ariaLabels, column)))), React.createElement(\"div\", {\n    className: styles['body-cell-editor-wrapper']\n  }, React.createElement(\"button\", {\n    className: clsx(styles['body-cell-editor'], isExpandableColumn && styles['body-cell-editor-focusable']),\n    \"aria-label\": (_d = ariaLabels === null || ariaLabels === void 0 ? void 0 : ariaLabels.activateEditLabel) === null || _d === void 0 ? void 0 : _d.call(ariaLabels, column, item),\n    ref: editActivateRef,\n    onClick: !isEditing && isExpandableColumn ? onEditStart : undefined,\n    tabIndex: editActivateTabIndex\n  }, React.createElement(\"span\", {\n    className: styles['body-cell-editor-icon']\n  }, React.createElement(Icon, {\n    name: \"edit\"\n  }))))));\n}\nexport function TableBodyCell(props) {\n  var _a, _b;\n  const editDisabledReason = (_b = (_a = props.column.editConfig) === null || _a === void 0 ? void 0 : _a.disabledReason) === null || _b === void 0 ? void 0 : _b.call(_a, props.item);\n  // Inline editing is deactivated for expandable column because editable cells are interactive\n  // and cannot include interactive content such as expand toggles.\n  if (editDisabledReason) {\n    return React.createElement(DisabledInlineEditor, Object.assign({\n      editDisabledReason: editDisabledReason\n    }, props));\n  }\n  if (props.isEditable || props.isEditing) {\n    return React.createElement(TableCellEditable, Object.assign({}, props));\n  }\n  const {\n    column,\n    item\n  } = props;\n  return React.createElement(TableTdElement, Object.assign({}, props, {\n    isEditable: false\n  }), column.cell(item));\n}","map":{"version":3,"names":["React","useEffect","useRef","useState","clsx","useInternalI18n","Icon","useSingleTabStopNavigation","usePrevious","InternalLiveRegion","DisabledInlineEditor","InlineEditor","TableTdElement","styles","submitHandlerFallback","Error","TableCellEditable","_a","item","column","isEditing","onEditStart","onEditEnd","submitEdit","ariaLabels","successfulEdit","rest","__rest","i18n","editActivateRef","tdNativeAttributes","toString","isFocusMoveNeededRef","isExpandableColumn","level","undefined","current","focus","hasFocus","setHasFocus","prevSuccessfulEdit","prevHasFocus","showSuccessIcon","setShowSuccessIcon","tabIndex","editActivateTabIndex","createElement","Object","assign","nativeAttributes","hasSuccessIcon","onClick","onFocus","onBlur","editConfig","options","refocusCell","cancelled","Fragment","cell","className","onMouseDown","e","preventDefault","name","variant","ariaLabel","_b","successfulEditLabel","call","tagName","hidden","_c","_d","activateEditLabel","ref","TableBodyCell","props","editDisabledReason","disabledReason","isEditable"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/table/body-cell/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useInternalI18n } from '../../i18n/context';\nimport Icon from '../../icon/internal';\nimport { useSingleTabStopNavigation } from '../../internal/context/single-tab-stop-navigation-context.js';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport InternalLiveRegion from '../../live-region/internal';\nimport { TableProps } from '../interfaces';\nimport { DisabledInlineEditor } from './disabled-inline-editor';\nimport { InlineEditor } from './inline-editor';\nimport { TableTdElement, TableTdElementProps } from './td-element';\n\nimport styles from './styles.css.js';\n\nconst submitHandlerFallback = () => {\n  throw new Error('The function `handleSubmit` is required for editable columns');\n};\n\nexport interface TableBodyCellProps<ItemType> extends TableTdElementProps {\n  column: TableProps.ColumnDefinition<ItemType>;\n  item: ItemType;\n  successfulEdit?: boolean;\n  onEditStart: () => void;\n  onEditEnd: (cancelled: boolean) => void;\n  submitEdit?: TableProps.SubmitEditFunction<ItemType>;\n  ariaLabels: TableProps['ariaLabels'];\n}\n\nfunction TableCellEditable<ItemType>({\n  item,\n  column,\n  isEditing,\n  onEditStart,\n  onEditEnd,\n  submitEdit,\n  ariaLabels,\n  successfulEdit = false,\n  ...rest\n}: TableBodyCellProps<ItemType>) {\n  const i18n = useInternalI18n('table');\n  const editActivateRef = useRef<HTMLButtonElement>(null);\n  const tdNativeAttributes = {\n    'data-inline-editing-active': isEditing.toString(),\n  };\n  const isFocusMoveNeededRef = useRef(false);\n  const isExpandableColumn = rest.level !== undefined;\n\n  useEffect(() => {\n    if (!isEditing && editActivateRef.current && isFocusMoveNeededRef.current) {\n      isFocusMoveNeededRef.current = false;\n      editActivateRef.current.focus();\n    }\n  }, [isEditing]);\n  // To improve the initial page render performance we only show the edit icon when necessary.\n  const [hasFocus, setHasFocus] = useState(false);\n\n  const prevSuccessfulEdit = usePrevious(successfulEdit);\n  const prevHasFocus = usePrevious(hasFocus);\n  const [showSuccessIcon, setShowSuccessIcon] = useState(false);\n\n  useEffect(() => {\n    // Hide the success icon after a successful edit, when cell loses focus.\n    if (successfulEdit && prevSuccessfulEdit && !hasFocus && prevHasFocus) {\n      setShowSuccessIcon(false);\n    }\n    // Show success icon right after a successful edit, when `successfulEdit` switches to true.\n    if (successfulEdit && !prevSuccessfulEdit) {\n      setShowSuccessIcon(true);\n    }\n  }, [hasFocus, successfulEdit, prevHasFocus, prevSuccessfulEdit]);\n\n  const { tabIndex: editActivateTabIndex } = useSingleTabStopNavigation(editActivateRef);\n\n  return (\n    <TableTdElement\n      {...rest}\n      nativeAttributes={tdNativeAttributes as TableTdElementProps['nativeAttributes']}\n      isEditing={isEditing}\n      hasSuccessIcon={showSuccessIcon && hasFocus}\n      onClick={!isEditing && !isExpandableColumn ? onEditStart : undefined}\n      onFocus={() => setHasFocus(true)}\n      onBlur={() => setHasFocus(false)}\n    >\n      {isEditing && column.editConfig ? (\n        <InlineEditor\n          ariaLabels={ariaLabels}\n          column={column}\n          item={item}\n          onEditEnd={options => {\n            setShowSuccessIcon(false);\n            isFocusMoveNeededRef.current = options.refocusCell;\n            onEditEnd(options.cancelled);\n          }}\n          submitEdit={submitEdit ?? submitHandlerFallback}\n        />\n      ) : (\n        <>\n          {column.cell(item)}\n\n          {showSuccessIcon && hasFocus && (\n            <>\n              <span\n                className={styles['body-cell-success']}\n                onMouseDown={e => {\n                  // Prevent the editor's Button blur event to be fired when clicking the success icon.\n                  // This prevents unfocusing the button and triggers the `TableTdElement` onClick event which initiates the edit mode.\n                  e.preventDefault();\n                }}\n              >\n                <Icon name=\"status-positive\" variant=\"success\" ariaLabel={ariaLabels?.successfulEditLabel?.(column)} />\n              </span>\n              <InternalLiveRegion tagName=\"span\" hidden={true}>\n                {i18n('ariaLabels.successfulEditLabel', ariaLabels?.successfulEditLabel?.(column))}\n              </InternalLiveRegion>\n            </>\n          )}\n\n          <div className={styles['body-cell-editor-wrapper']}>\n            <button\n              className={clsx(styles['body-cell-editor'], isExpandableColumn && styles['body-cell-editor-focusable'])}\n              aria-label={ariaLabels?.activateEditLabel?.(column, item)}\n              ref={editActivateRef}\n              onClick={!isEditing && isExpandableColumn ? onEditStart : undefined}\n              tabIndex={editActivateTabIndex}\n            >\n              <span className={styles['body-cell-editor-icon']}>\n                <Icon name=\"edit\" />\n              </span>\n            </button>\n          </div>\n        </>\n      )}\n    </TableTdElement>\n  );\n}\n\nexport function TableBodyCell<ItemType>(props: TableBodyCellProps<ItemType>) {\n  const editDisabledReason = props.column.editConfig?.disabledReason?.(props.item);\n\n  // Inline editing is deactivated for expandable column because editable cells are interactive\n  // and cannot include interactive content such as expand toggles.\n  if (editDisabledReason) {\n    return <DisabledInlineEditor editDisabledReason={editDisabledReason} {...props} />;\n  }\n  if (props.isEditable || props.isEditing) {\n    return <TableCellEditable {...props} />;\n  }\n\n  const { column, item } = props;\n  return (\n    <TableTdElement {...props} isEditable={false}>\n      {column.cell(item)}\n    </TableTdElement>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}