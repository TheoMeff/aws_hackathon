{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport InternalBox from '../box/internal';\nimport { InternalButton } from '../button/internal';\nimport { useInternalI18n } from '../i18n/context';\nimport { getBaseProps } from '../internal/base-component';\nimport { CollectionPreferencesMetadata } from '../internal/context/collection-preferences-metadata-context';\nimport { useTableComponentsContext } from '../internal/context/table-component-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { getComponentAnalyticsMetadata } from './analytics-metadata/utils';\nimport ContentDisplayPreference from './content-display';\nimport { ContentDensityPreference, copyPreferences, CustomPreference, mergePreferences, ModalContentLayout, PageSizePreference, StickyColumnsPreference, StripedRowsPreference, WrapLinesPreference } from './utils';\nimport VisibleContentPreference from './visible-content';\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\nconst componentName = 'CollectionPreferences';\nexport default function CollectionPreferences(_a) {\n  var _b;\n  var {\n      title,\n      confirmLabel,\n      cancelLabel,\n      closeAriaLabel,\n      disabled = false,\n      onConfirm,\n      onCancel,\n      visibleContentPreference,\n      contentDisplayPreference,\n      pageSizePreference,\n      wrapLinesPreference,\n      stripedRowsPreference,\n      contentDensityPreference,\n      stickyColumnsPreference,\n      preferences,\n      customPreference,\n      getModalRoot,\n      removeModalRoot,\n      contentBefore\n    } = _a,\n    rest = __rest(_a, [\"title\", \"confirmLabel\", \"cancelLabel\", \"closeAriaLabel\", \"disabled\", \"onConfirm\", \"onCancel\", \"visibleContentPreference\", \"contentDisplayPreference\", \"pageSizePreference\", \"wrapLinesPreference\", \"stripedRowsPreference\", \"contentDensityPreference\", \"stickyColumnsPreference\", \"preferences\", \"customPreference\", \"getModalRoot\", \"removeModalRoot\", \"contentBefore\"]);\n  const parentMetadata = useContext(CollectionPreferencesMetadata);\n  const {\n    __internalRootRef\n  } = useBaseComponent('CollectionPreferences', {\n    props: {},\n    metadata: Object.assign(Object.assign({}, parentMetadata), {\n      hasStripedRowsPreference: !!stripedRowsPreference,\n      hasVisibleContentPreference: !!visibleContentPreference,\n      hasContentDisplayPreference: !!contentDisplayPreference,\n      hasContentDensityPreference: !!contentDensityPreference,\n      hasStickyColumnsPreference: !!stickyColumnsPreference,\n      hasContentDisplayColumnFiltering: !!(contentDisplayPreference === null || contentDisplayPreference === void 0 ? void 0 : contentDisplayPreference.enableColumnFiltering),\n      visibleContentOptionsCount: (_b = visibleContentPreference === null || visibleContentPreference === void 0 ? void 0 : visibleContentPreference.options) === null || _b === void 0 ? void 0 : _b.length\n    })\n  });\n  checkControlled('CollectionPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n  const i18n = useInternalI18n('collection-preferences');\n  const baseProps = getBaseProps(rest);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [temporaryPreferences, setTemporaryPreferences] = useState(copyPreferences(preferences || {}));\n  const triggerRef = useRef(null);\n  const dialogPreviouslyOpen = useRef(false);\n  useEffect(() => {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n  const onConfirmListener = () => {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n  const onCancelListener = () => {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n  const hasContentOnTheLeft = !!(pageSizePreference || wrapLinesPreference || stripedRowsPreference || contentDensityPreference || stickyColumnsPreference || customPreference);\n  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);\n  const onChange = changedPreferences => setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n  if (visibleContentPreference && contentDisplayPreference) {\n    warnOnce(componentName, 'You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.');\n  }\n  const referrerId = useUniqueId();\n  const tableComponentContext = useTableComponentsContext();\n  useEffect(() => {\n    var _a;\n    if ((_a = tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.preferencesRef) === null || _a === void 0 ? void 0 : _a.current) {\n      tableComponentContext.preferencesRef.current.pageSize = preferences === null || preferences === void 0 ? void 0 : preferences.pageSize;\n      // When both are used contentDisplayPreference takes preference and so we always prefer to use this as our visible columns if available\n      if (preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay) {\n        tableComponentContext.preferencesRef.current.visibleColumns = preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay.filter(column => column.visible).map(column => column.id);\n      } else if (preferences === null || preferences === void 0 ? void 0 : preferences.visibleContent) {\n        tableComponentContext.preferencesRef.current.visibleColumns = [...preferences.visibleContent];\n      }\n      return () => {\n        var _a, _b;\n        (_a = tableComponentContext.preferencesRef.current) === null || _a === void 0 ? true : delete _a.pageSize;\n        (_b = tableComponentContext.preferencesRef.current) === null || _b === void 0 ? true : delete _b.visibleColumns;\n      };\n    }\n  }, [tableComponentContext === null || tableComponentContext === void 0 ? void 0 : tableComponentContext.preferencesRef, preferences === null || preferences === void 0 ? void 0 : preferences.contentDisplay, preferences === null || preferences === void 0 ? void 0 : preferences.visibleContent, preferences === null || preferences === void 0 ? void 0 : preferences.pageSize]);\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: clsx(baseProps.className, styles.root),\n    ref: __internalRootRef\n  }), React.createElement(\"div\", Object.assign({\n    id: referrerId\n  }, getAnalyticsMetadataAttribute({\n    component: getComponentAnalyticsMetadata(disabled, preferences)\n  })), React.createElement(InternalButton, {\n    ref: triggerRef,\n    className: clsx(styles['trigger-button'], analyticsSelectors['trigger-button']),\n    disabled: disabled,\n    ariaLabel: i18n('title', title),\n    onClick: () => {\n      setTemporaryPreferences(copyPreferences(preferences || {}));\n      setModalVisible(true);\n    },\n    variant: \"icon\",\n    iconName: \"settings\",\n    formAction: \"none\",\n    analyticsAction: \"open\"\n  }), !disabled && modalVisible && React.createElement(InternalModal, {\n    className: styles['modal-root'],\n    visible: true,\n    getModalRoot: getModalRoot,\n    removeModalRoot: removeModalRoot,\n    header: i18n('title', title),\n    referrerId: referrerId,\n    footer: React.createElement(InternalBox, {\n      float: \"right\"\n    }, React.createElement(InternalSpaceBetween, {\n      direction: \"horizontal\",\n      size: \"xs\"\n    }, React.createElement(InternalButton, {\n      className: styles['cancel-button'],\n      variant: \"link\",\n      formAction: \"none\",\n      onClick: onCancelListener,\n      analyticsAction: \"cancel\"\n    }, i18n('cancelLabel', cancelLabel)), React.createElement(InternalButton, {\n      className: styles['confirm-button'],\n      variant: \"primary\",\n      formAction: \"none\",\n      onClick: onConfirmListener,\n      analyticsAction: \"confirm\"\n    }, i18n('confirmLabel', confirmLabel)))),\n    closeAriaLabel: closeAriaLabel || cancelLabel,\n    size: hasContentOnTheLeft && hasContentOnTheRight ? 'large' : 'medium',\n    onDismiss: onCancelListener\n  }, React.createElement(\"div\", {\n    className: styles['content-before']\n  }, contentBefore), React.createElement(ModalContentLayout, {\n    left: hasContentOnTheLeft && React.createElement(InternalSpaceBetween, {\n      size: \"l\"\n    }, pageSizePreference && React.createElement(PageSizePreference, Object.assign({\n      value: temporaryPreferences.pageSize\n    }, pageSizePreference, {\n      onChange: pageSize => onChange({\n        pageSize\n      })\n    })), wrapLinesPreference && React.createElement(WrapLinesPreference, Object.assign({\n      value: temporaryPreferences.wrapLines\n    }, wrapLinesPreference, {\n      onChange: wrapLines => onChange({\n        wrapLines\n      })\n    })), stripedRowsPreference && React.createElement(StripedRowsPreference, Object.assign({\n      value: temporaryPreferences.stripedRows\n    }, stripedRowsPreference, {\n      onChange: stripedRows => onChange({\n        stripedRows\n      })\n    })), contentDensityPreference && React.createElement(ContentDensityPreference, Object.assign({\n      value: temporaryPreferences.contentDensity\n    }, contentDensityPreference, {\n      onChange: contentDensity => onChange({\n        contentDensity\n      })\n    })), stickyColumnsPreference && React.createElement(StickyColumnsPreference, Object.assign({\n      value: temporaryPreferences.stickyColumns\n    }, stickyColumnsPreference, {\n      onChange: stickyColumns => onChange({\n        stickyColumns\n      })\n    })), customPreference && React.createElement(CustomPreference, {\n      value: temporaryPreferences.custom,\n      customPreference: customPreference,\n      onChange: custom => onChange({\n        custom\n      })\n    })),\n    right: contentDisplayPreference ? React.createElement(ContentDisplayPreference, Object.assign({}, contentDisplayPreference, {\n      value: temporaryPreferences.contentDisplay,\n      onChange: contentDisplay => onChange({\n        contentDisplay\n      })\n    })) : visibleContentPreference && React.createElement(VisibleContentPreference, Object.assign({\n      value: temporaryPreferences.visibleContent\n    }, visibleContentPreference, {\n      onChange: visibleItems => onChange({\n        visibleContent: visibleItems\n      })\n    }))\n  }))));\n}\napplyDisplayName(CollectionPreferences, componentName);","map":{"version":3,"names":["React","useContext","useEffect","useRef","useState","clsx","warnOnce","getAnalyticsMetadataAttribute","InternalBox","InternalButton","useInternalI18n","getBaseProps","CollectionPreferencesMetadata","useTableComponentsContext","fireNonCancelableEvent","checkControlled","useBaseComponent","useUniqueId","applyDisplayName","InternalModal","InternalSpaceBetween","getComponentAnalyticsMetadata","ContentDisplayPreference","ContentDensityPreference","copyPreferences","CustomPreference","mergePreferences","ModalContentLayout","PageSizePreference","StickyColumnsPreference","StripedRowsPreference","WrapLinesPreference","VisibleContentPreference","analyticsSelectors","styles","componentName","CollectionPreferences","_a","title","confirmLabel","cancelLabel","closeAriaLabel","disabled","onConfirm","onCancel","visibleContentPreference","contentDisplayPreference","pageSizePreference","wrapLinesPreference","stripedRowsPreference","contentDensityPreference","stickyColumnsPreference","preferences","customPreference","getModalRoot","removeModalRoot","contentBefore","rest","__rest","parentMetadata","__internalRootRef","props","metadata","Object","assign","hasStripedRowsPreference","hasVisibleContentPreference","hasContentDisplayPreference","hasContentDensityPreference","hasStickyColumnsPreference","hasContentDisplayColumnFiltering","enableColumnFiltering","visibleContentOptionsCount","_b","options","length","i18n","baseProps","modalVisible","setModalVisible","temporaryPreferences","setTemporaryPreferences","triggerRef","dialogPreviouslyOpen","current","focus","onConfirmListener","onCancelListener","hasContentOnTheLeft","hasContentOnTheRight","onChange","changedPreferences","referrerId","tableComponentContext","preferencesRef","pageSize","contentDisplay","visibleColumns","filter","column","visible","map","id","visibleContent","createElement","className","root","ref","component","ariaLabel","onClick","variant","iconName","formAction","analyticsAction","header","footer","float","direction","size","onDismiss","left","value","wrapLines","stripedRows","contentDensity","stickyColumns","custom","right","visibleItems"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/collection-preferences/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport InternalBox from '../box/internal';\nimport { ButtonProps } from '../button/interfaces';\nimport { InternalButton } from '../button/internal';\nimport { useInternalI18n } from '../i18n/context';\nimport { getBaseProps } from '../internal/base-component';\nimport { CollectionPreferencesMetadata } from '../internal/context/collection-preferences-metadata-context';\nimport { useTableComponentsContext } from '../internal/context/table-component-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { useUniqueId } from '../internal/hooks/use-unique-id';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalModal from '../modal/internal';\nimport InternalSpaceBetween from '../space-between/internal';\nimport { getComponentAnalyticsMetadata } from './analytics-metadata/utils';\nimport ContentDisplayPreference from './content-display';\nimport { CollectionPreferencesProps } from './interfaces';\nimport {\n  ContentDensityPreference,\n  copyPreferences,\n  CustomPreference,\n  mergePreferences,\n  ModalContentLayout,\n  PageSizePreference,\n  StickyColumnsPreference,\n  StripedRowsPreference,\n  WrapLinesPreference,\n} from './utils';\nimport VisibleContentPreference from './visible-content';\n\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\n\nexport { CollectionPreferencesProps };\n\nconst componentName = 'CollectionPreferences';\n\nexport default function CollectionPreferences({\n  title,\n  confirmLabel,\n  cancelLabel,\n  closeAriaLabel,\n  disabled = false,\n  onConfirm,\n  onCancel,\n  visibleContentPreference,\n  contentDisplayPreference,\n  pageSizePreference,\n  wrapLinesPreference,\n  stripedRowsPreference,\n  contentDensityPreference,\n  stickyColumnsPreference,\n  preferences,\n  customPreference,\n  getModalRoot,\n  removeModalRoot,\n  contentBefore,\n  ...rest\n}: CollectionPreferencesProps) {\n  const parentMetadata = useContext(CollectionPreferencesMetadata);\n  const { __internalRootRef } = useBaseComponent('CollectionPreferences', {\n    props: {},\n    metadata: {\n      ...parentMetadata,\n      hasStripedRowsPreference: !!stripedRowsPreference,\n      hasVisibleContentPreference: !!visibleContentPreference,\n      hasContentDisplayPreference: !!contentDisplayPreference,\n      hasContentDensityPreference: !!contentDensityPreference,\n      hasStickyColumnsPreference: !!stickyColumnsPreference,\n      hasContentDisplayColumnFiltering: !!contentDisplayPreference?.enableColumnFiltering,\n      visibleContentOptionsCount: visibleContentPreference?.options?.length,\n    },\n  });\n  checkControlled('CollectionPreferences', 'preferences', preferences, 'onConfirm', onConfirm);\n\n  const i18n = useInternalI18n('collection-preferences');\n  const baseProps = getBaseProps(rest);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [temporaryPreferences, setTemporaryPreferences] = useState(copyPreferences(preferences || {}));\n  const triggerRef = useRef<ButtonProps.Ref>(null);\n  const dialogPreviouslyOpen = useRef(false);\n\n  useEffect(() => {\n    if (!modalVisible) {\n      dialogPreviouslyOpen.current && triggerRef.current && triggerRef.current.focus();\n    } else {\n      dialogPreviouslyOpen.current = true;\n    }\n  }, [modalVisible]);\n\n  const onConfirmListener = () => {\n    setModalVisible(false);\n    fireNonCancelableEvent(onConfirm, temporaryPreferences);\n  };\n\n  const onCancelListener = () => {\n    fireNonCancelableEvent(onCancel, {});\n    setModalVisible(false);\n    setTemporaryPreferences(copyPreferences(preferences || {}));\n  };\n\n  const hasContentOnTheLeft = !!(\n    pageSizePreference ||\n    wrapLinesPreference ||\n    stripedRowsPreference ||\n    contentDensityPreference ||\n    stickyColumnsPreference ||\n    customPreference\n  );\n  const hasContentOnTheRight = !!(visibleContentPreference || contentDisplayPreference);\n\n  const onChange = (changedPreferences: CollectionPreferencesProps.Preferences) =>\n    setTemporaryPreferences(mergePreferences(changedPreferences, temporaryPreferences));\n\n  if (visibleContentPreference && contentDisplayPreference) {\n    warnOnce(\n      componentName,\n      'You provided both `visibleContentPreference` and `contentDisplayPreference` props. `visibleContentPreference` will be ignored and only `contentDisplayPreference` will be rendered.'\n    );\n  }\n\n  const referrerId = useUniqueId();\n  const tableComponentContext = useTableComponentsContext();\n\n  useEffect(() => {\n    if (tableComponentContext?.preferencesRef?.current) {\n      tableComponentContext.preferencesRef.current.pageSize = preferences?.pageSize;\n\n      // When both are used contentDisplayPreference takes preference and so we always prefer to use this as our visible columns if available\n      if (preferences?.contentDisplay) {\n        tableComponentContext.preferencesRef.current.visibleColumns = preferences?.contentDisplay\n          .filter(column => column.visible)\n          .map(column => column.id);\n      } else if (preferences?.visibleContent) {\n        tableComponentContext.preferencesRef.current.visibleColumns = [...preferences.visibleContent];\n      }\n\n      return () => {\n        delete tableComponentContext.preferencesRef.current?.pageSize;\n        delete tableComponentContext.preferencesRef.current?.visibleColumns;\n      };\n    }\n  }, [\n    tableComponentContext?.preferencesRef,\n    preferences?.contentDisplay,\n    preferences?.visibleContent,\n    preferences?.pageSize,\n  ]);\n\n  return (\n    <div {...baseProps} className={clsx(baseProps.className, styles.root)} ref={__internalRootRef}>\n      <div\n        id={referrerId}\n        {...getAnalyticsMetadataAttribute({ component: getComponentAnalyticsMetadata(disabled, preferences) })}\n      >\n        <InternalButton\n          ref={triggerRef}\n          className={clsx(styles['trigger-button'], analyticsSelectors['trigger-button'])}\n          disabled={disabled}\n          ariaLabel={i18n('title', title)}\n          onClick={() => {\n            setTemporaryPreferences(copyPreferences(preferences || {}));\n            setModalVisible(true);\n          }}\n          variant=\"icon\"\n          iconName=\"settings\"\n          formAction=\"none\"\n          analyticsAction=\"open\"\n        />\n        {!disabled && modalVisible && (\n          <InternalModal\n            className={styles['modal-root']}\n            visible={true}\n            getModalRoot={getModalRoot}\n            removeModalRoot={removeModalRoot}\n            header={i18n('title', title)}\n            referrerId={referrerId}\n            footer={\n              <InternalBox float=\"right\">\n                <InternalSpaceBetween direction=\"horizontal\" size=\"xs\">\n                  <InternalButton\n                    className={styles['cancel-button']}\n                    variant=\"link\"\n                    formAction=\"none\"\n                    onClick={onCancelListener}\n                    analyticsAction=\"cancel\"\n                  >\n                    {i18n('cancelLabel', cancelLabel)}\n                  </InternalButton>\n                  <InternalButton\n                    className={styles['confirm-button']}\n                    variant=\"primary\"\n                    formAction=\"none\"\n                    onClick={onConfirmListener}\n                    analyticsAction=\"confirm\"\n                  >\n                    {i18n('confirmLabel', confirmLabel)}\n                  </InternalButton>\n                </InternalSpaceBetween>\n              </InternalBox>\n            }\n            closeAriaLabel={closeAriaLabel || cancelLabel}\n            size={hasContentOnTheLeft && hasContentOnTheRight ? 'large' : 'medium'}\n            onDismiss={onCancelListener}\n          >\n            {/* Content before */}\n            <div className={styles['content-before']}>{contentBefore}</div>\n\n            {/* Preferences content */}\n            <ModalContentLayout\n              left={\n                hasContentOnTheLeft && (\n                  <InternalSpaceBetween size=\"l\">\n                    {pageSizePreference && (\n                      <PageSizePreference\n                        value={temporaryPreferences.pageSize}\n                        {...pageSizePreference}\n                        onChange={pageSize => onChange({ pageSize })}\n                      />\n                    )}\n                    {wrapLinesPreference && (\n                      <WrapLinesPreference\n                        value={temporaryPreferences.wrapLines}\n                        {...wrapLinesPreference}\n                        onChange={wrapLines => onChange({ wrapLines })}\n                      />\n                    )}\n                    {stripedRowsPreference && (\n                      <StripedRowsPreference\n                        value={temporaryPreferences.stripedRows}\n                        {...stripedRowsPreference}\n                        onChange={stripedRows => onChange({ stripedRows })}\n                      />\n                    )}\n                    {contentDensityPreference && (\n                      <ContentDensityPreference\n                        value={temporaryPreferences.contentDensity}\n                        {...contentDensityPreference}\n                        onChange={contentDensity => onChange({ contentDensity })}\n                      />\n                    )}\n                    {stickyColumnsPreference && (\n                      <StickyColumnsPreference\n                        value={temporaryPreferences.stickyColumns}\n                        {...stickyColumnsPreference}\n                        onChange={stickyColumns => onChange({ stickyColumns })}\n                      />\n                    )}\n                    {customPreference && (\n                      <CustomPreference\n                        value={temporaryPreferences.custom}\n                        customPreference={customPreference}\n                        onChange={custom => onChange({ custom })}\n                      />\n                    )}\n                  </InternalSpaceBetween>\n                )\n              }\n              right={\n                contentDisplayPreference ? (\n                  <ContentDisplayPreference\n                    {...contentDisplayPreference}\n                    value={temporaryPreferences.contentDisplay}\n                    onChange={contentDisplay => onChange({ contentDisplay })}\n                  />\n                ) : (\n                  visibleContentPreference && (\n                    <VisibleContentPreference\n                      value={temporaryPreferences.visibleContent}\n                      {...visibleContentPreference}\n                      onChange={visibleItems => onChange({ visibleContent: visibleItems })}\n                    />\n                  )\n                )\n              }\n            />\n          </InternalModal>\n        )}\n      </div>\n    </div>\n  );\n}\n\napplyDisplayName(CollectionPreferences, componentName);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}