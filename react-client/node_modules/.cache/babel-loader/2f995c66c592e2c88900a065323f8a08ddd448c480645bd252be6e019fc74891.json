{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createSingletonState } from '@cloudscape-design/component-toolkit/internal';\nimport { getMatchingBreakpoint, mobileBreakpoint } from '../../breakpoints';\nexport const forceMobileModeSymbol = Symbol.for('awsui-force-mobile-mode');\nfunction getIsMobile() {\n  // allow overriding the mobile mode in tests\n  // any is needed because of this https://github.com/microsoft/TypeScript/issues/36813\n  const forceMobileMode = globalThis[forceMobileModeSymbol];\n  if (typeof forceMobileMode !== 'undefined') {\n    return forceMobileMode;\n  }\n  if (typeof window === 'undefined') {\n    // assume desktop in server-rendering\n    return false;\n  }\n  if (window.matchMedia) {\n    /**\n     * Some browsers include the scrollbar width in their media query calculations, but\n     * some browsers don't. Thus we can't use `window.innerWidth` or\n     * `document.documentElement.clientWidth` to get a very accurate result (since we\n     * wouldn't know which one of them to use).\n     * Instead, we use the media query here in JS too.\n     */\n    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;\n  }\n  return getMatchingBreakpoint(window.innerWidth, ['xs']) !== 'xs';\n}\nexport const useMobile = createSingletonState({\n  initialState: () => getIsMobile(),\n  factory: handler => {\n    const listener = () => handler(getIsMobile());\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  }\n});","map":{"version":3,"names":["createSingletonState","getMatchingBreakpoint","mobileBreakpoint","forceMobileModeSymbol","Symbol","for","getIsMobile","forceMobileMode","globalThis","window","matchMedia","matches","innerWidth","useMobile","initialState","factory","handler","listener","addEventListener","removeEventListener"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/internal/hooks/use-mobile/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createSingletonState } from '@cloudscape-design/component-toolkit/internal';\n\nimport { getMatchingBreakpoint, mobileBreakpoint } from '../../breakpoints';\n\nexport const forceMobileModeSymbol = Symbol.for('awsui-force-mobile-mode');\n\nfunction getIsMobile() {\n  // allow overriding the mobile mode in tests\n  // any is needed because of this https://github.com/microsoft/TypeScript/issues/36813\n  const forceMobileMode = (globalThis as any)[forceMobileModeSymbol];\n  if (typeof forceMobileMode !== 'undefined') {\n    return forceMobileMode;\n  }\n  if (typeof window === 'undefined') {\n    // assume desktop in server-rendering\n    return false;\n  }\n\n  if (window.matchMedia) {\n    /**\n     * Some browsers include the scrollbar width in their media query calculations, but\n     * some browsers don't. Thus we can't use `window.innerWidth` or\n     * `document.documentElement.clientWidth` to get a very accurate result (since we\n     * wouldn't know which one of them to use).\n     * Instead, we use the media query here in JS too.\n     */\n    return window.matchMedia(`(max-width: ${mobileBreakpoint}px)`).matches;\n  }\n\n  return getMatchingBreakpoint(window.innerWidth, ['xs']) !== 'xs';\n}\n\nexport const useMobile = createSingletonState<boolean>({\n  initialState: () => getIsMobile(),\n  factory: handler => {\n    const listener = () => handler(getIsMobile());\n    window.addEventListener('resize', listener);\n    return () => {\n      window.removeEventListener('resize', listener);\n    };\n  },\n});\n"],"mappings":"AAAA;AACA;AACA,SAASA,oBAAoB,QAAQ,+CAA+C;AAEpF,SAASC,qBAAqB,EAAEC,gBAAgB,QAAQ,mBAAmB;AAE3E,OAAO,MAAMC,qBAAqB,GAAGC,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC;AAE1E,SAASC,WAAWA,CAAA;EAClB;EACA;EACA,MAAMC,eAAe,GAAIC,UAAkB,CAACL,qBAAqB,CAAC;EAClE,IAAI,OAAOI,eAAe,KAAK,WAAW,EAAE;IAC1C,OAAOA,eAAe;;EAExB,IAAI,OAAOE,MAAM,KAAK,WAAW,EAAE;IACjC;IACA,OAAO,KAAK;;EAGd,IAAIA,MAAM,CAACC,UAAU,EAAE;IACrB;;;;;;;IAOA,OAAOD,MAAM,CAACC,UAAU,CAAC,eAAeR,gBAAgB,KAAK,CAAC,CAACS,OAAO;;EAGxE,OAAOV,qBAAqB,CAACQ,MAAM,CAACG,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI;AAClE;AAEA,OAAO,MAAMC,SAAS,GAAGb,oBAAoB,CAAU;EACrDc,YAAY,EAAEA,CAAA,KAAMR,WAAW,EAAE;EACjCS,OAAO,EAAEC,OAAO,IAAG;IACjB,MAAMC,QAAQ,GAAGA,CAAA,KAAMD,OAAO,CAACV,WAAW,EAAE,CAAC;IAC7CG,MAAM,CAACS,gBAAgB,CAAC,QAAQ,EAAED,QAAQ,CAAC;IAC3C,OAAO,MAAK;MACVR,MAAM,CAACU,mBAAmB,CAAC,QAAQ,EAAEF,QAAQ,CAAC;IAChD,CAAC;EACH;CACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}