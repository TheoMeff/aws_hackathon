{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useState } from 'react';\n/**\n * A utility to determine whether or not a file is being currently dragged into the window.\n *\n * @returns An object with the following arguments:\n * `areFilesDragging`: True if a file is being dragged over the current window, false otherwise.\n */\nexport function useFilesDragging() {\n  const [areFilesDragging, setFilesDragging] = useState(false);\n  // Registering global drag events listeners.\n  useEffect(() => {\n    // The timer helps avoiding dropzone blinking.\n    let dragTimer = null;\n    // The file-upload dropzone is shown when the user drags files over to the browser.\n    const onDocumentDragOver = event => {\n      var _a, _b;\n      event.preventDefault();\n      let files = 0;\n      for (let item = 0; item < (((_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.types.length) || 0); item++) {\n        if (((_b = event.dataTransfer) === null || _b === void 0 ? void 0 : _b.types[item]) === 'Files') {\n          files++;\n        }\n      }\n      if (files > 0) {\n        setFilesDragging(true);\n        dragTimer && clearTimeout(dragTimer);\n      }\n    };\n    // When the files are no longer dragged over the browser the state must be reset.\n    const onDocumentDragLeave = event => {\n      event.preventDefault();\n      dragTimer = setTimeout(() => setFilesDragging(false), 25);\n    };\n    // If the files were dropped the state must be reset.\n    const onDocumentDrop = event => {\n      event.preventDefault();\n      dragTimer = setTimeout(() => setFilesDragging(false), 25);\n    };\n    const controller = new AbortController();\n    document.addEventListener('dragover', onDocumentDragOver, {\n      signal: controller.signal\n    });\n    document.addEventListener('dragleave', onDocumentDragLeave, {\n      signal: controller.signal\n    });\n    document.addEventListener('drop', onDocumentDrop, {\n      signal: controller.signal\n    });\n    return () => {\n      dragTimer && clearTimeout(dragTimer);\n      controller.abort();\n    };\n  }, []);\n  return {\n    areFilesDragging\n  };\n}","map":{"version":3,"names":["useEffect","useState","useFilesDragging","areFilesDragging","setFilesDragging","dragTimer","onDocumentDragOver","event","preventDefault","files","item","_a","dataTransfer","types","length","_b","clearTimeout","onDocumentDragLeave","setTimeout","onDocumentDrop","controller","AbortController","document","addEventListener","signal","abort"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/file-dropzone/use-files-dragging.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useState } from 'react';\n\n/**\n * A utility to determine whether or not a file is being currently dragged into the window.\n *\n * @returns An object with the following arguments:\n * `areFilesDragging`: True if a file is being dragged over the current window, false otherwise.\n */\nexport function useFilesDragging() {\n  const [areFilesDragging, setFilesDragging] = useState(false);\n\n  // Registering global drag events listeners.\n  useEffect(() => {\n    // The timer helps avoiding dropzone blinking.\n    let dragTimer: null | ReturnType<typeof setTimeout> = null;\n\n    // The file-upload dropzone is shown when the user drags files over to the browser.\n    const onDocumentDragOver = (event: DragEvent) => {\n      event.preventDefault();\n\n      let files = 0;\n      for (let item = 0; item < (event.dataTransfer?.types.length || 0); item++) {\n        if (event.dataTransfer?.types[item] === 'Files') {\n          files++;\n        }\n      }\n\n      if (files > 0) {\n        setFilesDragging(true);\n        dragTimer && clearTimeout(dragTimer);\n      }\n    };\n\n    // When the files are no longer dragged over the browser the state must be reset.\n    const onDocumentDragLeave = (event: DragEvent) => {\n      event.preventDefault();\n\n      dragTimer = setTimeout(() => setFilesDragging(false), 25);\n    };\n\n    // If the files were dropped the state must be reset.\n    const onDocumentDrop = (event: DragEvent) => {\n      event.preventDefault();\n\n      dragTimer = setTimeout(() => setFilesDragging(false), 25);\n    };\n\n    const controller = new AbortController();\n    document.addEventListener('dragover', onDocumentDragOver, { signal: controller.signal });\n    document.addEventListener('dragleave', onDocumentDragLeave, { signal: controller.signal });\n    document.addEventListener('drop', onDocumentDrop, { signal: controller.signal });\n\n    return () => {\n      dragTimer && clearTimeout(dragTimer);\n      controller.abort();\n    };\n  }, []);\n\n  return { areFilesDragging };\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C;;;;;;AAMA,OAAM,SAAUC,gBAAgBA,CAAA;EAC9B,MAAM,CAACC,gBAAgB,EAAEC,gBAAgB,CAAC,GAAGH,QAAQ,CAAC,KAAK,CAAC;EAE5D;EACAD,SAAS,CAAC,MAAK;IACb;IACA,IAAIK,SAAS,GAAyC,IAAI;IAE1D;IACA,MAAMC,kBAAkB,GAAIC,KAAgB,IAAI;;MAC9CA,KAAK,CAACC,cAAc,EAAE;MAEtB,IAAIC,KAAK,GAAG,CAAC;MACb,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAI,EAAAC,EAAA,GAAAJ,KAAK,CAACK,YAAY,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,KAAK,CAACC,MAAM,KAAI,CAAC,CAAC,EAAEJ,IAAI,EAAE,EAAE;QACzE,IAAI,EAAAK,EAAA,GAAAR,KAAK,CAACK,YAAY,cAAAG,EAAA,uBAAAA,EAAA,CAAEF,KAAK,CAACH,IAAI,CAAC,MAAK,OAAO,EAAE;UAC/CD,KAAK,EAAE;;;MAIX,IAAIA,KAAK,GAAG,CAAC,EAAE;QACbL,gBAAgB,CAAC,IAAI,CAAC;QACtBC,SAAS,IAAIW,YAAY,CAACX,SAAS,CAAC;;IAExC,CAAC;IAED;IACA,MAAMY,mBAAmB,GAAIV,KAAgB,IAAI;MAC/CA,KAAK,CAACC,cAAc,EAAE;MAEtBH,SAAS,GAAGa,UAAU,CAAC,MAAMd,gBAAgB,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;IAC3D,CAAC;IAED;IACA,MAAMe,cAAc,GAAIZ,KAAgB,IAAI;MAC1CA,KAAK,CAACC,cAAc,EAAE;MAEtBH,SAAS,GAAGa,UAAU,CAAC,MAAMd,gBAAgB,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC;IAC3D,CAAC;IAED,MAAMgB,UAAU,GAAG,IAAIC,eAAe,EAAE;IACxCC,QAAQ,CAACC,gBAAgB,CAAC,UAAU,EAAEjB,kBAAkB,EAAE;MAAEkB,MAAM,EAAEJ,UAAU,CAACI;IAAM,CAAE,CAAC;IACxFF,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,mBAAmB,EAAE;MAAEO,MAAM,EAAEJ,UAAU,CAACI;IAAM,CAAE,CAAC;IAC1FF,QAAQ,CAACC,gBAAgB,CAAC,MAAM,EAAEJ,cAAc,EAAE;MAAEK,MAAM,EAAEJ,UAAU,CAACI;IAAM,CAAE,CAAC;IAEhF,OAAO,MAAK;MACVnB,SAAS,IAAIW,YAAY,CAACX,SAAS,CAAC;MACpCe,UAAU,CAACK,KAAK,EAAE;IACpB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEtB;EAAgB,CAAE;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}