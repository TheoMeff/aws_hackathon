{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Applies its position to the dropdown element when expandToViewport is set to true.\nexport function applyDropdownPositionRelativeToViewport({\n  position,\n  dropdownElement,\n  triggerRect,\n  isMobile\n}) {\n  // Fixed positions are not respected in iOS when the virtual keyboard is being displayed.\n  // For this reason we use absolute positioning in mobile.\n  const useAbsolutePositioning = isMobile;\n  // Since when using expandToViewport=true the dropdown is attached to the root of the body,\n  // the same coordinates can be used for fixed or absolute position,\n  // except when using absolute position we need to take into account the scroll position of the body itself.\n  const verticalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollTop : 0;\n  const horizontalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollLeft : 0;\n  dropdownElement.style.position = useAbsolutePositioning ? 'absolute' : 'fixed';\n  if (position.dropBlockStart) {\n    dropdownElement.style.insetBlockEnd = `calc(100% - ${verticalScrollOffset + triggerRect.insetBlockStart}px)`;\n  } else {\n    dropdownElement.style.insetBlockStart = `${verticalScrollOffset + triggerRect.insetBlockEnd}px`;\n  }\n  if (position.dropInlineStart) {\n    dropdownElement.style.insetInlineStart = `calc(${horizontalScrollOffset + triggerRect.insetInlineEnd}px - ${position.inlineSize})`;\n  } else {\n    dropdownElement.style.insetInlineStart = `${horizontalScrollOffset + triggerRect.insetInlineStart}px`;\n  }\n}","map":{"version":3,"names":["applyDropdownPositionRelativeToViewport","position","dropdownElement","triggerRect","isMobile","useAbsolutePositioning","verticalScrollOffset","document","documentElement","scrollTop","horizontalScrollOffset","scrollLeft","style","dropBlockStart","insetBlockEnd","insetBlockStart","dropInlineStart","insetInlineStart","insetInlineEnd","inlineSize"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/internal/components/dropdown/dropdown-position.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { DropdownPosition } from './dropdown-fit-handler';\n\nexport interface LogicalDOMRect {\n  blockSize: number;\n  inlineSize: number;\n  insetBlockStart: number;\n  insetBlockEnd: number;\n  insetInlineStart: number;\n  insetInlineEnd: number;\n}\n\n// Applies its position to the dropdown element when expandToViewport is set to true.\nexport function applyDropdownPositionRelativeToViewport({\n  position,\n  dropdownElement,\n  triggerRect,\n  isMobile,\n}: {\n  position: DropdownPosition;\n  dropdownElement: HTMLElement;\n  triggerRect: LogicalDOMRect;\n  isMobile: boolean;\n}) {\n  // Fixed positions are not respected in iOS when the virtual keyboard is being displayed.\n  // For this reason we use absolute positioning in mobile.\n  const useAbsolutePositioning = isMobile;\n\n  // Since when using expandToViewport=true the dropdown is attached to the root of the body,\n  // the same coordinates can be used for fixed or absolute position,\n  // except when using absolute position we need to take into account the scroll position of the body itself.\n  const verticalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollTop : 0;\n  const horizontalScrollOffset = useAbsolutePositioning ? document.documentElement.scrollLeft : 0;\n\n  dropdownElement.style.position = useAbsolutePositioning ? 'absolute' : 'fixed';\n\n  if (position.dropBlockStart) {\n    dropdownElement.style.insetBlockEnd = `calc(100% - ${verticalScrollOffset + triggerRect.insetBlockStart}px)`;\n  } else {\n    dropdownElement.style.insetBlockStart = `${verticalScrollOffset + triggerRect.insetBlockEnd}px`;\n  }\n  if (position.dropInlineStart) {\n    dropdownElement.style.insetInlineStart = `calc(${horizontalScrollOffset + triggerRect.insetInlineEnd}px - ${position.inlineSize})`;\n  } else {\n    dropdownElement.style.insetInlineStart = `${horizontalScrollOffset + triggerRect.insetInlineStart}px`;\n  }\n}\n"],"mappings":"AAAA;AACA;AAaA;AACA,OAAM,SAAUA,uCAAuCA,CAAC;EACtDC,QAAQ;EACRC,eAAe;EACfC,WAAW;EACXC;AAAQ,CAMT;EACC;EACA;EACA,MAAMC,sBAAsB,GAAGD,QAAQ;EAEvC;EACA;EACA;EACA,MAAME,oBAAoB,GAAGD,sBAAsB,GAAGE,QAAQ,CAACC,eAAe,CAACC,SAAS,GAAG,CAAC;EAC5F,MAAMC,sBAAsB,GAAGL,sBAAsB,GAAGE,QAAQ,CAACC,eAAe,CAACG,UAAU,GAAG,CAAC;EAE/FT,eAAe,CAACU,KAAK,CAACX,QAAQ,GAAGI,sBAAsB,GAAG,UAAU,GAAG,OAAO;EAE9E,IAAIJ,QAAQ,CAACY,cAAc,EAAE;IAC3BX,eAAe,CAACU,KAAK,CAACE,aAAa,GAAG,eAAeR,oBAAoB,GAAGH,WAAW,CAACY,eAAe,KAAK;GAC7G,MAAM;IACLb,eAAe,CAACU,KAAK,CAACG,eAAe,GAAG,GAAGT,oBAAoB,GAAGH,WAAW,CAACW,aAAa,IAAI;;EAEjG,IAAIb,QAAQ,CAACe,eAAe,EAAE;IAC5Bd,eAAe,CAACU,KAAK,CAACK,gBAAgB,GAAG,QAAQP,sBAAsB,GAAGP,WAAW,CAACe,cAAc,QAAQjB,QAAQ,CAACkB,UAAU,GAAG;GACnI,MAAM;IACLjB,eAAe,CAACU,KAAK,CAACK,gBAAgB,GAAG,GAAGP,sBAAsB,GAAGP,WAAW,CAACc,gBAAgB,IAAI;;AAEzG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}