{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport { useVisualRefresh } from '../../../internal/hooks/use-visual-mode';\nimport { getBaseProps } from '../../base-component';\nimport { getAnalyticsSelectActionMetadata } from './analytics-metadata/utils';\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\nconst SelectableItem = (_a, ref) => {\n  var {\n      children: content,\n      ariaSelected,\n      ariaChecked,\n      selected,\n      highlighted,\n      disabled,\n      hasBackground,\n      isParent,\n      isChild,\n      isSelectAll,\n      virtualPosition,\n      padBottom,\n      isNextSelected,\n      useInteractiveGroups,\n      screenReaderContent,\n      ariaPosinset,\n      ariaSetsize,\n      highlightType,\n      value,\n      sticky,\n      afterHeader,\n      withScrollbar\n    } = _a,\n    restProps = __rest(_a, [\"children\", \"ariaSelected\", \"ariaChecked\", \"selected\", \"highlighted\", \"disabled\", \"hasBackground\", \"isParent\", \"isChild\", \"isSelectAll\", \"virtualPosition\", \"padBottom\", \"isNextSelected\", \"useInteractiveGroups\", \"screenReaderContent\", \"ariaPosinset\", \"ariaSetsize\", \"highlightType\", \"value\", \"sticky\", \"afterHeader\", \"withScrollbar\"]);\n  const isVisualRefresh = useVisualRefresh();\n  const _b = getBaseProps(restProps),\n    {\n      className\n    } = _b,\n    rest = __rest(_b, [\"className\"]);\n  const classNames = clsx(className, styles['selectable-item'], {\n    [styles.selected]: selected,\n    [styles.highlighted]: highlighted,\n    [styles['has-background']]: hasBackground,\n    [styles.parent]: isParent,\n    [analyticsSelectors.parent]: isParent,\n    [styles.child]: isChild,\n    [styles['select-all']]: isSelectAll,\n    [styles['is-keyboard']]: highlightType === 'keyboard',\n    [styles.disabled]: disabled,\n    [styles.virtual]: virtualPosition !== undefined && !sticky,\n    [styles['pad-bottom']]: padBottom,\n    [styles['next-item-selected']]: isNextSelected,\n    [styles.interactiveGroups]: useInteractiveGroups,\n    [styles.sticky]: sticky,\n    [styles['after-header']]: !!afterHeader,\n    [styles['with-scrollbar']]: withScrollbar,\n    [styles['visual-refresh']]: isVisualRefresh\n  });\n  const contentRef = useRef(null);\n  const screenReaderContentRef = useRef(null);\n  useLayoutEffect(() => {\n    // the state of aria-hidden and announcement is not set back because NVDA+Firefox would announce\n    // the item which lost highlight\n    // set aria-hidden true when there is announcement content, so that screen reader still announce\n    // meaningful content when navigate with screen reader cursor\n    // imperatively update to avoid announcement made multiple times when content updates\n    if (highlighted && screenReaderContent) {\n      if (contentRef.current) {\n        contentRef.current.setAttribute('aria-hidden', 'true');\n      }\n      if (screenReaderContentRef.current) {\n        screenReaderContentRef.current.textContent = screenReaderContent;\n      }\n    }\n  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);\n  const style = virtualPosition !== undefined ? {\n    transform: `translateY(${virtualPosition}px)`\n  } : undefined;\n  const a11yProperties = {\n    'aria-disabled': disabled\n  };\n  if (isParent && !useInteractiveGroups) {\n    a11yProperties['aria-hidden'] = true;\n  }\n  if (ariaSelected !== undefined) {\n    a11yProperties['aria-selected'] = ariaSelected;\n  }\n  // Safari+VO needs aria-checked for multi-selection. Otherwise it only announces selected option even though another option is highlighted.\n  if (ariaChecked !== undefined) {\n    a11yProperties['aria-checked'] = ariaChecked;\n  }\n  if (ariaPosinset && ariaSetsize) {\n    a11yProperties['aria-posinset'] = ariaPosinset;\n    a11yProperties['aria-setsize'] = ariaSetsize;\n  }\n  if (restProps.ariaDescribedby) {\n    a11yProperties['aria-describedby'] = restProps.ariaDescribedby;\n  }\n  return React.createElement(\"li\", Object.assign({\n    role: \"option\",\n    className: classNames,\n    style: style\n  }, a11yProperties, rest, isParent || disabled ? {} : getAnalyticsMetadataAttribute(getAnalyticsSelectActionMetadata(Object.assign({\n    isChild,\n    value\n  }, restProps)))), React.createElement(\"div\", {\n    className: clsx(styles['option-content'], analyticsSelectors['option-content']),\n    ref: contentRef\n  }, content), React.createElement(\"div\", {\n    className: styles['measure-strut'],\n    ref: ref\n  }), React.createElement(\"div\", {\n    className: styles['screenreader-content'],\n    ref: screenReaderContentRef\n  }));\n};\nexport default React.forwardRef(SelectableItem);","map":{"version":3,"names":["React","useLayoutEffect","useRef","clsx","getAnalyticsMetadataAttribute","useVisualRefresh","getBaseProps","getAnalyticsSelectActionMetadata","analyticsSelectors","styles","SelectableItem","_a","ref","children","content","ariaSelected","ariaChecked","selected","highlighted","disabled","hasBackground","isParent","isChild","isSelectAll","virtualPosition","padBottom","isNextSelected","useInteractiveGroups","screenReaderContent","ariaPosinset","ariaSetsize","highlightType","value","sticky","afterHeader","withScrollbar","restProps","__rest","isVisualRefresh","_b","className","rest","classNames","parent","child","virtual","undefined","interactiveGroups","contentRef","screenReaderContentRef","current","setAttribute","textContent","style","transform","a11yProperties","ariaDescribedby","createElement","Object","assign","role","forwardRef"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/internal/components/selectable-item/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useLayoutEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { useVisualRefresh } from '../../../internal/hooks/use-visual-mode';\nimport { getBaseProps } from '../../base-component';\nimport { getAnalyticsSelectActionMetadata } from './analytics-metadata/utils';\nimport { SelectableItemProps } from './interfaces';\n\nimport analyticsSelectors from './analytics-metadata/styles.css.js';\nimport styles from './styles.css.js';\n\nexport { SelectableItemProps };\n\nconst SelectableItem = (\n  {\n    children: content,\n    ariaSelected,\n    ariaChecked,\n    selected,\n    highlighted,\n    disabled,\n    hasBackground,\n    isParent,\n    isChild,\n    isSelectAll,\n    virtualPosition,\n    padBottom,\n    isNextSelected,\n    useInteractiveGroups,\n    screenReaderContent,\n    ariaPosinset,\n    ariaSetsize,\n    highlightType,\n    value,\n    sticky,\n    afterHeader,\n    withScrollbar,\n    ...restProps\n  }: SelectableItemProps,\n  ref: React.Ref<HTMLDivElement>\n) => {\n  const isVisualRefresh = useVisualRefresh();\n  const { className, ...rest } = getBaseProps(restProps);\n  const classNames = clsx(className, styles['selectable-item'], {\n    [styles.selected]: selected,\n    [styles.highlighted]: highlighted,\n    [styles['has-background']]: hasBackground,\n    [styles.parent]: isParent,\n    [analyticsSelectors.parent]: isParent,\n    [styles.child]: isChild,\n    [styles['select-all']]: isSelectAll,\n    [styles['is-keyboard']]: highlightType === 'keyboard',\n    [styles.disabled]: disabled,\n    [styles.virtual]: virtualPosition !== undefined && !sticky,\n    [styles['pad-bottom']]: padBottom,\n    [styles['next-item-selected']]: isNextSelected,\n    [styles.interactiveGroups]: useInteractiveGroups,\n    [styles.sticky]: sticky,\n    [styles['after-header']]: !!afterHeader,\n    [styles['with-scrollbar']]: withScrollbar,\n    [styles['visual-refresh']]: isVisualRefresh,\n  });\n\n  const contentRef = useRef<HTMLDivElement>(null);\n  const screenReaderContentRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    // the state of aria-hidden and announcement is not set back because NVDA+Firefox would announce\n    // the item which lost highlight\n    // set aria-hidden true when there is announcement content, so that screen reader still announce\n    // meaningful content when navigate with screen reader cursor\n    // imperatively update to avoid announcement made multiple times when content updates\n    if (highlighted && screenReaderContent) {\n      if (contentRef.current) {\n        contentRef.current.setAttribute('aria-hidden', 'true');\n      }\n      if (screenReaderContentRef.current) {\n        screenReaderContentRef.current.textContent = screenReaderContent;\n      }\n    }\n  }, [highlighted, screenReaderContent, contentRef, screenReaderContentRef]);\n\n  const style =\n    virtualPosition !== undefined\n      ? {\n          transform: `translateY(${virtualPosition}px)`,\n        }\n      : undefined;\n\n  const a11yProperties: Record<string, string | number | boolean | undefined> = {\n    'aria-disabled': disabled,\n  };\n\n  if (isParent && !useInteractiveGroups) {\n    a11yProperties['aria-hidden'] = true;\n  }\n\n  if (ariaSelected !== undefined) {\n    a11yProperties['aria-selected'] = ariaSelected;\n  }\n\n  // Safari+VO needs aria-checked for multi-selection. Otherwise it only announces selected option even though another option is highlighted.\n  if (ariaChecked !== undefined) {\n    a11yProperties['aria-checked'] = ariaChecked;\n  }\n\n  if (ariaPosinset && ariaSetsize) {\n    a11yProperties['aria-posinset'] = ariaPosinset;\n    a11yProperties['aria-setsize'] = ariaSetsize;\n  }\n\n  if (restProps.ariaDescribedby) {\n    a11yProperties['aria-describedby'] = restProps.ariaDescribedby;\n  }\n\n  return (\n    <li\n      role=\"option\"\n      className={classNames}\n      style={style}\n      {...a11yProperties}\n      {...rest}\n      {...(isParent || disabled\n        ? {}\n        : getAnalyticsMetadataAttribute(getAnalyticsSelectActionMetadata({ isChild, value, ...restProps })))}\n    >\n      <div className={clsx(styles['option-content'], analyticsSelectors['option-content'])} ref={contentRef}>\n        {content}\n      </div>\n      <div className={styles['measure-strut']} ref={ref} />\n      <div className={styles['screenreader-content']} ref={screenReaderContentRef}></div>\n    </li>\n  );\n};\n\nexport default React.forwardRef(SelectableItem);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}