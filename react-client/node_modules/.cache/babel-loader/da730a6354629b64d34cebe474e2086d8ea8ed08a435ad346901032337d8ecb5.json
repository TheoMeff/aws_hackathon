{"ast":null,"code":"import { useComponentMetadata, useComponentMetrics, useFocusVisible } from '@cloudscape-design/component-toolkit/internal';\nimport { PACKAGE_SOURCE, PACKAGE_VERSION, THEME } from '../../environment';\nimport { getVisualTheme } from '../../utils/get-visual-theme';\nimport { useVisualRefresh } from '../use-visual-mode';\n/**\n * This hook is used for components which are exported to customers. The returned __internalRootRef needs to be\n * attached to the (internal) component's root DOM node. The hook takes care of attaching the metadata to this\n * root DOM node and emits the telemetry for this component.\n */\nexport default function useBaseComponent(componentName, config, analyticsMetadata) {\n  const isVisualRefresh = useVisualRefresh();\n  const theme = getVisualTheme(THEME, isVisualRefresh);\n  useComponentMetrics(componentName, {\n    packageSource: PACKAGE_SOURCE,\n    packageVersion: PACKAGE_VERSION,\n    theme\n  }, config);\n  useFocusVisible();\n  const elementRef = useComponentMetadata(componentName, {\n    packageName: PACKAGE_SOURCE,\n    version: PACKAGE_VERSION,\n    theme\n  }, analyticsMetadata);\n  return {\n    __internalRootRef: elementRef\n  };\n}","map":{"version":3,"names":["useComponentMetadata","useComponentMetrics","useFocusVisible","PACKAGE_SOURCE","PACKAGE_VERSION","THEME","getVisualTheme","useVisualRefresh","useBaseComponent","componentName","config","analyticsMetadata","isVisualRefresh","theme","packageSource","packageVersion","elementRef","packageName","version","__internalRootRef"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/internal/hooks/use-base-component/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { MutableRefObject } from 'react';\n\nimport {\n  ComponentConfiguration,\n  useComponentMetadata,\n  useComponentMetrics,\n  useFocusVisible,\n} from '@cloudscape-design/component-toolkit/internal';\n\nimport { AnalyticsMetadata } from '../../analytics/interfaces';\nimport { PACKAGE_SOURCE, PACKAGE_VERSION, THEME } from '../../environment';\nimport { getVisualTheme } from '../../utils/get-visual-theme';\nimport { useVisualRefresh } from '../use-visual-mode';\n\nexport interface InternalBaseComponentProps<T = any> {\n  __internalRootRef?: MutableRefObject<T | null> | null;\n}\n\n/**\n * This hook is used for components which are exported to customers. The returned __internalRootRef needs to be\n * attached to the (internal) component's root DOM node. The hook takes care of attaching the metadata to this\n * root DOM node and emits the telemetry for this component.\n */\nexport default function useBaseComponent<T = any>(\n  componentName: string,\n  config?: ComponentConfiguration,\n  analyticsMetadata?: AnalyticsMetadata\n) {\n  const isVisualRefresh = useVisualRefresh();\n  const theme = getVisualTheme(THEME, isVisualRefresh);\n  useComponentMetrics(componentName, { packageSource: PACKAGE_SOURCE, packageVersion: PACKAGE_VERSION, theme }, config);\n  useFocusVisible();\n  const elementRef = useComponentMetadata<T>(\n    componentName,\n    { packageName: PACKAGE_SOURCE, version: PACKAGE_VERSION, theme },\n    analyticsMetadata as any\n  );\n  return { __internalRootRef: elementRef };\n}\n"],"mappings":"AAIA,SAEEA,oBAAoB,EACpBC,mBAAmB,EACnBC,eAAe,QACV,+CAA+C;AAGtD,SAASC,cAAc,EAAEC,eAAe,EAAEC,KAAK,QAAQ,mBAAmB;AAC1E,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,gBAAgB,QAAQ,oBAAoB;AAMrD;;;;;AAKA,eAAc,SAAUC,gBAAgBA,CACtCC,aAAqB,EACrBC,MAA+B,EAC/BC,iBAAqC;EAErC,MAAMC,eAAe,GAAGL,gBAAgB,EAAE;EAC1C,MAAMM,KAAK,GAAGP,cAAc,CAACD,KAAK,EAAEO,eAAe,CAAC;EACpDX,mBAAmB,CAACQ,aAAa,EAAE;IAAEK,aAAa,EAAEX,cAAc;IAAEY,cAAc,EAAEX,eAAe;IAAES;EAAK,CAAE,EAAEH,MAAM,CAAC;EACrHR,eAAe,EAAE;EACjB,MAAMc,UAAU,GAAGhB,oBAAoB,CACrCS,aAAa,EACb;IAAEQ,WAAW,EAAEd,cAAc;IAAEe,OAAO,EAAEd,eAAe;IAAES;EAAK,CAAE,EAChEF,iBAAwB,CACzB;EACD,OAAO;IAAEQ,iBAAiB,EAAEH;EAAU,CAAE;AAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}