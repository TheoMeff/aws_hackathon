{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\nexport const COMPONENT_METADATA_KEY = '__awsuiMetadata__';\nexport function useComponentMetadata(componentName, packageMetadata, analyticsMetadata) {\n  const elementRef = useRef(null);\n  useEffect(() => {\n    if (elementRef.current) {\n      const pkgMetadata = typeof packageMetadata === 'string' ? {\n        version: packageMetadata\n      } : packageMetadata;\n      const node = elementRef.current;\n      const metadata = Object.assign(Object.assign({}, pkgMetadata), {\n        name: componentName\n      });\n      // Only add analytics property to metadata if analytics property is non-empty\n      if (analyticsMetadata && Object.keys(analyticsMetadata).length > 0) {\n        metadata.analytics = analyticsMetadata;\n      }\n      Object.freeze(metadata);\n      Object.defineProperty(node, COMPONENT_METADATA_KEY, {\n        value: metadata,\n        writable: false,\n        configurable: true\n      });\n    }\n  });\n  return elementRef;\n}","map":{"version":3,"names":["useEffect","useRef","COMPONENT_METADATA_KEY","useComponentMetadata","componentName","packageMetadata","analyticsMetadata","elementRef","current","pkgMetadata","version","node","metadata","Object","assign","name","keys","length","analytics","freeze","defineProperty","value","writable","configurable"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/@cloudscape-design/component-toolkit/internal/base-component/component-metadata.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef } from 'react';\nexport const COMPONENT_METADATA_KEY = '__awsuiMetadata__';\nexport function useComponentMetadata(componentName, packageMetadata, analyticsMetadata) {\n    const elementRef = useRef(null);\n    useEffect(() => {\n        if (elementRef.current) {\n            const pkgMetadata = typeof packageMetadata === 'string' ? { version: packageMetadata } : packageMetadata;\n            const node = elementRef.current;\n            const metadata = Object.assign(Object.assign({}, pkgMetadata), { name: componentName });\n            // Only add analytics property to metadata if analytics property is non-empty\n            if (analyticsMetadata && Object.keys(analyticsMetadata).length > 0) {\n                metadata.analytics = analyticsMetadata;\n            }\n            Object.freeze(metadata);\n            Object.defineProperty(node, COMPONENT_METADATA_KEY, { value: metadata, writable: false, configurable: true });\n        }\n    });\n    return elementRef;\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,OAAO,MAAMC,sBAAsB,GAAG,mBAAmB;AACzD,OAAO,SAASC,oBAAoBA,CAACC,aAAa,EAAEC,eAAe,EAAEC,iBAAiB,EAAE;EACpF,MAAMC,UAAU,GAAGN,MAAM,CAAC,IAAI,CAAC;EAC/BD,SAAS,CAAC,MAAM;IACZ,IAAIO,UAAU,CAACC,OAAO,EAAE;MACpB,MAAMC,WAAW,GAAG,OAAOJ,eAAe,KAAK,QAAQ,GAAG;QAAEK,OAAO,EAAEL;MAAgB,CAAC,GAAGA,eAAe;MACxG,MAAMM,IAAI,GAAGJ,UAAU,CAACC,OAAO;MAC/B,MAAMI,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,WAAW,CAAC,EAAE;QAAEM,IAAI,EAAEX;MAAc,CAAC,CAAC;MACvF;MACA,IAAIE,iBAAiB,IAAIO,MAAM,CAACG,IAAI,CAACV,iBAAiB,CAAC,CAACW,MAAM,GAAG,CAAC,EAAE;QAChEL,QAAQ,CAACM,SAAS,GAAGZ,iBAAiB;MAC1C;MACAO,MAAM,CAACM,MAAM,CAACP,QAAQ,CAAC;MACvBC,MAAM,CAACO,cAAc,CAACT,IAAI,EAAET,sBAAsB,EAAE;QAAEmB,KAAK,EAAET,QAAQ;QAAEU,QAAQ,EAAE,KAAK;QAAEC,YAAY,EAAE;MAAK,CAAC,CAAC;IACjH;EACJ,CAAC,CAAC;EACF,OAAOhB,UAAU;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}