{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport InternalMultiselect from './internal';\nimport buttonTriggerAnalyticsSelectors from '../internal/components/button-trigger/analytics-metadata/styles.css.js';\nconst Multiselect = React.forwardRef((_a, ref) => {\n  var {\n      options = [],\n      filteringType = 'none',\n      statusType = 'finished',\n      selectedOptions = [],\n      keepOpen = true,\n      hideTokens = false\n    } = _a,\n    restProps = __rest(_a, [\"options\", \"filteringType\", \"statusType\", \"selectedOptions\", \"keepOpen\", \"hideTokens\"]);\n  const baseComponentProps = useBaseComponent('Multiselect', {\n    props: {\n      inlineTokens: restProps.inlineTokens,\n      autoFocus: restProps.autoFocus,\n      expandToViewport: restProps.expandToViewport,\n      filteringType,\n      hideTokens,\n      keepOpen,\n      tokenLimit: restProps.tokenLimit,\n      virtualScroll: restProps.virtualScroll,\n      readOnly: restProps.readOnly,\n      enableSelectAll: restProps.enableSelectAll\n    },\n    metadata: {\n      hasDisabledReasons: options.some(option => Boolean(option.disabledReason))\n    }\n  });\n  const componentAnalyticsMetadata = {\n    name: 'awsui.Multiselect',\n    label: `.${buttonTriggerAnalyticsSelectors['button-trigger']}`,\n    properties: {\n      disabled: `${!!restProps.disabled}`,\n      selectedOptionsCount: `${selectedOptions.length}`\n    }\n  };\n  return React.createElement(InternalMultiselect, Object.assign({\n    options: options,\n    filteringType: filteringType,\n    statusType: statusType,\n    selectedOptions: selectedOptions,\n    keepOpen: keepOpen,\n    hideTokens: hideTokens\n  }, restProps, baseComponentProps, {\n    ref: ref\n  }, getAnalyticsMetadataAttribute({\n    component: componentAnalyticsMetadata\n  })));\n});\napplyDisplayName(Multiselect, 'Multiselect');\nexport default Multiselect;","map":{"version":3,"names":["React","getAnalyticsMetadataAttribute","useBaseComponent","applyDisplayName","InternalMultiselect","buttonTriggerAnalyticsSelectors","Multiselect","forwardRef","_a","ref","options","filteringType","statusType","selectedOptions","keepOpen","hideTokens","restProps","__rest","baseComponentProps","props","inlineTokens","autoFocus","expandToViewport","tokenLimit","virtualScroll","readOnly","enableSelectAll","metadata","hasDisabledReasons","some","option","Boolean","disabledReason","componentAnalyticsMetadata","name","label","properties","disabled","selectedOptionsCount","length","createElement","Object","assign","component"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/multiselect/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { GeneratedAnalyticsMetadataMultiselectComponent } from './analytics-metadata/interfaces';\nimport { MultiselectProps } from './interfaces';\nimport InternalMultiselect from './internal';\n\nimport buttonTriggerAnalyticsSelectors from '../internal/components/button-trigger/analytics-metadata/styles.css.js';\n\nexport { MultiselectProps };\n\nconst Multiselect = React.forwardRef(\n  (\n    {\n      options = [],\n      filteringType = 'none',\n      statusType = 'finished',\n      selectedOptions = [],\n      keepOpen = true,\n      hideTokens = false,\n      ...restProps\n    }: MultiselectProps,\n    ref: React.Ref<MultiselectProps.Ref>\n  ) => {\n    const baseComponentProps = useBaseComponent('Multiselect', {\n      props: {\n        inlineTokens: restProps.inlineTokens,\n        autoFocus: restProps.autoFocus,\n        expandToViewport: restProps.expandToViewport,\n        filteringType,\n        hideTokens,\n        keepOpen,\n        tokenLimit: restProps.tokenLimit,\n        virtualScroll: restProps.virtualScroll,\n        readOnly: restProps.readOnly,\n        enableSelectAll: restProps.enableSelectAll,\n      },\n      metadata: {\n        hasDisabledReasons: options.some(option => Boolean(option.disabledReason)),\n      },\n    });\n\n    const componentAnalyticsMetadata: GeneratedAnalyticsMetadataMultiselectComponent = {\n      name: 'awsui.Multiselect',\n      label: `.${buttonTriggerAnalyticsSelectors['button-trigger']}`,\n      properties: {\n        disabled: `${!!restProps.disabled}`,\n        selectedOptionsCount: `${selectedOptions.length}`,\n      },\n    };\n\n    return (\n      <InternalMultiselect\n        options={options}\n        filteringType={filteringType}\n        statusType={statusType}\n        selectedOptions={selectedOptions}\n        keepOpen={keepOpen}\n        hideTokens={hideTokens}\n        {...restProps}\n        {...baseComponentProps}\n        ref={ref}\n        {...getAnalyticsMetadataAttribute({ component: componentAnalyticsMetadata })}\n      />\n    );\n  }\n);\n\napplyDisplayName(Multiselect, 'Multiselect');\nexport default Multiselect;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,6BAA6B,QAAQ,kEAAkE;AAEhH,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,gBAAgB,QAAQ,sCAAsC;AAGvE,OAAOC,mBAAmB,MAAM,YAAY;AAE5C,OAAOC,+BAA+B,MAAM,wEAAwE;AAIpH,MAAMC,WAAW,GAAGN,KAAK,CAACO,UAAU,CAClC,CACEC,EAQmB,EACnBC,GAAoC,KAClC;MAVF;MACEC,OAAO,GAAG,EAAE;MACZC,aAAa,GAAG,MAAM;MACtBC,UAAU,GAAG,UAAU;MACvBC,eAAe,GAAG,EAAE;MACpBC,QAAQ,GAAG,IAAI;MACfC,UAAU,GAAG;IAAK,IAAAP,EAED;IADdQ,SAAS,GAAAC,MAAA,CAAAT,EAAA,EAPd,uFAQC,CADa;EAId,MAAMU,kBAAkB,GAAGhB,gBAAgB,CAAC,aAAa,EAAE;IACzDiB,KAAK,EAAE;MACLC,YAAY,EAAEJ,SAAS,CAACI,YAAY;MACpCC,SAAS,EAAEL,SAAS,CAACK,SAAS;MAC9BC,gBAAgB,EAAEN,SAAS,CAACM,gBAAgB;MAC5CX,aAAa;MACbI,UAAU;MACVD,QAAQ;MACRS,UAAU,EAAEP,SAAS,CAACO,UAAU;MAChCC,aAAa,EAAER,SAAS,CAACQ,aAAa;MACtCC,QAAQ,EAAET,SAAS,CAACS,QAAQ;MAC5BC,eAAe,EAAEV,SAAS,CAACU;KAC5B;IACDC,QAAQ,EAAE;MACRC,kBAAkB,EAAElB,OAAO,CAACmB,IAAI,CAACC,MAAM,IAAIC,OAAO,CAACD,MAAM,CAACE,cAAc,CAAC;;GAE5E,CAAC;EAEF,MAAMC,0BAA0B,GAAmD;IACjFC,IAAI,EAAE,mBAAmB;IACzBC,KAAK,EAAE,IAAI9B,+BAA+B,CAAC,gBAAgB,CAAC,EAAE;IAC9D+B,UAAU,EAAE;MACVC,QAAQ,EAAE,GAAG,CAAC,CAACrB,SAAS,CAACqB,QAAQ,EAAE;MACnCC,oBAAoB,EAAE,GAAGzB,eAAe,CAAC0B,MAAM;;GAElD;EAED,OACEvC,KAAA,CAAAwC,aAAA,CAACpC,mBAAmB,EAAAqC,MAAA,CAAAC,MAAA;IAClBhC,OAAO,EAAEA,OAAO;IAChBC,aAAa,EAAEA,aAAa;IAC5BC,UAAU,EAAEA,UAAU;IACtBC,eAAe,EAAEA,eAAe;IAChCC,QAAQ,EAAEA,QAAQ;IAClBC,UAAU,EAAEA;EAAU,GAClBC,SAAS,EACTE,kBAAkB;IACtBT,GAAG,EAAEA;EAAG,GACJR,6BAA6B,CAAC;IAAE0C,SAAS,EAAEV;EAA0B,CAAE,CAAC,EAC5E;AAEN,CAAC,CACF;AAED9B,gBAAgB,CAACG,WAAW,EAAE,aAAa,CAAC;AAC5C,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}