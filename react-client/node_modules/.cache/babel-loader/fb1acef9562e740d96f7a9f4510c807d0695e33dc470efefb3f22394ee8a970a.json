{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useRef } from 'react';\nimport { createSingletonHandler } from '@cloudscape-design/component-toolkit/internal';\nconst useEventListenersSingleton = createSingletonHandler(setTarget => {\n  function handleMouseDown(event) {\n    setTarget(event.target);\n  }\n  function handleKeyDown() {\n    setTarget(null);\n  }\n  const controller = new AbortController();\n  window.addEventListener('mousedown', handleMouseDown, {\n    signal: controller.signal\n  });\n  window.addEventListener('keydown', handleKeyDown, {\n    signal: controller.signal\n  });\n  return () => {\n    controller.abort();\n  };\n});\n/**\n * Captures last mouse down target and clears it on keydown.\n * @returns a callback to get the last detected mouse down target.\n */\nexport default function useMouseDownTarget() {\n  const mouseDownTargetRef = useRef(null);\n  useEventListenersSingleton(target => {\n    mouseDownTargetRef.current = target;\n  });\n  return () => mouseDownTargetRef.current;\n}","map":{"version":3,"names":["useRef","createSingletonHandler","useEventListenersSingleton","setTarget","handleMouseDown","event","target","handleKeyDown","controller","AbortController","window","addEventListener","signal","abort","useMouseDownTarget","mouseDownTargetRef","current"],"sources":["/Users/theo/Library/CloudStorage/OneDrive-RackspaceInc/Documents/aws_hackathon/react-client/node_modules/src/internal/hooks/use-mouse-down-target.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useRef } from 'react';\n\nimport { createSingletonHandler } from '@cloudscape-design/component-toolkit/internal';\n\nconst useEventListenersSingleton = createSingletonHandler<Node | null>(setTarget => {\n  function handleMouseDown(event: MouseEvent) {\n    setTarget(event.target as Node);\n  }\n  function handleKeyDown() {\n    setTarget(null);\n  }\n  const controller = new AbortController();\n  window.addEventListener('mousedown', handleMouseDown, { signal: controller.signal });\n  window.addEventListener('keydown', handleKeyDown, { signal: controller.signal });\n  return () => {\n    controller.abort();\n  };\n});\n\n/**\n * Captures last mouse down target and clears it on keydown.\n * @returns a callback to get the last detected mouse down target.\n */\nexport default function useMouseDownTarget() {\n  const mouseDownTargetRef = useRef<null | Node>(null);\n  useEventListenersSingleton(target => {\n    mouseDownTargetRef.current = target;\n  });\n  return () => mouseDownTargetRef.current;\n}\n"],"mappings":"AAAA;AACA;AAEA,SAASA,MAAM,QAAQ,OAAO;AAE9B,SAASC,sBAAsB,QAAQ,+CAA+C;AAEtF,MAAMC,0BAA0B,GAAGD,sBAAsB,CAAcE,SAAS,IAAG;EACjF,SAASC,eAAeA,CAACC,KAAiB;IACxCF,SAAS,CAACE,KAAK,CAACC,MAAc,CAAC;EACjC;EACA,SAASC,aAAaA,CAAA;IACpBJ,SAAS,CAAC,IAAI,CAAC;EACjB;EACA,MAAMK,UAAU,GAAG,IAAIC,eAAe,EAAE;EACxCC,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAEP,eAAe,EAAE;IAAEQ,MAAM,EAAEJ,UAAU,CAACI;EAAM,CAAE,CAAC;EACpFF,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEJ,aAAa,EAAE;IAAEK,MAAM,EAAEJ,UAAU,CAACI;EAAM,CAAE,CAAC;EAChF,OAAO,MAAK;IACVJ,UAAU,CAACK,KAAK,EAAE;EACpB,CAAC;AACH,CAAC,CAAC;AAEF;;;;AAIA,eAAc,SAAUC,kBAAkBA,CAAA;EACxC,MAAMC,kBAAkB,GAAGf,MAAM,CAAc,IAAI,CAAC;EACpDE,0BAA0B,CAACI,MAAM,IAAG;IAClCS,kBAAkB,CAACC,OAAO,GAAGV,MAAM;EACrC,CAAC,CAAC;EACF,OAAO,MAAMS,kBAAkB,CAACC,OAAO;AACzC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}